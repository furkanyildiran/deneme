
deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001fbc  08001fbc  00002fbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002024  08002024  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002024  08002024  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002024  08002024  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002024  08002024  00003024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002028  08002028  00003028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800202c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08002094  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08002094  00004280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2a0  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202c  00000000  00000000  00011331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000057b9  00000000  00000000  0001335d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00018b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095a  00000000  00000000  00019358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001716c  00000000  00000000  00019cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112d7  00000000  00000000  00030e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008267d  00000000  00000000  000420f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c4772  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b34  00000000  00000000  000c47b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000c62ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fa4 	.word	0x08001fa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08001fa4 	.word	0x08001fa4

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b500      	push	{lr}
 800014e:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2224      	movs	r2, #36	@ 0x24
 8000152:	2100      	movs	r1, #0
 8000154:	a807      	add	r0, sp, #28
 8000156:	f001 fa95 	bl	8001684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015a:	2214      	movs	r2, #20
 800015c:	2100      	movs	r1, #0
 800015e:	a801      	add	r0, sp, #4
 8000160:	f001 fa90 	bl	8001684 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000164:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000166:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000168:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800016a:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800016c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800016e:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000172:	f000 fe7f 	bl	8000e74 <HAL_RCC_OscConfig>
 8000176:	4601      	mov	r1, r0
 8000178:	b108      	cbz	r0, 800017e <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800017a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800017c:	e7fe      	b.n	800017c <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800017e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000180:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000184:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000188:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800018a:	a801      	add	r0, sp, #4
 800018c:	f001 f834 	bl	80011f8 <HAL_RCC_ClockConfig>
 8000190:	b108      	cbz	r0, 8000196 <SystemClock_Config+0x4a>
 8000192:	b672      	cpsid	i
  while (1)
 8000194:	e7fe      	b.n	8000194 <SystemClock_Config+0x48>
}
 8000196:	b011      	add	sp, #68	@ 0x44
 8000198:	f85d fb04 	ldr.w	pc, [sp], #4

0800019c <main>:
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b088      	sub	sp, #32
  HAL_Init();
 80001a0:	f000 fa72 	bl	8000688 <HAL_Init>
  SystemClock_Config();
 80001a4:	f7ff ffd2 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a8:	2210      	movs	r2, #16
 80001aa:	2100      	movs	r1, #0
 80001ac:	eb0d 0002 	add.w	r0, sp, r2
 80001b0:	f001 fa68 	bl	8001684 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001b4:	4b98      	ldr	r3, [pc, #608]	@ (8000418 <main+0x27c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ba:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001bc:	4897      	ldr	r0, [pc, #604]	@ (800041c <main+0x280>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001be:	f042 0210 	orr.w	r2, r2, #16
 80001c2:	619a      	str	r2, [r3, #24]
 80001c4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c8:	f002 0210 	and.w	r2, r2, #16
 80001cc:	9201      	str	r2, [sp, #4]
 80001ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d4:	f042 0204 	orr.w	r2, r2, #4
 80001d8:	619a      	str	r2, [r3, #24]
 80001da:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001dc:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e0:	f002 0204 	and.w	r2, r2, #4
 80001e4:	9202      	str	r2, [sp, #8]
 80001e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e8:	699a      	ldr	r2, [r3, #24]
  huart2.Init.BaudRate = 115200;
 80001ea:	4f8d      	ldr	r7, [pc, #564]	@ (8000420 <main+0x284>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ec:	f042 0208 	orr.w	r2, r2, #8
 80001f0:	619a      	str	r2, [r3, #24]
 80001f2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f6:	f003 0308 	and.w	r3, r3, #8
 80001fa:	9303      	str	r3, [sp, #12]
 80001fc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001fe:	f000 fbb5 	bl	800096c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000206:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800020c:	4883      	ldr	r0, [pc, #524]	@ (800041c <main+0x280>)
 800020e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000210:	e9cd 4306 	strd	r4, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000214:	f000 fad2 	bl	80007bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_Pin|DATA_Pin;
 8000218:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021c:	4881      	ldr	r0, [pc, #516]	@ (8000424 <main+0x288>)
 800021e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000220:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000224:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000226:	f000 fac9 	bl	80007bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800022a:	4b7f      	ldr	r3, [pc, #508]	@ (8000428 <main+0x28c>)
  HAL_GPIO_Init(CLOCK_GPIO_Port, &GPIO_InitStruct);
 800022c:	487d      	ldr	r0, [pc, #500]	@ (8000424 <main+0x288>)
 800022e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000230:	e9cd 6304 	strd	r6, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000234:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CLOCK_GPIO_Port, &GPIO_InitStruct);
 8000236:	f000 fac1 	bl	80007bc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800023a:	4622      	mov	r2, r4
 800023c:	4621      	mov	r1, r4
 800023e:	2028      	movs	r0, #40	@ 0x28
 8000240:	f000 fa6a 	bl	8000718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000244:	2028      	movs	r0, #40	@ 0x28
 8000246:	f000 fa97 	bl	8000778 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 800024a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 800024e:	4877      	ldr	r0, [pc, #476]	@ (800042c <main+0x290>)
  huart2.Init.BaudRate = 115200;
 8000250:	e9c0 7300 	strd	r7, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000254:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000256:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025a:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800025e:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000260:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000262:	f001 f8bf 	bl	80013e4 <HAL_UART_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	b108      	cbz	r0, 800026e <main+0xd2>
 800026a:	b672      	cpsid	i
  while (1)
 800026c:	e7fe      	b.n	800026c <main+0xd0>
  hi2c1.Instance = I2C1;
 800026e:	4870      	ldr	r0, [pc, #448]	@ (8000430 <main+0x294>)
  hi2c1.Init.ClockSpeed = 100000;
 8000270:	4970      	ldr	r1, [pc, #448]	@ (8000434 <main+0x298>)
 8000272:	4a71      	ldr	r2, [pc, #452]	@ (8000438 <main+0x29c>)
  hi2c1.Init.OwnAddress1 = 0;
 8000274:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000278:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800027c:	e9c0 6304 	strd	r6, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000280:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000284:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000286:	f000 fc73 	bl	8000b70 <HAL_I2C_Init>
 800028a:	4604      	mov	r4, r0
 800028c:	b108      	cbz	r0, 8000292 <main+0xf6>
 800028e:	b672      	cpsid	i
  while (1)
 8000290:	e7fe      	b.n	8000290 <main+0xf4>
  LCD_init();
 8000292:	f001 f926 	bl	80014e2 <LCD_init>
  LCD_backlight(1); // Turn on backlight
 8000296:	4628      	mov	r0, r5
 8000298:	f001 f96e 	bl	8001578 <LCD_backlight>
  LCD_set_cursor(0, 0);
 800029c:	4621      	mov	r1, r4
 800029e:	4620      	mov	r0, r4
 80002a0:	f001 f956 	bl	8001550 <LCD_set_cursor>
  LCD_write_string("0");
 80002a4:	4865      	ldr	r0, [pc, #404]	@ (800043c <main+0x2a0>)
 80002a6:	f001 f94a 	bl	800153e <LCD_write_string>
  LCD_set_cursor(0, 15);
 80002aa:	210f      	movs	r1, #15
 80002ac:	4620      	mov	r0, r4
 80002ae:	f001 f94f 	bl	8001550 <LCD_set_cursor>
  LCD_write_string("<");
 80002b2:	4863      	ldr	r0, [pc, #396]	@ (8000440 <main+0x2a4>)
 80002b4:	f001 f943 	bl	800153e <LCD_write_string>
  LCD_set_cursor(1, 0);
 80002b8:	4621      	mov	r1, r4
 80002ba:	4628      	mov	r0, r5
 80002bc:	f001 f948 	bl	8001550 <LCD_set_cursor>
  LCD_write_string("1");
 80002c0:	4860      	ldr	r0, [pc, #384]	@ (8000444 <main+0x2a8>)
 80002c2:	f001 f93c 	bl	800153e <LCD_write_string>
	  current_counter = Switches_getCounter();
 80002c6:	4d60      	ldr	r5, [pc, #384]	@ (8000448 <main+0x2ac>)
	  if(current_counter > previous_counter){
 80002c8:	4c60      	ldr	r4, [pc, #384]	@ (800044c <main+0x2b0>)
	  current_counter = Switches_getCounter();
 80002ca:	f001 f9b5 	bl	8001638 <Switches_getCounter>
	  if(current_counter > 3) current_counter = 3;
 80002ce:	2803      	cmp	r0, #3
 80002d0:	bf28      	it	cs
 80002d2:	2003      	movcs	r0, #3
	  if(current_counter > previous_counter){
 80002d4:	7823      	ldrb	r3, [r4, #0]
	  current_counter = Switches_getCounter();
 80002d6:	7028      	strb	r0, [r5, #0]
	  if(current_counter > previous_counter){
 80002d8:	b2c0      	uxtb	r0, r0
 80002da:	4298      	cmp	r0, r3
 80002dc:	d948      	bls.n	8000370 <main+0x1d4>
		  if(sign_position!=1){
 80002de:	4f5c      	ldr	r7, [pc, #368]	@ (8000450 <main+0x2b4>)
 80002e0:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8000454 <main+0x2b8>
 80002e4:	783b      	ldrb	r3, [r7, #0]
 80002e6:	4e5c      	ldr	r6, [pc, #368]	@ (8000458 <main+0x2bc>)
 80002e8:	2b01      	cmp	r3, #1
		  previous_counter = current_counter;
 80002ea:	7020      	strb	r0, [r4, #0]
		  if(sign_position!=1){
 80002ec:	d030      	beq.n	8000350 <main+0x1b4>
			  sign_position++;
 80002ee:	3301      	adds	r3, #1
 80002f0:	703b      	strb	r3, [r7, #0]
		  LCD_clear();
 80002f2:	f001 f937 	bl	8001564 <LCD_clear>
		  LCD_set_cursor(sign_position, 15);
 80002f6:	210f      	movs	r1, #15
 80002f8:	7838      	ldrb	r0, [r7, #0]
 80002fa:	f001 f929 	bl	8001550 <LCD_set_cursor>
		  LCD_write_string("<");
 80002fe:	4850      	ldr	r0, [pc, #320]	@ (8000440 <main+0x2a4>)
 8000300:	f001 f91d 	bl	800153e <LCD_write_string>
		  LCD_set_cursor(sign_position, 7);
 8000304:	7838      	ldrb	r0, [r7, #0]
 8000306:	2107      	movs	r1, #7
 8000308:	f001 f922 	bl	8001550 <LCD_set_cursor>
		  sprintf(buff,"%d", last_menu_position);
 800030c:	f898 2000 	ldrb.w	r2, [r8]
 8000310:	4952      	ldr	r1, [pc, #328]	@ (800045c <main+0x2c0>)
 8000312:	4853      	ldr	r0, [pc, #332]	@ (8000460 <main+0x2c4>)
 8000314:	f001 f996 	bl	8001644 <siprintf>
		  LCD_write_string(buff);
 8000318:	4851      	ldr	r0, [pc, #324]	@ (8000460 <main+0x2c4>)
 800031a:	f001 f910 	bl	800153e <LCD_write_string>
		  LCD_set_cursor(0, 0);
 800031e:	2100      	movs	r1, #0
 8000320:	4608      	mov	r0, r1
 8000322:	f001 f915 	bl	8001550 <LCD_set_cursor>
		  sprintf(buff,"%d",current_menu[0]);
 8000326:	7832      	ldrb	r2, [r6, #0]
 8000328:	494c      	ldr	r1, [pc, #304]	@ (800045c <main+0x2c0>)
 800032a:	484d      	ldr	r0, [pc, #308]	@ (8000460 <main+0x2c4>)
 800032c:	f001 f98a 	bl	8001644 <siprintf>
		  LCD_write_string(buff);
 8000330:	484b      	ldr	r0, [pc, #300]	@ (8000460 <main+0x2c4>)
 8000332:	f001 f904 	bl	800153e <LCD_write_string>
		  LCD_set_cursor(1, 0);
 8000336:	2100      	movs	r1, #0
 8000338:	2001      	movs	r0, #1
 800033a:	f001 f909 	bl	8001550 <LCD_set_cursor>
		  sprintf(buff,"%d",current_menu[1]);
 800033e:	7872      	ldrb	r2, [r6, #1]
 8000340:	4946      	ldr	r1, [pc, #280]	@ (800045c <main+0x2c0>)
 8000342:	4847      	ldr	r0, [pc, #284]	@ (8000460 <main+0x2c4>)
 8000344:	f001 f97e 	bl	8001644 <siprintf>
		  LCD_write_string(buff);
 8000348:	4845      	ldr	r0, [pc, #276]	@ (8000460 <main+0x2c4>)
 800034a:	f001 f8f8 	bl	800153e <LCD_write_string>
 800034e:	e7bc      	b.n	80002ca <main+0x12e>
		  }else if(last_menu_position != full_menu_num){
 8000350:	4a44      	ldr	r2, [pc, #272]	@ (8000464 <main+0x2c8>)
 8000352:	f898 3000 	ldrb.w	r3, [r8]
 8000356:	7812      	ldrb	r2, [r2, #0]
 8000358:	429a      	cmp	r2, r3
 800035a:	d0ca      	beq.n	80002f2 <main+0x156>
			  current_menu[0] = current_menu[1];
 800035c:	7872      	ldrb	r2, [r6, #1]
			  last_menu_position++;
 800035e:	3301      	adds	r3, #1
			  current_menu[0] = current_menu[1];
 8000360:	7032      	strb	r2, [r6, #0]
			  current_menu[1] = full_menu[last_menu_position];
 8000362:	4a41      	ldr	r2, [pc, #260]	@ (8000468 <main+0x2cc>)
			  last_menu_position++;
 8000364:	b2db      	uxtb	r3, r3
 8000366:	f888 3000 	strb.w	r3, [r8]
			  current_menu[1] = full_menu[last_menu_position];
 800036a:	5cd3      	ldrb	r3, [r2, r3]
 800036c:	7073      	strb	r3, [r6, #1]
 800036e:	e7c0      	b.n	80002f2 <main+0x156>
	  }else if(current_counter < previous_counter){
 8000370:	d2ab      	bcs.n	80002ca <main+0x12e>
		  if(sign_position!=0){
 8000372:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8000450 <main+0x2b4>
			  last_menu_position--;
 8000376:	4e37      	ldr	r6, [pc, #220]	@ (8000454 <main+0x2b8>)
		  if(sign_position!=0){
 8000378:	f898 2000 	ldrb.w	r2, [r8]
			  last_menu_position--;
 800037c:	7833      	ldrb	r3, [r6, #0]
 800037e:	4f36      	ldr	r7, [pc, #216]	@ (8000458 <main+0x2bc>)
		  previous_counter = current_counter;
 8000380:	7020      	strb	r0, [r4, #0]
		  if(sign_position!=0){
 8000382:	2a00      	cmp	r2, #0
 8000384:	d03c      	beq.n	8000400 <main+0x264>
			  sign_position--;
 8000386:	3a01      	subs	r2, #1
			  last_menu_position--;
 8000388:	3b01      	subs	r3, #1
			  sign_position--;
 800038a:	f888 2000 	strb.w	r2, [r8]
			  last_menu_position--;
 800038e:	7033      	strb	r3, [r6, #0]
		  LCD_clear();
 8000390:	f001 f8e8 	bl	8001564 <LCD_clear>
		  LCD_set_cursor(sign_position, 15);
 8000394:	210f      	movs	r1, #15
 8000396:	f898 0000 	ldrb.w	r0, [r8]
 800039a:	f001 f8d9 	bl	8001550 <LCD_set_cursor>
		  LCD_write_string("<");
 800039e:	4828      	ldr	r0, [pc, #160]	@ (8000440 <main+0x2a4>)
 80003a0:	f001 f8cd 	bl	800153e <LCD_write_string>
		  LCD_set_cursor(sign_position, 7);
 80003a4:	2107      	movs	r1, #7
 80003a6:	f898 0000 	ldrb.w	r0, [r8]
 80003aa:	f001 f8d1 	bl	8001550 <LCD_set_cursor>
		  sprintf(buff,"%d", last_menu_position);
 80003ae:	7832      	ldrb	r2, [r6, #0]
 80003b0:	492a      	ldr	r1, [pc, #168]	@ (800045c <main+0x2c0>)
 80003b2:	482b      	ldr	r0, [pc, #172]	@ (8000460 <main+0x2c4>)
 80003b4:	f001 f946 	bl	8001644 <siprintf>
		  LCD_write_string(buff);
 80003b8:	4829      	ldr	r0, [pc, #164]	@ (8000460 <main+0x2c4>)
 80003ba:	f001 f8c0 	bl	800153e <LCD_write_string>
		  LCD_set_cursor(0, 0);
 80003be:	2100      	movs	r1, #0
 80003c0:	4608      	mov	r0, r1
 80003c2:	f001 f8c5 	bl	8001550 <LCD_set_cursor>
		  sprintf(buff,"%d",current_menu[0]);
 80003c6:	783a      	ldrb	r2, [r7, #0]
 80003c8:	4924      	ldr	r1, [pc, #144]	@ (800045c <main+0x2c0>)
 80003ca:	4825      	ldr	r0, [pc, #148]	@ (8000460 <main+0x2c4>)
 80003cc:	f001 f93a 	bl	8001644 <siprintf>
		  LCD_write_string(buff);
 80003d0:	4823      	ldr	r0, [pc, #140]	@ (8000460 <main+0x2c4>)
 80003d2:	f001 f8b4 	bl	800153e <LCD_write_string>
		  LCD_set_cursor(1, 0);
 80003d6:	2100      	movs	r1, #0
 80003d8:	2001      	movs	r0, #1
 80003da:	f001 f8b9 	bl	8001550 <LCD_set_cursor>
		  sprintf(buff,"%d",current_menu[1]);
 80003de:	787a      	ldrb	r2, [r7, #1]
 80003e0:	491e      	ldr	r1, [pc, #120]	@ (800045c <main+0x2c0>)
 80003e2:	481f      	ldr	r0, [pc, #124]	@ (8000460 <main+0x2c4>)
 80003e4:	f001 f92e 	bl	8001644 <siprintf>
		  LCD_write_string(buff);
 80003e8:	481d      	ldr	r0, [pc, #116]	@ (8000460 <main+0x2c4>)
 80003ea:	f001 f8a8 	bl	800153e <LCD_write_string>
		  if(last_menu_position == 0){
 80003ee:	7833      	ldrb	r3, [r6, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	f47f af6a 	bne.w	80002ca <main+0x12e>
			  last_menu_position = 1;
 80003f6:	2201      	movs	r2, #1
			  current_counter = 0;
 80003f8:	702b      	strb	r3, [r5, #0]
			  last_menu_position = 1;
 80003fa:	7032      	strb	r2, [r6, #0]
			  previous_counter = 0;
 80003fc:	7023      	strb	r3, [r4, #0]
 80003fe:	e764      	b.n	80002ca <main+0x12e>
		  }else if(last_menu_position != 0){
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0c5      	beq.n	8000390 <main+0x1f4>
			  current_menu[1] = current_menu[0];
 8000404:	783a      	ldrb	r2, [r7, #0]
			  last_menu_position--;
 8000406:	3b01      	subs	r3, #1
			  current_menu[1] = current_menu[0];
 8000408:	707a      	strb	r2, [r7, #1]
			  current_menu[0] = full_menu[last_menu_position];
 800040a:	4a17      	ldr	r2, [pc, #92]	@ (8000468 <main+0x2cc>)
			  last_menu_position--;
 800040c:	b2db      	uxtb	r3, r3
 800040e:	7033      	strb	r3, [r6, #0]
			  current_menu[0] = full_menu[last_menu_position];
 8000410:	5cd3      	ldrb	r3, [r2, r3]
 8000412:	703b      	strb	r3, [r7, #0]
 8000414:	e7bc      	b.n	8000390 <main+0x1f4>
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	40011000 	.word	0x40011000
 8000420:	40004400 	.word	0x40004400
 8000424:	40010c00 	.word	0x40010c00
 8000428:	10310000 	.word	0x10310000
 800042c:	2000008c 	.word	0x2000008c
 8000430:	200000d4 	.word	0x200000d4
 8000434:	40005400 	.word	0x40005400
 8000438:	000186a0 	.word	0x000186a0
 800043c:	08001fbe 	.word	0x08001fbe
 8000440:	08001fbc 	.word	0x08001fbc
 8000444:	08001fc0 	.word	0x08001fc0
 8000448:	2000008a 	.word	0x2000008a
 800044c:	20000089 	.word	0x20000089
 8000450:	20000088 	.word	0x20000088
 8000454:	20000000 	.word	0x20000000
 8000458:	20000002 	.word	0x20000002
 800045c:	08001fc2 	.word	0x08001fc2
 8000460:	20000084 	.word	0x20000084
 8000464:	20000001 	.word	0x20000001
 8000468:	20000004 	.word	0x20000004

0800046c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800046c:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <HAL_MspInit+0x3c>)
{
 800046e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	f042 0201 	orr.w	r2, r2, #1
 8000476:	619a      	str	r2, [r3, #24]
 8000478:	699a      	ldr	r2, [r3, #24]
 800047a:	f002 0201 	and.w	r2, r2, #1
 800047e:	9200      	str	r2, [sp, #0]
 8000480:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	69da      	ldr	r2, [r3, #28]
 8000484:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000488:	61da      	str	r2, [r3, #28]
 800048a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800048c:	4a07      	ldr	r2, [pc, #28]	@ (80004ac <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000492:	9301      	str	r3, [sp, #4]
 8000494:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000496:	6853      	ldr	r3, [r2, #4]
 8000498:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800049c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80004a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	b002      	add	sp, #8
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000

080004b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004b0:	b510      	push	{r4, lr}
 80004b2:	4604      	mov	r4, r0
 80004b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	2210      	movs	r2, #16
 80004b8:	2100      	movs	r1, #0
 80004ba:	a802      	add	r0, sp, #8
 80004bc:	f001 f8e2 	bl	8001684 <memset>
  if(hi2c->Instance==I2C1)
 80004c0:	6822      	ldr	r2, [r4, #0]
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <HAL_I2C_MspInit+0x58>)
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d11c      	bne.n	8000502 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4c10      	ldr	r4, [pc, #64]	@ (800050c <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ca:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004cc:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	4810      	ldr	r0, [pc, #64]	@ (8000510 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	f043 0308 	orr.w	r3, r3, #8
 80004d4:	61a3      	str	r3, [r4, #24]
 80004d6:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	f003 0308 	and.w	r3, r3, #8
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004e2:	2312      	movs	r3, #18
 80004e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e8:	2303      	movs	r3, #3
 80004ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f000 f966 	bl	80007bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f0:	69e3      	ldr	r3, [r4, #28]
 80004f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004f6:	61e3      	str	r3, [r4, #28]
 80004f8:	69e3      	ldr	r3, [r4, #28]
 80004fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000502:	b006      	add	sp, #24
 8000504:	bd10      	pop	{r4, pc}
 8000506:	bf00      	nop
 8000508:	40005400 	.word	0x40005400
 800050c:	40021000 	.word	0x40021000
 8000510:	40010c00 	.word	0x40010c00

08000514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000514:	b510      	push	{r4, lr}
 8000516:	4604      	mov	r4, r0
 8000518:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	2210      	movs	r2, #16
 800051c:	2100      	movs	r1, #0
 800051e:	a802      	add	r0, sp, #8
 8000520:	f001 f8b0 	bl	8001684 <memset>
  if(huart->Instance==USART2)
 8000524:	6822      	ldr	r2, [r4, #0]
 8000526:	4b16      	ldr	r3, [pc, #88]	@ (8000580 <HAL_UART_MspInit+0x6c>)
 8000528:	429a      	cmp	r2, r3
 800052a:	d126      	bne.n	800057a <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800052c:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8000530:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	4814      	ldr	r0, [pc, #80]	@ (8000584 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000534:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000538:	61da      	str	r2, [r3, #28]
 800053a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800053e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000542:	9200      	str	r2, [sp, #0]
 8000544:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	699a      	ldr	r2, [r3, #24]
 8000548:	f042 0204 	orr.w	r2, r2, #4
 800054c:	619a      	str	r2, [r3, #24]
 800054e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000550:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	2302      	movs	r3, #2
 800055c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000560:	2303      	movs	r3, #3
 8000562:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f000 f92a 	bl	80007bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2108      	movs	r1, #8
 800056a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f000 f921 	bl	80007bc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800057a:	b006      	add	sp, #24
 800057c:	bd10      	pop	{r4, pc}
 800057e:	bf00      	nop
 8000580:	40004400 	.word	0x40004400
 8000584:	40010800 	.word	0x40010800

08000588 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler>

0800058a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler>

0800058c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <MemManage_Handler>

0800058e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler>

08000590 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <UsageFault_Handler>

08000592 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000594:	4770      	bx	lr

08000596 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000596:	4770      	bx	lr

08000598 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 b888 	b.w	80006ac <HAL_IncTick>

0800059c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800059c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLOCK_Pin);
 800059e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80005a2:	f000 f9e9 	bl	8000978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  Switches_calcEncoder();
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Switches_calcEncoder();
 80005aa:	f000 bffd 	b.w	80015a8 <Switches_calcEncoder>
	...

080005b0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b0:	4a0b      	ldr	r2, [pc, #44]	@ (80005e0 <_sbrk+0x30>)
{
 80005b2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80005b4:	6811      	ldr	r1, [r2, #0]
{
 80005b6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80005b8:	b909      	cbnz	r1, 80005be <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80005ba:	490a      	ldr	r1, [pc, #40]	@ (80005e4 <_sbrk+0x34>)
 80005bc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005be:	6810      	ldr	r0, [r2, #0]
 80005c0:	4909      	ldr	r1, [pc, #36]	@ (80005e8 <_sbrk+0x38>)
 80005c2:	4c0a      	ldr	r4, [pc, #40]	@ (80005ec <_sbrk+0x3c>)
 80005c4:	4403      	add	r3, r0
 80005c6:	1b09      	subs	r1, r1, r4
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d906      	bls.n	80005da <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80005cc:	f001 f862 	bl	8001694 <__errno>
 80005d0:	230c      	movs	r3, #12
 80005d2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80005d4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80005d8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80005da:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80005dc:	e7fc      	b.n	80005d8 <_sbrk+0x28>
 80005de:	bf00      	nop
 80005e0:	20000128 	.word	0x20000128
 80005e4:	20000280 	.word	0x20000280
 80005e8:	20002800 	.word	0x20002800
 80005ec:	00000400 	.word	0x00000400

080005f0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f0:	4770      	bx	lr
	...

080005f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f4:	f7ff fffc 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005fa:	490c      	ldr	r1, [pc, #48]	@ (800062c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000610:	4c09      	ldr	r4, [pc, #36]	@ (8000638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061e:	f001 f83f 	bl	80016a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fdbb 	bl	800019c <main>
  bx lr
 8000626:	4770      	bx	lr
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000630:	0800202c 	.word	0x0800202c
  ldr r2, =_sbss
 8000634:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000638:	20000280 	.word	0x20000280

0800063c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_2_IRQHandler>
	...

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <HAL_InitTick+0x3c>)
{
 8000644:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000650:	4a0b      	ldr	r2, [pc, #44]	@ (8000680 <HAL_InitTick+0x40>)
 8000652:	6810      	ldr	r0, [r2, #0]
 8000654:	fbb0 f0f3 	udiv	r0, r0, r3
 8000658:	f000 f89c 	bl	8000794 <HAL_SYSTICK_Config>
 800065c:	4604      	mov	r4, r0
 800065e:	b958      	cbnz	r0, 8000678 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000660:	2d0f      	cmp	r5, #15
 8000662:	d809      	bhi.n	8000678 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000664:	4602      	mov	r2, r0
 8000666:	4629      	mov	r1, r5
 8000668:	f04f 30ff 	mov.w	r0, #4294967295
 800066c:	f000 f854 	bl	8000718 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000670:	4620      	mov	r0, r4
 8000672:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <HAL_InitTick+0x44>)
 8000674:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000676:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000678:	2001      	movs	r0, #1
 800067a:	e7fc      	b.n	8000676 <HAL_InitTick+0x36>
 800067c:	2000000c 	.word	0x2000000c
 8000680:	20000008 	.word	0x20000008
 8000684:	20000010 	.word	0x20000010

08000688 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <HAL_Init+0x20>)
{
 800068a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000696:	f000 f82d 	bl	80006f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800069a:	200f      	movs	r0, #15
 800069c:	f7ff ffd0 	bl	8000640 <HAL_InitTick>
  HAL_MspInit();
 80006a0:	f7ff fee4 	bl	800046c <HAL_MspInit>
}
 80006a4:	2000      	movs	r0, #0
 80006a6:	bd08      	pop	{r3, pc}
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006ac:	4a03      	ldr	r2, [pc, #12]	@ (80006bc <HAL_IncTick+0x10>)
 80006ae:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <HAL_IncTick+0x14>)
 80006b0:	6811      	ldr	r1, [r2, #0]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	440b      	add	r3, r1
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	2000012c 	.word	0x2000012c
 80006c0:	2000000c 	.word	0x2000000c

080006c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006c4:	4b01      	ldr	r3, [pc, #4]	@ (80006cc <HAL_GetTick+0x8>)
 80006c6:	6818      	ldr	r0, [r3, #0]
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	2000012c 	.word	0x2000012c

080006d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d0:	b538      	push	{r3, r4, r5, lr}
 80006d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff fff6 	bl	80006c4 <HAL_GetTick>
 80006d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006da:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006dc:	bf1e      	ittt	ne
 80006de:	4b04      	ldrne	r3, [pc, #16]	@ (80006f0 <HAL_Delay+0x20>)
 80006e0:	781b      	ldrbne	r3, [r3, #0]
 80006e2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006e4:	f7ff ffee 	bl	80006c4 <HAL_GetTick>
 80006e8:	1b43      	subs	r3, r0, r5
 80006ea:	42a3      	cmp	r3, r4
 80006ec:	d3fa      	bcc.n	80006e4 <HAL_Delay+0x14>
  {
  }
}
 80006ee:	bd38      	pop	{r3, r4, r5, pc}
 80006f0:	2000000c 	.word	0x2000000c

080006f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4907      	ldr	r1, [pc, #28]	@ (8000714 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000702:	0412      	lsls	r2, r2, #16
 8000704:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000710:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	68dc      	ldr	r4, [r3, #12]
 800071e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000722:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000728:	2b04      	cmp	r3, #4
 800072a:	bf28      	it	cs
 800072c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000734:	bf94      	ite	ls
 8000736:	2400      	movls	r4, #0
 8000738:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073a:	fa05 f303 	lsl.w	r3, r5, r3
 800073e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000742:	40a5      	lsls	r5, r4
 8000744:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800074a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	bfac      	ite	ge
 8000752:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	4a07      	ldrlt	r2, [pc, #28]	@ (8000774 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800075c:	b2db      	uxtb	r3, r3
 800075e:	bfab      	itete	ge
 8000760:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	e000ed14 	.word	0xe000ed14

08000778 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000778:	2800      	cmp	r0, #0
 800077a:	db07      	blt.n	800078c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077c:	2301      	movs	r3, #1
 800077e:	0941      	lsrs	r1, r0, #5
 8000780:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <HAL_NVIC_EnableIRQ+0x18>)
 8000782:	f000 001f 	and.w	r0, r0, #31
 8000786:	4083      	lsls	r3, r0
 8000788:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000e100 	.word	0xe000e100

08000794 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	3801      	subs	r0, #1
 8000796:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800079a:	d20b      	bcs.n	80007b4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	21f0      	movs	r1, #240	@ 0xf0
 80007a2:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007aa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ac:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ae:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007b4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007c0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80007c2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007c4:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8000944 <HAL_GPIO_Init+0x188>
 80007c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000948 <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 80007ca:	f8df e180 	ldr.w	lr, [pc, #384]	@ 800094c <HAL_GPIO_Init+0x190>
 80007ce:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8000950 <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d2:	680d      	ldr	r5, [r1, #0]
 80007d4:	fa35 f406 	lsrs.w	r4, r5, r6
 80007d8:	d102      	bne.n	80007e0 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80007da:	b003      	add	sp, #12
 80007dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80007e0:	2701      	movs	r7, #1
 80007e2:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e4:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 80007e8:	ea37 0505 	bics.w	r5, r7, r5
 80007ec:	d175      	bne.n	80008da <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 80007ee:	684d      	ldr	r5, [r1, #4]
 80007f0:	2d03      	cmp	r5, #3
 80007f2:	d806      	bhi.n	8000802 <HAL_GPIO_Init+0x46>
 80007f4:	3d01      	subs	r5, #1
 80007f6:	2d02      	cmp	r5, #2
 80007f8:	d87e      	bhi.n	80008f8 <HAL_GPIO_Init+0x13c>
 80007fa:	e8df f005 	tbb	[pc, r5]
 80007fe:	948f      	.short	0x948f
 8000800:	9a          	.byte	0x9a
 8000801:	00          	.byte	0x00
 8000802:	2d12      	cmp	r5, #18
 8000804:	f000 8092 	beq.w	800092c <HAL_GPIO_Init+0x170>
 8000808:	d869      	bhi.n	80008de <HAL_GPIO_Init+0x122>
 800080a:	2d11      	cmp	r5, #17
 800080c:	f000 8088 	beq.w	8000920 <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000810:	2cff      	cmp	r4, #255	@ 0xff
 8000812:	bf98      	it	ls
 8000814:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000816:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800081a:	bf88      	it	hi
 800081c:	f100 0904 	addhi.w	r9, r0, #4
 8000820:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000824:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000828:	bf88      	it	hi
 800082a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800082c:	fa0b fa05 	lsl.w	sl, fp, r5
 8000830:	ea27 070a 	bic.w	r7, r7, sl
 8000834:	fa02 f505 	lsl.w	r5, r2, r5
 8000838:	432f      	orrs	r7, r5
 800083a:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800083e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000842:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8000846:	d048      	beq.n	80008da <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000848:	f8dc 5018 	ldr.w	r5, [ip, #24]
 800084c:	f026 0703 	bic.w	r7, r6, #3
 8000850:	f045 0501 	orr.w	r5, r5, #1
 8000854:	f8cc 5018 	str.w	r5, [ip, #24]
 8000858:	f8dc 5018 	ldr.w	r5, [ip, #24]
 800085c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000860:	f005 0501 	and.w	r5, r5, #1
 8000864:	9501      	str	r5, [sp, #4]
 8000866:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800086a:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800086e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000870:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000874:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000876:	fa0b fb0a 	lsl.w	fp, fp, sl
 800087a:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800087e:	4d35      	ldr	r5, [pc, #212]	@ (8000954 <HAL_GPIO_Init+0x198>)
 8000880:	42a8      	cmp	r0, r5
 8000882:	d05a      	beq.n	800093a <HAL_GPIO_Init+0x17e>
 8000884:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000888:	42a8      	cmp	r0, r5
 800088a:	d058      	beq.n	800093e <HAL_GPIO_Init+0x182>
 800088c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000890:	42a8      	cmp	r0, r5
 8000892:	bf14      	ite	ne
 8000894:	2503      	movne	r5, #3
 8000896:	2502      	moveq	r5, #2
 8000898:	fa05 f50a 	lsl.w	r5, r5, sl
 800089c:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80008a0:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80008a2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008a4:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80008a8:	bf14      	ite	ne
 80008aa:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008ac:	43a5      	biceq	r5, r4
 80008ae:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80008b0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008b2:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008b6:	bf14      	ite	ne
 80008b8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008ba:	43a5      	biceq	r5, r4
 80008bc:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80008be:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c0:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80008c4:	bf14      	ite	ne
 80008c6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008c8:	43a5      	biceq	r5, r4
 80008ca:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80008cc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ce:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80008d2:	bf14      	ite	ne
 80008d4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008d6:	43a5      	biceq	r5, r4
 80008d8:	601d      	str	r5, [r3, #0]
	position++;
 80008da:	3601      	adds	r6, #1
 80008dc:	e779      	b.n	80007d2 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80008de:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8000958 <HAL_GPIO_Init+0x19c>
 80008e2:	454d      	cmp	r5, r9
 80008e4:	d008      	beq.n	80008f8 <HAL_GPIO_Init+0x13c>
 80008e6:	d811      	bhi.n	800090c <HAL_GPIO_Init+0x150>
 80008e8:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80008ec:	454d      	cmp	r5, r9
 80008ee:	d003      	beq.n	80008f8 <HAL_GPIO_Init+0x13c>
 80008f0:	4575      	cmp	r5, lr
 80008f2:	d001      	beq.n	80008f8 <HAL_GPIO_Init+0x13c>
 80008f4:	4545      	cmp	r5, r8
 80008f6:	d18b      	bne.n	8000810 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f8:	688a      	ldr	r2, [r1, #8]
 80008fa:	b1e2      	cbz	r2, 8000936 <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008fc:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80008fe:	bf08      	it	eq
 8000900:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000902:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000906:	bf18      	it	ne
 8000908:	6147      	strne	r7, [r0, #20]
 800090a:	e781      	b.n	8000810 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800090c:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 800095c <HAL_GPIO_Init+0x1a0>
 8000910:	454d      	cmp	r5, r9
 8000912:	d0f1      	beq.n	80008f8 <HAL_GPIO_Init+0x13c>
 8000914:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8000918:	454d      	cmp	r5, r9
 800091a:	e7ec      	b.n	80008f6 <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800091c:	68ca      	ldr	r2, [r1, #12]
          break;
 800091e:	e777      	b.n	8000810 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000920:	68ca      	ldr	r2, [r1, #12]
 8000922:	3204      	adds	r2, #4
          break;
 8000924:	e774      	b.n	8000810 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000926:	68ca      	ldr	r2, [r1, #12]
 8000928:	3208      	adds	r2, #8
          break;
 800092a:	e771      	b.n	8000810 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800092c:	68ca      	ldr	r2, [r1, #12]
 800092e:	320c      	adds	r2, #12
          break;
 8000930:	e76e      	b.n	8000810 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8000932:	2200      	movs	r2, #0
 8000934:	e76c      	b.n	8000810 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000936:	2204      	movs	r2, #4
 8000938:	e76a      	b.n	8000810 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800093a:	2500      	movs	r5, #0
 800093c:	e7ac      	b.n	8000898 <HAL_GPIO_Init+0xdc>
 800093e:	2501      	movs	r5, #1
 8000940:	e7aa      	b.n	8000898 <HAL_GPIO_Init+0xdc>
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000
 8000948:	40010400 	.word	0x40010400
 800094c:	10210000 	.word	0x10210000
 8000950:	10110000 	.word	0x10110000
 8000954:	40010800 	.word	0x40010800
 8000958:	10220000 	.word	0x10220000
 800095c:	10310000 	.word	0x10310000

08000960 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000960:	6883      	ldr	r3, [r0, #8]
 8000962:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000964:	bf14      	ite	ne
 8000966:	2001      	movne	r0, #1
 8000968:	2000      	moveq	r0, #0
 800096a:	4770      	bx	lr

0800096c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800096c:	b10a      	cbz	r2, 8000972 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800096e:	6101      	str	r1, [r0, #16]
  }
}
 8000970:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000972:	0409      	lsls	r1, r1, #16
 8000974:	e7fb      	b.n	800096e <HAL_GPIO_WritePin+0x2>

08000976 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000976:	4770      	bx	lr

08000978 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800097a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800097c:	6951      	ldr	r1, [r2, #20]
 800097e:	4201      	tst	r1, r0
 8000980:	d002      	beq.n	8000988 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000982:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000984:	f7ff fff7 	bl	8000976 <HAL_GPIO_EXTI_Callback>
}
 8000988:	bd08      	pop	{r3, pc}
 800098a:	bf00      	nop
 800098c:	40010400 	.word	0x40010400

08000990 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000990:	6801      	ldr	r1, [r0, #0]
 8000992:	2200      	movs	r2, #0
 8000994:	694b      	ldr	r3, [r1, #20]
 8000996:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 800099a:	d010      	beq.n	80009be <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800099c:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80009a0:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80009a2:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80009a4:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80009a6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009aa:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80009ae:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009b0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
 80009bc:	4770      	bx	lr
  }
  return HAL_OK;
 80009be:	4618      	mov	r0, r3
}
 80009c0:	4770      	bx	lr

080009c2 <I2C_WaitOnFlagUntilTimeout>:
{
 80009c2:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80009c6:	4606      	mov	r6, r0
 80009c8:	460f      	mov	r7, r1
 80009ca:	4691      	mov	r9, r2
 80009cc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80009ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80009d2:	6833      	ldr	r3, [r6, #0]
 80009d4:	f1ba 0f01 	cmp.w	sl, #1
 80009d8:	bf0c      	ite	eq
 80009da:	695c      	ldreq	r4, [r3, #20]
 80009dc:	699c      	ldrne	r4, [r3, #24]
 80009de:	ea27 0404 	bic.w	r4, r7, r4
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fab4 f484 	clz	r4, r4
 80009e8:	0964      	lsrs	r4, r4, #5
 80009ea:	45a1      	cmp	r9, r4
 80009ec:	d001      	beq.n	80009f2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80009ee:	2000      	movs	r0, #0
 80009f0:	e025      	b.n	8000a3e <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80009f2:	1c6a      	adds	r2, r5, #1
 80009f4:	d0ee      	beq.n	80009d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009f6:	f7ff fe65 	bl	80006c4 <HAL_GetTick>
 80009fa:	9b08      	ldr	r3, [sp, #32]
 80009fc:	1ac0      	subs	r0, r0, r3
 80009fe:	42a8      	cmp	r0, r5
 8000a00:	d801      	bhi.n	8000a06 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d1e5      	bne.n	80009d2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000a06:	6833      	ldr	r3, [r6, #0]
 8000a08:	f1ba 0f01 	cmp.w	sl, #1
 8000a0c:	bf0c      	ite	eq
 8000a0e:	695b      	ldreq	r3, [r3, #20]
 8000a10:	699b      	ldrne	r3, [r3, #24]
 8000a12:	ea27 0303 	bic.w	r3, r7, r3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	095b      	lsrs	r3, r3, #5
 8000a1e:	4599      	cmp	r9, r3
 8000a20:	d1d7      	bne.n	80009d2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8000a22:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8000a24:	2220      	movs	r2, #32
          return HAL_ERROR;
 8000a26:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8000a28:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8000a2a:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000a2e:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000a32:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000a34:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000a38:	f042 0220 	orr.w	r2, r2, #32
 8000a3c:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8000a3e:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08000a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a46:	4604      	mov	r4, r0
 8000a48:	460f      	mov	r7, r1
 8000a4a:	4616      	mov	r6, r2
 8000a4c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000a4e:	6825      	ldr	r5, [r4, #0]
 8000a50:	6968      	ldr	r0, [r5, #20]
 8000a52:	ea27 0000 	bic.w	r0, r7, r0
 8000a56:	b280      	uxth	r0, r0
 8000a58:	b1c0      	cbz	r0, 8000a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a5a:	696b      	ldr	r3, [r5, #20]
 8000a5c:	055a      	lsls	r2, r3, #21
 8000a5e:	d517      	bpl.n	8000a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a60:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a62:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a68:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a6a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8000a6e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a74:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a78:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000a7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a82:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000a84:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000a86:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8000a88:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8000a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000a90:	1c73      	adds	r3, r6, #1
 8000a92:	d0dd      	beq.n	8000a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a94:	f7ff fe16 	bl	80006c4 <HAL_GetTick>
 8000a98:	eba0 0008 	sub.w	r0, r0, r8
 8000a9c:	42b0      	cmp	r0, r6
 8000a9e:	d801      	bhi.n	8000aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d1d4      	bne.n	8000a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	ea27 0202 	bic.w	r2, r7, r2
 8000aac:	b292      	uxth	r2, r2
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d0cd      	beq.n	8000a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000ab2:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8000ab4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000ab6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000ab8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000abc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ac0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	e7dd      	b.n	8000a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08000ac6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000ac6:	b570      	push	{r4, r5, r6, lr}
 8000ac8:	4604      	mov	r4, r0
 8000aca:	460d      	mov	r5, r1
 8000acc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	061b      	lsls	r3, r3, #24
 8000ad4:	d501      	bpl.n	8000ada <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	e01e      	b.n	8000b18 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ada:	4620      	mov	r0, r4
 8000adc:	f7ff ff58 	bl	8000990 <I2C_IsAcknowledgeFailed>
 8000ae0:	b9c8      	cbnz	r0, 8000b16 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000ae2:	1c6a      	adds	r2, r5, #1
 8000ae4:	d0f3      	beq.n	8000ace <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ae6:	f7ff fded 	bl	80006c4 <HAL_GetTick>
 8000aea:	1b80      	subs	r0, r0, r6
 8000aec:	42a8      	cmp	r0, r5
 8000aee:	d801      	bhi.n	8000af4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000af0:	2d00      	cmp	r5, #0
 8000af2:	d1ec      	bne.n	8000ace <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8000afc:	d1e7      	bne.n	8000ace <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8000afe:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000b00:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b02:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b06:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b0a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000b0c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b10:	f042 0220 	orr.w	r2, r2, #32
 8000b14:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8000b16:	2001      	movs	r0, #1
}
 8000b18:	bd70      	pop	{r4, r5, r6, pc}

08000b1a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000b1a:	b570      	push	{r4, r5, r6, lr}
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	460d      	mov	r5, r1
 8000b20:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	075b      	lsls	r3, r3, #29
 8000b28:	d501      	bpl.n	8000b2e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	e01e      	b.n	8000b6c <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f7ff ff2e 	bl	8000990 <I2C_IsAcknowledgeFailed>
 8000b34:	b9c8      	cbnz	r0, 8000b6a <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000b36:	1c6a      	adds	r2, r5, #1
 8000b38:	d0f3      	beq.n	8000b22 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b3a:	f7ff fdc3 	bl	80006c4 <HAL_GetTick>
 8000b3e:	1b80      	subs	r0, r0, r6
 8000b40:	42a8      	cmp	r0, r5
 8000b42:	d801      	bhi.n	8000b48 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d1ec      	bne.n	8000b22 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f013 0304 	ands.w	r3, r3, #4
 8000b50:	d1e7      	bne.n	8000b22 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b52:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000b54:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b56:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b5a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b5e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000b60:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b64:	f042 0220 	orr.w	r2, r2, #32
 8000b68:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8000b6a:	2001      	movs	r0, #1
}
 8000b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b70 <HAL_I2C_Init>:
{
 8000b70:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000b72:	4604      	mov	r4, r0
 8000b74:	b908      	cbnz	r0, 8000b7a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
}
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b7a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000b7e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000b82:	b91b      	cbnz	r3, 8000b8c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000b84:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8000b88:	f7ff fc92 	bl	80004b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b8c:	2324      	movs	r3, #36	@ 0x24
 8000b8e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	f022 0201 	bic.w	r2, r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000baa:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bac:	f000 fbc0 	bl	8001330 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cb0 <HAL_I2C_Init+0x140>)
 8000bb2:	6865      	ldr	r5, [r4, #4]
 8000bb4:	429d      	cmp	r5, r3
 8000bb6:	bf94      	ite	ls
 8000bb8:	4b3e      	ldrls	r3, [pc, #248]	@ (8000cb4 <HAL_I2C_Init+0x144>)
 8000bba:	4b3f      	ldrhi	r3, [pc, #252]	@ (8000cb8 <HAL_I2C_Init+0x148>)
 8000bbc:	4298      	cmp	r0, r3
 8000bbe:	bf8c      	ite	hi
 8000bc0:	2300      	movhi	r3, #0
 8000bc2:	2301      	movls	r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1d6      	bne.n	8000b76 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bc8:	4e39      	ldr	r6, [pc, #228]	@ (8000cb0 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000bca:	4b3c      	ldr	r3, [pc, #240]	@ (8000cbc <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bcc:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8000bce:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bd2:	bf88      	it	hi
 8000bd4:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	6851      	ldr	r1, [r2, #4]
 8000bdc:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000be0:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000be4:	bf82      	ittt	hi
 8000be6:	4373      	mulhi	r3, r6
 8000be8:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8000bec:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bf0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bf2:	6a11      	ldr	r1, [r2, #32]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bfe:	69d1      	ldr	r1, [r2, #28]
 8000c00:	1e43      	subs	r3, r0, #1
 8000c02:	482b      	ldr	r0, [pc, #172]	@ (8000cb0 <HAL_I2C_Init+0x140>)
 8000c04:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8000c08:	4285      	cmp	r5, r0
 8000c0a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000c0e:	d832      	bhi.n	8000c76 <HAL_I2C_Init+0x106>
 8000c10:	006d      	lsls	r5, r5, #1
 8000c12:	fbb3 f3f5 	udiv	r3, r3, r5
 8000c16:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4203      	tst	r3, r0
 8000c1e:	d042      	beq.n	8000ca6 <HAL_I2C_Init+0x136>
 8000c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c24:	4319      	orrs	r1, r3
 8000c26:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000c28:	6811      	ldr	r1, [r2, #0]
 8000c2a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8000c2e:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8000c32:	4303      	orrs	r3, r0
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000c38:	6891      	ldr	r1, [r2, #8]
 8000c3a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8000c3e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8000c42:	4303      	orrs	r3, r0
 8000c44:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c4c:	68d1      	ldr	r1, [r2, #12]
 8000c4e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8000c52:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000c56:	4303      	orrs	r3, r0
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000c5c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c5e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000c66:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c68:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c6e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c70:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8000c74:	e780      	b.n	8000b78 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c76:	68a0      	ldr	r0, [r4, #8]
 8000c78:	b950      	cbnz	r0, 8000c90 <HAL_I2C_Init+0x120>
 8000c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c7e:	fbb3 f3f5 	udiv	r3, r3, r5
 8000c82:	3301      	adds	r3, #1
 8000c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c88:	b17b      	cbz	r3, 8000caa <HAL_I2C_Init+0x13a>
 8000c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c8e:	e7c9      	b.n	8000c24 <HAL_I2C_Init+0xb4>
 8000c90:	2019      	movs	r0, #25
 8000c92:	4368      	muls	r0, r5
 8000c94:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c9e:	b123      	cbz	r3, 8000caa <HAL_I2C_Init+0x13a>
 8000ca0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ca4:	e7be      	b.n	8000c24 <HAL_I2C_Init+0xb4>
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	e7bc      	b.n	8000c24 <HAL_I2C_Init+0xb4>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e7ba      	b.n	8000c24 <HAL_I2C_Init+0xb4>
 8000cae:	bf00      	nop
 8000cb0:	000186a0 	.word	0x000186a0
 8000cb4:	001e847f 	.word	0x001e847f
 8000cb8:	003d08ff 	.word	0x003d08ff
 8000cbc:	000f4240 	.word	0x000f4240

08000cc0 <HAL_I2C_Master_Transmit>:
{
 8000cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	4698      	mov	r8, r3
 8000cca:	460d      	mov	r5, r1
 8000ccc:	4691      	mov	r9, r2
 8000cce:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fcf8 	bl	80006c4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cd4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cda:	2b20      	cmp	r3, #32
 8000cdc:	d004      	beq.n	8000ce8 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8000cde:	2502      	movs	r5, #2
}
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	b005      	add	sp, #20
 8000ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ce8:	9000      	str	r0, [sp, #0]
 8000cea:	2319      	movs	r3, #25
 8000cec:	2201      	movs	r2, #1
 8000cee:	4620      	mov	r0, r4
 8000cf0:	495c      	ldr	r1, [pc, #368]	@ (8000e64 <HAL_I2C_Master_Transmit+0x1a4>)
 8000cf2:	f7ff fe66 	bl	80009c2 <I2C_WaitOnFlagUntilTimeout>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d1f1      	bne.n	8000cde <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8000cfa:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d0ed      	beq.n	8000cde <HAL_I2C_Master_Transmit+0x1e>
 8000d02:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d04:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8000d06:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d0a:	680b      	ldr	r3, [r1, #0]
 8000d0c:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8000d0e:	bf5e      	ittt	pl
 8000d10:	680b      	ldrpl	r3, [r1, #0]
 8000d12:	f043 0301 	orrpl.w	r3, r3, #1
 8000d16:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d18:	680b      	ldr	r3, [r1, #0]
 8000d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d1e:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000d20:	2321      	movs	r3, #33	@ 0x21
 8000d22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000d26:	2310      	movs	r3, #16
 8000d28:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8000d30:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000d34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8000d36:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000d3a:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e68 <HAL_I2C_Master_Transmit+0x1a8>)
 8000d3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000d40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d004      	beq.n	8000d50 <HAL_I2C_Master_Transmit+0x90>
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d002      	beq.n	8000d50 <HAL_I2C_Master_Transmit+0x90>
 8000d4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8000d4e:	d104      	bne.n	8000d5a <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000d50:	680b      	ldr	r3, [r1, #0]
 8000d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d56:	600b      	str	r3, [r1, #0]
 8000d58:	e002      	b.n	8000d60 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000d5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d5c:	2b12      	cmp	r3, #18
 8000d5e:	d0f7      	beq.n	8000d50 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d60:	2200      	movs	r2, #0
 8000d62:	463b      	mov	r3, r7
 8000d64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000d68:	4620      	mov	r0, r4
 8000d6a:	9600      	str	r6, [sp, #0]
 8000d6c:	f7ff fe29 	bl	80009c2 <I2C_WaitOnFlagUntilTimeout>
 8000d70:	6822      	ldr	r2, [r4, #0]
 8000d72:	b140      	cbz	r0, 8000d86 <HAL_I2C_Master_Transmit+0xc6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000d74:	6813      	ldr	r3, [r2, #0]
 8000d76:	05db      	lsls	r3, r3, #23
 8000d78:	d401      	bmi.n	8000d7e <HAL_I2C_Master_Transmit+0xbe>
      return HAL_ERROR;
 8000d7a:	2501      	movs	r5, #1
 8000d7c:	e7b0      	b.n	8000ce0 <HAL_I2C_Master_Transmit+0x20>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d82:	6423      	str	r3, [r4, #64]	@ 0x40
 8000d84:	e7f9      	b.n	8000d7a <HAL_I2C_Master_Transmit+0xba>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d86:	6923      	ldr	r3, [r4, #16]
 8000d88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000d8c:	d121      	bne.n	8000dd2 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d8e:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8000d92:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000d94:	4633      	mov	r3, r6
 8000d96:	463a      	mov	r2, r7
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4934      	ldr	r1, [pc, #208]	@ (8000e6c <HAL_I2C_Master_Transmit+0x1ac>)
 8000d9c:	f7ff fe51 	bl	8000a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000da0:	4605      	mov	r5, r0
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d1e9      	bne.n	8000d7a <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	9003      	str	r0, [sp, #12]
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	9203      	str	r2, [sp, #12]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	9303      	str	r3, [sp, #12]
 8000db2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000db4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8000db6:	b9f3      	cbnz	r3, 8000df6 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000db8:	6821      	ldr	r1, [r4, #0]
 8000dba:	680a      	ldr	r2, [r1, #0]
 8000dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000dc0:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000dc2:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000dc4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000dc8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dcc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8000dd0:	e786      	b.n	8000ce0 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000dd2:	11eb      	asrs	r3, r5, #7
 8000dd4:	f003 0306 	and.w	r3, r3, #6
 8000dd8:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000ddc:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000dde:	4620      	mov	r0, r4
 8000de0:	4633      	mov	r3, r6
 8000de2:	463a      	mov	r2, r7
 8000de4:	4922      	ldr	r1, [pc, #136]	@ (8000e70 <HAL_I2C_Master_Transmit+0x1b0>)
 8000de6:	f7ff fe2c 	bl	8000a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d1c5      	bne.n	8000d7a <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	b2ed      	uxtb	r5, r5
 8000df2:	611d      	str	r5, [r3, #16]
 8000df4:	e7ce      	b.n	8000d94 <HAL_I2C_Master_Transmit+0xd4>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000df6:	4632      	mov	r2, r6
 8000df8:	4639      	mov	r1, r7
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f7ff fe63 	bl	8000ac6 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e00:	b140      	cbz	r0, 8000e14 <HAL_I2C_Master_Transmit+0x154>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d1b8      	bne.n	8000d7a <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e08:	6822      	ldr	r2, [r4, #0]
 8000e0a:	6813      	ldr	r3, [r2, #0]
 8000e0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e7b2      	b.n	8000d7a <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000e16:	6820      	ldr	r0, [r4, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000e1e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000e20:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8000e22:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8000e24:	3a01      	subs	r2, #1
 8000e26:	b292      	uxth	r2, r2
 8000e28:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8000e2a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e2c:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8000e30:	1e51      	subs	r1, r2, #1
 8000e32:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e34:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8000e38:	8521      	strh	r1, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e3a:	d00a      	beq.n	8000e52 <HAL_I2C_Master_Transmit+0x192>
 8000e3c:	b149      	cbz	r1, 8000e52 <HAL_I2C_Master_Transmit+0x192>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e3e:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8000e40:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e42:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000e44:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8000e46:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8000e48:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8000e50:	8522      	strh	r2, [r4, #40]	@ 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e52:	4632      	mov	r2, r6
 8000e54:	4639      	mov	r1, r7
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff fe5f 	bl	8000b1a <I2C_WaitOnBTFFlagUntilTimeout>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d0a9      	beq.n	8000db4 <HAL_I2C_Master_Transmit+0xf4>
 8000e60:	e7cf      	b.n	8000e02 <HAL_I2C_Master_Transmit+0x142>
 8000e62:	bf00      	nop
 8000e64:	00100002 	.word	0x00100002
 8000e68:	ffff0000 	.word	0xffff0000
 8000e6c:	00010002 	.word	0x00010002
 8000e70:	00010008 	.word	0x00010008

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e78:	4605      	mov	r5, r0
 8000e7a:	b338      	cbz	r0, 8000ecc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7c:	6803      	ldr	r3, [r0, #0]
 8000e7e:	07db      	lsls	r3, r3, #31
 8000e80:	d410      	bmi.n	8000ea4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	079f      	lsls	r7, r3, #30
 8000e86:	d45e      	bmi.n	8000f46 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	0719      	lsls	r1, r3, #28
 8000e8c:	f100 8095 	bmi.w	8000fba <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	075a      	lsls	r2, r3, #29
 8000e94:	f100 80c1 	bmi.w	800101a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e98:	69eb      	ldr	r3, [r5, #28]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f040 812c 	bne.w	80010f8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e029      	b.n	8000ef8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea4:	4c90      	ldr	r4, [pc, #576]	@ (80010e8 <HAL_RCC_OscConfig+0x274>)
 8000ea6:	6863      	ldr	r3, [r4, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d007      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb0:	6863      	ldr	r3, [r4, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d10a      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
 8000eba:	6863      	ldr	r3, [r4, #4]
 8000ebc:	03de      	lsls	r6, r3, #15
 8000ebe:	d507      	bpl.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	039c      	lsls	r4, r3, #14
 8000ec4:	d5dd      	bpl.n	8000e82 <HAL_RCC_OscConfig+0xe>
 8000ec6:	686b      	ldr	r3, [r5, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1da      	bne.n	8000e82 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
 8000ece:	e013      	b.n	8000ef8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed0:	686b      	ldr	r3, [r5, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ed6:	d112      	bne.n	8000efe <HAL_RCC_OscConfig+0x8a>
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ede:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fbf0 	bl	80006c4 <HAL_GetTick>
 8000ee4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	0398      	lsls	r0, r3, #14
 8000eea:	d4ca      	bmi.n	8000e82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fbea 	bl	80006c4 <HAL_GetTick>
 8000ef0:	1b80      	subs	r0, r0, r6
 8000ef2:	2864      	cmp	r0, #100	@ 0x64
 8000ef4:	d9f7      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
}
 8000ef8:	b002      	add	sp, #8
 8000efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	b99b      	cbnz	r3, 8000f28 <HAL_RCC_OscConfig+0xb4>
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f06:	6023      	str	r3, [r4, #0]
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f10:	f7ff fbd8 	bl	80006c4 <HAL_GetTick>
 8000f14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	0399      	lsls	r1, r3, #14
 8000f1a:	d5b2      	bpl.n	8000e82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fbd2 	bl	80006c4 <HAL_GetTick>
 8000f20:	1b80      	subs	r0, r0, r6
 8000f22:	2864      	cmp	r0, #100	@ 0x64
 8000f24:	d9f7      	bls.n	8000f16 <HAL_RCC_OscConfig+0xa2>
 8000f26:	e7e6      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	d103      	bne.n	8000f38 <HAL_RCC_OscConfig+0xc4>
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	e7cf      	b.n	8000ed8 <HAL_RCC_OscConfig+0x64>
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f44:	e7cb      	b.n	8000ede <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f46:	4c68      	ldr	r4, [pc, #416]	@ (80010e8 <HAL_RCC_OscConfig+0x274>)
 8000f48:	6863      	ldr	r3, [r4, #4]
 8000f4a:	f013 0f0c 	tst.w	r3, #12
 8000f4e:	d007      	beq.n	8000f60 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f50:	6863      	ldr	r3, [r4, #4]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d110      	bne.n	8000f7c <HAL_RCC_OscConfig+0x108>
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	03da      	lsls	r2, r3, #15
 8000f5e:	d40d      	bmi.n	8000f7c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	079b      	lsls	r3, r3, #30
 8000f64:	d502      	bpl.n	8000f6c <HAL_RCC_OscConfig+0xf8>
 8000f66:	692b      	ldr	r3, [r5, #16]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d1af      	bne.n	8000ecc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	696a      	ldr	r2, [r5, #20]
 8000f70:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000f74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f78:	6023      	str	r3, [r4, #0]
 8000f7a:	e785      	b.n	8000e88 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7c:	692a      	ldr	r2, [r5, #16]
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80010ec <HAL_RCC_OscConfig+0x278>)
 8000f80:	b16a      	cbz	r2, 8000f9e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb9d 	bl	80006c4 <HAL_GetTick>
 8000f8a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	079f      	lsls	r7, r3, #30
 8000f90:	d4ec      	bmi.n	8000f6c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff fb97 	bl	80006c4 <HAL_GetTick>
 8000f96:	1b80      	subs	r0, r0, r6
 8000f98:	2802      	cmp	r0, #2
 8000f9a:	d9f7      	bls.n	8000f8c <HAL_RCC_OscConfig+0x118>
 8000f9c:	e7ab      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8000f9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fb90 	bl	80006c4 <HAL_GetTick>
 8000fa4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	0798      	lsls	r0, r3, #30
 8000faa:	f57f af6d 	bpl.w	8000e88 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fb89 	bl	80006c4 <HAL_GetTick>
 8000fb2:	1b80      	subs	r0, r0, r6
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d9f6      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x132>
 8000fb8:	e79d      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fba:	69aa      	ldr	r2, [r5, #24]
 8000fbc:	4e4a      	ldr	r6, [pc, #296]	@ (80010e8 <HAL_RCC_OscConfig+0x274>)
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80010ec <HAL_RCC_OscConfig+0x278>)
 8000fc0:	b1e2      	cbz	r2, 8000ffc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000fc8:	f7ff fb7c 	bl	80006c4 <HAL_GetTick>
 8000fcc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fce:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8000fd0:	079b      	lsls	r3, r3, #30
 8000fd2:	d50d      	bpl.n	8000ff0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fd4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000fd8:	4b45      	ldr	r3, [pc, #276]	@ (80010f0 <HAL_RCC_OscConfig+0x27c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fe0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000fe2:	bf00      	nop
  }
  while (Delay --);
 8000fe4:	9b01      	ldr	r3, [sp, #4]
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	9201      	str	r2, [sp, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f9      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x16e>
 8000fee:	e74f      	b.n	8000e90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fb68 	bl	80006c4 <HAL_GetTick>
 8000ff4:	1b00      	subs	r0, r0, r4
 8000ff6:	2802      	cmp	r0, #2
 8000ff8:	d9e9      	bls.n	8000fce <HAL_RCC_OscConfig+0x15a>
 8000ffa:	e77c      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000ffc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001000:	f7ff fb60 	bl	80006c4 <HAL_GetTick>
 8001004:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001006:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001008:	079f      	lsls	r7, r3, #30
 800100a:	f57f af41 	bpl.w	8000e90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100e:	f7ff fb59 	bl	80006c4 <HAL_GetTick>
 8001012:	1b00      	subs	r0, r0, r4
 8001014:	2802      	cmp	r0, #2
 8001016:	d9f6      	bls.n	8001006 <HAL_RCC_OscConfig+0x192>
 8001018:	e76d      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101a:	4c33      	ldr	r4, [pc, #204]	@ (80010e8 <HAL_RCC_OscConfig+0x274>)
 800101c:	69e3      	ldr	r3, [r4, #28]
 800101e:	00d8      	lsls	r0, r3, #3
 8001020:	d424      	bmi.n	800106c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001022:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	69e3      	ldr	r3, [r4, #28]
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102a:	61e3      	str	r3, [r4, #28]
 800102c:	69e3      	ldr	r3, [r4, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001036:	4e2f      	ldr	r6, [pc, #188]	@ (80010f4 <HAL_RCC_OscConfig+0x280>)
 8001038:	6833      	ldr	r3, [r6, #0]
 800103a:	05d9      	lsls	r1, r3, #23
 800103c:	d518      	bpl.n	8001070 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103e:	68eb      	ldr	r3, [r5, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d126      	bne.n	8001092 <HAL_RCC_OscConfig+0x21e>
 8001044:	6a23      	ldr	r3, [r4, #32]
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800104c:	f7ff fb3a 	bl	80006c4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001050:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001054:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001056:	6a23      	ldr	r3, [r4, #32]
 8001058:	079b      	lsls	r3, r3, #30
 800105a:	d53f      	bpl.n	80010dc <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800105c:	2f00      	cmp	r7, #0
 800105e:	f43f af1b 	beq.w	8000e98 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001062:	69e3      	ldr	r3, [r4, #28]
 8001064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001068:	61e3      	str	r3, [r4, #28]
 800106a:	e715      	b.n	8000e98 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800106c:	2700      	movs	r7, #0
 800106e:	e7e2      	b.n	8001036 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001070:	6833      	ldr	r3, [r6, #0]
 8001072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001076:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001078:	f7ff fb24 	bl	80006c4 <HAL_GetTick>
 800107c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107e:	6833      	ldr	r3, [r6, #0]
 8001080:	05da      	lsls	r2, r3, #23
 8001082:	d4dc      	bmi.n	800103e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001084:	f7ff fb1e 	bl	80006c4 <HAL_GetTick>
 8001088:	eba0 0008 	sub.w	r0, r0, r8
 800108c:	2864      	cmp	r0, #100	@ 0x64
 800108e:	d9f6      	bls.n	800107e <HAL_RCC_OscConfig+0x20a>
 8001090:	e731      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001092:	b9ab      	cbnz	r3, 80010c0 <HAL_RCC_OscConfig+0x24c>
 8001094:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	6223      	str	r3, [r4, #32]
 80010a0:	6a23      	ldr	r3, [r4, #32]
 80010a2:	f023 0304 	bic.w	r3, r3, #4
 80010a6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010a8:	f7ff fb0c 	bl	80006c4 <HAL_GetTick>
 80010ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ae:	6a23      	ldr	r3, [r4, #32]
 80010b0:	0798      	lsls	r0, r3, #30
 80010b2:	d5d3      	bpl.n	800105c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b4:	f7ff fb06 	bl	80006c4 <HAL_GetTick>
 80010b8:	1b80      	subs	r0, r0, r6
 80010ba:	4540      	cmp	r0, r8
 80010bc:	d9f7      	bls.n	80010ae <HAL_RCC_OscConfig+0x23a>
 80010be:	e71a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	6a23      	ldr	r3, [r4, #32]
 80010c4:	d103      	bne.n	80010ce <HAL_RCC_OscConfig+0x25a>
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6223      	str	r3, [r4, #32]
 80010cc:	e7ba      	b.n	8001044 <HAL_RCC_OscConfig+0x1d0>
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	6223      	str	r3, [r4, #32]
 80010d4:	6a23      	ldr	r3, [r4, #32]
 80010d6:	f023 0304 	bic.w	r3, r3, #4
 80010da:	e7b6      	b.n	800104a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010dc:	f7ff faf2 	bl	80006c4 <HAL_GetTick>
 80010e0:	1b80      	subs	r0, r0, r6
 80010e2:	4540      	cmp	r0, r8
 80010e4:	d9b7      	bls.n	8001056 <HAL_RCC_OscConfig+0x1e2>
 80010e6:	e706      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
 80010e8:	40021000 	.word	0x40021000
 80010ec:	42420000 	.word	0x42420000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f8:	4c2a      	ldr	r4, [pc, #168]	@ (80011a4 <HAL_RCC_OscConfig+0x330>)
 80010fa:	6862      	ldr	r2, [r4, #4]
 80010fc:	f002 020c 	and.w	r2, r2, #12
 8001100:	2a08      	cmp	r2, #8
 8001102:	d03e      	beq.n	8001182 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001104:	2200      	movs	r2, #0
 8001106:	2b02      	cmp	r3, #2
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800110a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110c:	d12c      	bne.n	8001168 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800110e:	f7ff fad9 	bl	80006c4 <HAL_GetTick>
 8001112:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	0199      	lsls	r1, r3, #6
 8001118:	d420      	bmi.n	800115c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800111a:	6a2b      	ldr	r3, [r5, #32]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001120:	d105      	bne.n	800112e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	68a9      	ldr	r1, [r5, #8]
 8001126:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800112a:	430a      	orrs	r2, r1
 800112c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001130:	6862      	ldr	r2, [r4, #4]
 8001132:	430b      	orrs	r3, r1
 8001134:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001138:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800113a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800113c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_RCC_OscConfig+0x334>)
 8001140:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001142:	f7ff fabf 	bl	80006c4 <HAL_GetTick>
 8001146:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	019a      	lsls	r2, r3, #6
 800114c:	f53f aea8 	bmi.w	8000ea0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fab8 	bl	80006c4 <HAL_GetTick>
 8001154:	1b40      	subs	r0, r0, r5
 8001156:	2802      	cmp	r0, #2
 8001158:	d9f6      	bls.n	8001148 <HAL_RCC_OscConfig+0x2d4>
 800115a:	e6cc      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff fab2 	bl	80006c4 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2802      	cmp	r0, #2
 8001164:	d9d6      	bls.n	8001114 <HAL_RCC_OscConfig+0x2a0>
 8001166:	e6c6      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001168:	f7ff faac 	bl	80006c4 <HAL_GetTick>
 800116c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	f57f ae95 	bpl.w	8000ea0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001176:	f7ff faa5 	bl	80006c4 <HAL_GetTick>
 800117a:	1b40      	subs	r0, r0, r5
 800117c:	2802      	cmp	r0, #2
 800117e:	d9f6      	bls.n	800116e <HAL_RCC_OscConfig+0x2fa>
 8001180:	e6b9      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001182:	2b01      	cmp	r3, #1
 8001184:	f43f aea2 	beq.w	8000ecc <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001188:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	6a2b      	ldr	r3, [r5, #32]
 800118c:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001190:	429a      	cmp	r2, r3
 8001192:	f47f ae9b 	bne.w	8000ecc <HAL_RCC_OscConfig+0x58>
 8001196:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001198:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119c:	1ac0      	subs	r0, r0, r3
 800119e:	bf18      	it	ne
 80011a0:	2001      	movne	r0, #1
 80011a2:	e6a9      	b.n	8000ef8 <HAL_RCC_OscConfig+0x84>
 80011a4:	40021000 	.word	0x40021000
 80011a8:	42420000 	.word	0x42420000

080011ac <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <HAL_RCC_GetSysClockFreq+0x38>)
 80011ae:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011b0:	f003 010c 	and.w	r1, r3, #12
 80011b4:	2908      	cmp	r1, #8
 80011b6:	d112      	bne.n	80011de <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011ba:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011be:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011c0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011c2:	d509      	bpl.n	80011d8 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011c4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011c6:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011c8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011cc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_RCC_GetSysClockFreq+0x44>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80011d6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_RCC_GetSysClockFreq+0x48>)
 80011da:	4358      	muls	r0, r3
 80011dc:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80011de:	4803      	ldr	r0, [pc, #12]	@ (80011ec <HAL_RCC_GetSysClockFreq+0x40>)
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	08001fdf 	.word	0x08001fdf
 80011ec:	007a1200 	.word	0x007a1200
 80011f0:	08001fdd 	.word	0x08001fdd
 80011f4:	003d0900 	.word	0x003d0900

080011f8 <HAL_RCC_ClockConfig>:
{
 80011f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011fc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80011fe:	4604      	mov	r4, r0
 8001200:	b910      	cbnz	r0, 8001208 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
}
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001208:	4a44      	ldr	r2, [pc, #272]	@ (800131c <HAL_RCC_ClockConfig+0x124>)
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	428b      	cmp	r3, r1
 8001212:	d328      	bcc.n	8001266 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001214:	6821      	ldr	r1, [r4, #0]
 8001216:	078e      	lsls	r6, r1, #30
 8001218:	d430      	bmi.n	800127c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121a:	07ca      	lsls	r2, r1, #31
 800121c:	d443      	bmi.n	80012a6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800121e:	4a3f      	ldr	r2, [pc, #252]	@ (800131c <HAL_RCC_ClockConfig+0x124>)
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	42ab      	cmp	r3, r5
 8001228:	d865      	bhi.n	80012f6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122a:	6822      	ldr	r2, [r4, #0]
 800122c:	4d3c      	ldr	r5, [pc, #240]	@ (8001320 <HAL_RCC_ClockConfig+0x128>)
 800122e:	f012 0f04 	tst.w	r2, #4
 8001232:	d16c      	bne.n	800130e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	0713      	lsls	r3, r2, #28
 8001236:	d506      	bpl.n	8001246 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001238:	686b      	ldr	r3, [r5, #4]
 800123a:	6922      	ldr	r2, [r4, #16]
 800123c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001240:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001244:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001246:	f7ff ffb1 	bl	80011ac <HAL_RCC_GetSysClockFreq>
 800124a:	686b      	ldr	r3, [r5, #4]
 800124c:	4a35      	ldr	r2, [pc, #212]	@ (8001324 <HAL_RCC_ClockConfig+0x12c>)
 800124e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	40d8      	lsrs	r0, r3
 8001256:	4b34      	ldr	r3, [pc, #208]	@ (8001328 <HAL_RCC_ClockConfig+0x130>)
 8001258:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800125a:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_RCC_ClockConfig+0x134>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	f7ff f9ef 	bl	8000640 <HAL_InitTick>
  return HAL_OK;
 8001262:	2000      	movs	r0, #0
 8001264:	e7ce      	b.n	8001204 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f023 0307 	bic.w	r3, r3, #7
 800126c:	430b      	orrs	r3, r1
 800126e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	428b      	cmp	r3, r1
 8001278:	d1c3      	bne.n	8001202 <HAL_RCC_ClockConfig+0xa>
 800127a:	e7cb      	b.n	8001214 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <HAL_RCC_ClockConfig+0x128>)
 800127e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001282:	bf1e      	ittt	ne
 8001284:	685a      	ldrne	r2, [r3, #4]
 8001286:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 800128a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128e:	bf42      	ittt	mi
 8001290:	685a      	ldrmi	r2, [r3, #4]
 8001292:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001296:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	68a0      	ldr	r0, [r4, #8]
 800129c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80012a0:	4302      	orrs	r2, r0
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	e7b9      	b.n	800121a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a6:	6862      	ldr	r2, [r4, #4]
 80012a8:	4e1d      	ldr	r6, [pc, #116]	@ (8001320 <HAL_RCC_ClockConfig+0x128>)
 80012aa:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ac:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ae:	d11a      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	d0a5      	beq.n	8001202 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012bc:	f023 0303 	bic.w	r3, r3, #3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80012c4:	f7ff f9fe 	bl	80006c4 <HAL_GetTick>
 80012c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	6873      	ldr	r3, [r6, #4]
 80012cc:	6862      	ldr	r2, [r4, #4]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012d6:	d0a2      	beq.n	800121e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d8:	f7ff f9f4 	bl	80006c4 <HAL_GetTick>
 80012dc:	1bc0      	subs	r0, r0, r7
 80012de:	4540      	cmp	r0, r8
 80012e0:	d9f3      	bls.n	80012ca <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
 80012e4:	e78e      	b.n	8001204 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012e6:	2a02      	cmp	r2, #2
 80012e8:	d102      	bne.n	80012f0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ea:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80012ee:	e7e1      	b.n	80012b4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	f013 0f02 	tst.w	r3, #2
 80012f4:	e7de      	b.n	80012b4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	f023 0307 	bic.w	r3, r3, #7
 80012fc:	432b      	orrs	r3, r5
 80012fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	42ab      	cmp	r3, r5
 8001308:	f47f af7b 	bne.w	8001202 <HAL_RCC_ClockConfig+0xa>
 800130c:	e78d      	b.n	800122a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800130e:	686b      	ldr	r3, [r5, #4]
 8001310:	68e1      	ldr	r1, [r4, #12]
 8001312:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001316:	430b      	orrs	r3, r1
 8001318:	606b      	str	r3, [r5, #4]
 800131a:	e78b      	b.n	8001234 <HAL_RCC_ClockConfig+0x3c>
 800131c:	40022000 	.word	0x40022000
 8001320:	40021000 	.word	0x40021000
 8001324:	08001fcd 	.word	0x08001fcd
 8001328:	20000008 	.word	0x20000008
 800132c:	20000010 	.word	0x20000010

08001330 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	4a03      	ldr	r2, [pc, #12]	@ (800134c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800133e:	6810      	ldr	r0, [r2, #0]
}
 8001340:	40d8      	lsrs	r0, r3
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	08001fc5 	.word	0x08001fc5
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	4a03      	ldr	r2, [pc, #12]	@ (800136c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800135e:	6810      	ldr	r0, [r2, #0]
}
 8001360:	40d8      	lsrs	r0, r3
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000
 8001368:	08001fc5 	.word	0x08001fc5
 800136c:	20000008 	.word	0x20000008

08001370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001374:	6803      	ldr	r3, [r0, #0]
 8001376:	68c1      	ldr	r1, [r0, #12]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800137e:	430a      	orrs	r2, r1
 8001380:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001382:	6882      	ldr	r2, [r0, #8]
 8001384:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001386:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001388:	4302      	orrs	r2, r0
 800138a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800138c:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8001390:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001394:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001396:	430a      	orrs	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	69a1      	ldr	r1, [r4, #24]
 800139e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80013a2:	430a      	orrs	r2, r1
 80013a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <UART_SetConfig+0x70>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d115      	bne.n	80013d8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80013ac:	f7ff ffd0 	bl	8001350 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013b0:	2319      	movs	r3, #25
 80013b2:	4343      	muls	r3, r0
 80013b4:	6862      	ldr	r2, [r4, #4]
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80013be:	2264      	movs	r2, #100	@ 0x64
 80013c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80013c4:	fb02 3311 	mls	r3, r2, r1, r3
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	3332      	adds	r3, #50	@ 0x32
 80013cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80013d0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80013d4:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80013d6:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80013d8:	f7ff ffaa 	bl	8001330 <HAL_RCC_GetPCLK1Freq>
 80013dc:	e7e8      	b.n	80013b0 <UART_SetConfig+0x40>
 80013de:	bf00      	nop
 80013e0:	40013800 	.word	0x40013800

080013e4 <HAL_UART_Init>:
{
 80013e4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80013e6:	4604      	mov	r4, r0
 80013e8:	b348      	cbz	r0, 800143e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80013ea:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80013ee:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80013f2:	b91b      	cbnz	r3, 80013fc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80013f4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80013f8:	f7ff f88c 	bl	8000514 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80013fc:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80013fe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001400:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001404:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001406:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001408:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800140c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800140e:	f7ff ffaf 	bl	8001370 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001412:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001414:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800141c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001424:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800142c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800142e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001430:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001432:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001436:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800143a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800143c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800143e:	2001      	movs	r0, #1
 8001440:	e7fc      	b.n	800143c <HAL_UART_Init+0x58>
	...

08001444 <LCD_write_nibble>:
uint8_t backlight_state = 1;

/* Private variables */
extern I2C_HandleTypeDef hi2c1;

void LCD_write_nibble(uint8_t nibble, uint8_t rs) {
 8001444:	b530      	push	{r4, r5, lr}
  uint8_t data = nibble << D4_BIT;
  data |= rs << RS_BIT;
  data |= backlight_state << BL_BIT; // Include backlight state in data
  data |= 1 << EN_BIT;
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001446:	2564      	movs	r5, #100	@ 0x64
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <LCD_write_nibble+0x54>)
  data |= rs << RS_BIT;
 800144a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800144e:	781b      	ldrb	r3, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001450:	4c12      	ldr	r4, [pc, #72]	@ (800149c <LCD_write_nibble+0x58>)
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001452:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
void LCD_write_nibble(uint8_t nibble, uint8_t rs) {
 8001456:	b085      	sub	sp, #20
  data |= 1 << EN_BIT;
 8001458:	f041 0104 	orr.w	r1, r1, #4
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800145c:	f10d 020f 	add.w	r2, sp, #15
 8001460:	2301      	movs	r3, #1
  data |= 1 << EN_BIT;
 8001462:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001466:	4620      	mov	r0, r4
 8001468:	214e      	movs	r1, #78	@ 0x4e
 800146a:	9500      	str	r5, [sp, #0]
 800146c:	f7ff fc28 	bl	8000cc0 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff f92d 	bl	80006d0 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8001476:	f89d 300f 	ldrb.w	r3, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800147a:	214e      	movs	r1, #78	@ 0x4e
  data &= ~(1 << EN_BIT);
 800147c:	f023 0304 	bic.w	r3, r3, #4
 8001480:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001484:	4620      	mov	r0, r4
 8001486:	2301      	movs	r3, #1
 8001488:	9500      	str	r5, [sp, #0]
 800148a:	f10d 020f 	add.w	r2, sp, #15
 800148e:	f7ff fc17 	bl	8000cc0 <HAL_I2C_Master_Transmit>
}
 8001492:	b005      	add	sp, #20
 8001494:	bd30      	pop	{r4, r5, pc}
 8001496:	bf00      	nop
 8001498:	20000014 	.word	0x20000014
 800149c:	200000d4 	.word	0x200000d4

080014a0 <LCD_send_cmd>:

void LCD_send_cmd(uint8_t cmd) {
 80014a0:	b510      	push	{r4, lr}
 80014a2:	4604      	mov	r4, r0
  uint8_t upper_nibble = cmd >> 4;
  uint8_t lower_nibble = cmd & 0x0F;
  LCD_write_nibble(upper_nibble, 0);
 80014a4:	2100      	movs	r1, #0
 80014a6:	0900      	lsrs	r0, r0, #4
 80014a8:	f7ff ffcc 	bl	8001444 <LCD_write_nibble>
  LCD_write_nibble(lower_nibble, 0);
 80014ac:	f004 000f 	and.w	r0, r4, #15
 80014b0:	2100      	movs	r1, #0
  if (cmd == 0x01 || cmd == 0x02) {
 80014b2:	3c01      	subs	r4, #1
  LCD_write_nibble(lower_nibble, 0);
 80014b4:	f7ff ffc6 	bl	8001444 <LCD_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 80014b8:	2c01      	cmp	r4, #1
 80014ba:	d804      	bhi.n	80014c6 <LCD_send_cmd+0x26>
    HAL_Delay(2);
  }
}
 80014bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(2);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f7ff b905 	b.w	80006d0 <HAL_Delay>
}
 80014c6:	bd10      	pop	{r4, pc}

080014c8 <LCD_send_data>:

void LCD_send_data(uint8_t data) {
 80014c8:	b510      	push	{r4, lr}
 80014ca:	4604      	mov	r4, r0
  uint8_t upper_nibble = data >> 4;
  uint8_t lower_nibble = data & 0x0F;
  LCD_write_nibble(upper_nibble, 1);
 80014cc:	2101      	movs	r1, #1
 80014ce:	0900      	lsrs	r0, r0, #4
 80014d0:	f7ff ffb8 	bl	8001444 <LCD_write_nibble>
  LCD_write_nibble(lower_nibble, 1);
 80014d4:	f004 000f 	and.w	r0, r4, #15
 80014d8:	2101      	movs	r1, #1
}
 80014da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_write_nibble(lower_nibble, 1);
 80014de:	f7ff bfb1 	b.w	8001444 <LCD_write_nibble>

080014e2 <LCD_init>:

void LCD_init() {
 80014e2:	b508      	push	{r3, lr}
  HAL_Delay(50);
 80014e4:	2032      	movs	r0, #50	@ 0x32
 80014e6:	f7ff f8f3 	bl	80006d0 <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	2003      	movs	r0, #3
 80014ee:	f7ff ffa9 	bl	8001444 <LCD_write_nibble>
  HAL_Delay(5);
 80014f2:	2005      	movs	r0, #5
 80014f4:	f7ff f8ec 	bl	80006d0 <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 80014f8:	2100      	movs	r1, #0
 80014fa:	2003      	movs	r0, #3
 80014fc:	f7ff ffa2 	bl	8001444 <LCD_write_nibble>
  HAL_Delay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff f8e5 	bl	80006d0 <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 8001506:	2100      	movs	r1, #0
 8001508:	2003      	movs	r0, #3
 800150a:	f7ff ff9b 	bl	8001444 <LCD_write_nibble>
  HAL_Delay(1);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff f8de 	bl	80006d0 <HAL_Delay>
  LCD_write_nibble(0x02, 0);
 8001514:	2100      	movs	r1, #0
 8001516:	2002      	movs	r0, #2
 8001518:	f7ff ff94 	bl	8001444 <LCD_write_nibble>
  LCD_send_cmd(0x28);
 800151c:	2028      	movs	r0, #40	@ 0x28
 800151e:	f7ff ffbf 	bl	80014a0 <LCD_send_cmd>
  LCD_send_cmd(0x0C);
 8001522:	200c      	movs	r0, #12
 8001524:	f7ff ffbc 	bl	80014a0 <LCD_send_cmd>
  LCD_send_cmd(0x06);
 8001528:	2006      	movs	r0, #6
 800152a:	f7ff ffb9 	bl	80014a0 <LCD_send_cmd>
  LCD_send_cmd(0x01);
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff ffb6 	bl	80014a0 <LCD_send_cmd>
  HAL_Delay(2);
}
 8001534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(2);
 8001538:	2002      	movs	r0, #2
 800153a:	f7ff b8c9 	b.w	80006d0 <HAL_Delay>

0800153e <LCD_write_string>:

void LCD_write_string(char *str) {
 800153e:	b510      	push	{r4, lr}
 8001540:	1e44      	subs	r4, r0, #1
  while (*str) {
 8001542:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001546:	b900      	cbnz	r0, 800154a <LCD_write_string+0xc>
	  LCD_send_data(*str++);
  }
}
 8001548:	bd10      	pop	{r4, pc}
	  LCD_send_data(*str++);
 800154a:	f7ff ffbd 	bl	80014c8 <LCD_send_data>
 800154e:	e7f8      	b.n	8001542 <LCD_write_string+0x4>

08001550 <LCD_set_cursor>:

void LCD_set_cursor(uint8_t row, uint8_t column) {
    uint8_t address;
    switch (row) {
 8001550:	1e43      	subs	r3, r0, #1
 8001552:	4258      	negs	r0, r3
 8001554:	4158      	adcs	r0, r3
            address = 0x40;
            break;
        default:
            address = 0x00;
    }
    address += column;
 8001556:	eb01 1180 	add.w	r1, r1, r0, lsl #6
    LCD_send_cmd(0x80 | address);
 800155a:	f061 007f 	orn	r0, r1, #127	@ 0x7f
 800155e:	b2c0      	uxtb	r0, r0
 8001560:	f7ff bf9e 	b.w	80014a0 <LCD_send_cmd>

08001564 <LCD_clear>:
}

void LCD_clear(void) {
 8001564:	b508      	push	{r3, lr}
	LCD_send_cmd(0x01);
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff ff9a 	bl	80014a0 <LCD_send_cmd>
    HAL_Delay(2);
}
 800156c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(2);
 8001570:	2002      	movs	r0, #2
 8001572:	f7ff b8ad 	b.w	80006d0 <HAL_Delay>
	...

08001578 <LCD_backlight>:

void LCD_backlight(uint8_t state) {
  if (state) {
 8001578:	3800      	subs	r0, #0
 800157a:	bf18      	it	ne
 800157c:	2001      	movne	r0, #1
 800157e:	4b01      	ldr	r3, [pc, #4]	@ (8001584 <LCD_backlight+0xc>)
 8001580:	7018      	strb	r0, [r3, #0]
    backlight_state = 1;
  } else {
    backlight_state = 0;
  }
}
 8001582:	4770      	bx	lr
 8001584:	20000014 	.word	0x20000014

08001588 <read_clock_pin>:
	order = 0;
	counter = 0;
}

Switch_State_t read_clock_pin(void){
	return (Switch_State_t)HAL_GPIO_ReadPin(CLOCK_PORT, CLOCK_PIN);
 8001588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800158c:	4801      	ldr	r0, [pc, #4]	@ (8001594 <read_clock_pin+0xc>)
 800158e:	f7ff b9e7 	b.w	8000960 <HAL_GPIO_ReadPin>
 8001592:	bf00      	nop
 8001594:	40010c00 	.word	0x40010c00

08001598 <read_data_pin>:
}

Switch_State_t read_data_pin(void){
	return (Switch_State_t)HAL_GPIO_ReadPin(DATA_PORT, DATA_PIN);
 8001598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800159c:	4801      	ldr	r0, [pc, #4]	@ (80015a4 <read_data_pin+0xc>)
 800159e:	f7ff b9df 	b.w	8000960 <HAL_GPIO_ReadPin>
 80015a2:	bf00      	nop
 80015a4:	40010c00 	.word	0x40010c00

080015a8 <Switches_calcEncoder>:

Switch_State_t Switches_getButton(void){
	return read_button_pin();
}

void Switches_calcEncoder(void){
 80015a8:	b538      	push	{r3, r4, r5, lr}
	if (read_clock_pin() && (order == 0)) {
 80015aa:	f7ff ffed 	bl	8001588 <read_clock_pin>
 80015ae:	4c1e      	ldr	r4, [pc, #120]	@ (8001628 <Switches_calcEncoder+0x80>)
 80015b0:	b150      	cbz	r0, 80015c8 <Switches_calcEncoder+0x20>
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <Switches_calcEncoder+0x84>)
 80015b4:	781d      	ldrb	r5, [r3, #0]
 80015b6:	b93d      	cbnz	r5, 80015c8 <Switches_calcEncoder+0x20>
		arr[order++] = (uint8_t)read_data_pin();
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	f7ff ffec 	bl	8001598 <read_data_pin>
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <Switches_calcEncoder+0x88>)
		complate_flag = 0;
 80015c2:	7025      	strb	r5, [r4, #0]
		arr[order++] = (uint8_t)read_data_pin();
 80015c4:	7018      	strb	r0, [r3, #0]
		}
		else if ((arr[0] == 0) && (arr[1] == 1)) {
			counter--;
		}
	}
}
 80015c6:	bd38      	pop	{r3, r4, r5, pc}
	else if (!read_clock_pin() && order) {
 80015c8:	f7ff ffde 	bl	8001588 <read_clock_pin>
 80015cc:	b9f0      	cbnz	r0, 800160c <Switches_calcEncoder+0x64>
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <Switches_calcEncoder+0x84>)
 80015d0:	781d      	ldrb	r5, [r3, #0]
 80015d2:	b1dd      	cbz	r5, 800160c <Switches_calcEncoder+0x64>
		arr[order++] = (uint8_t)read_data_pin();
 80015d4:	1c6a      	adds	r2, r5, #1
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	f7ff ffde 	bl	8001598 <read_data_pin>
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <Switches_calcEncoder+0x88>)
 80015de:	5558      	strb	r0, [r3, r5]
		complate_flag = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	7023      	strb	r3, [r4, #0]
	if (complate_flag && (order == 2)) {
 80015e4:	4a11      	ldr	r2, [pc, #68]	@ (800162c <Switches_calcEncoder+0x84>)
 80015e6:	7813      	ldrb	r3, [r2, #0]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d1ec      	bne.n	80015c6 <Switches_calcEncoder+0x1e>
		order = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	7013      	strb	r3, [r2, #0]
		complate_flag = 0;
 80015f0:	7023      	strb	r3, [r4, #0]
		if ((arr[0] == 1) && (arr[1] == 0)) {
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <Switches_calcEncoder+0x88>)
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	2a01      	cmp	r2, #1
 80015f8:	d10c      	bne.n	8001614 <Switches_calcEncoder+0x6c>
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e2      	bne.n	80015c6 <Switches_calcEncoder+0x1e>
			counter ++;
 8001600:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <Switches_calcEncoder+0x8c>)
 8001602:	7813      	ldrb	r3, [r2, #0]
 8001604:	3301      	adds	r3, #1
			counter--;
 8001606:	b2db      	uxtb	r3, r3
 8001608:	7013      	strb	r3, [r2, #0]
}
 800160a:	e7dc      	b.n	80015c6 <Switches_calcEncoder+0x1e>
	if (complate_flag && (order == 2)) {
 800160c:	7823      	ldrb	r3, [r4, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1e8      	bne.n	80015e4 <Switches_calcEncoder+0x3c>
 8001612:	e7d8      	b.n	80015c6 <Switches_calcEncoder+0x1e>
		else if ((arr[0] == 0) && (arr[1] == 1)) {
 8001614:	2a00      	cmp	r2, #0
 8001616:	d1d6      	bne.n	80015c6 <Switches_calcEncoder+0x1e>
 8001618:	785b      	ldrb	r3, [r3, #1]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d1d3      	bne.n	80015c6 <Switches_calcEncoder+0x1e>
			counter--;
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <Switches_calcEncoder+0x8c>)
 8001620:	7813      	ldrb	r3, [r2, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	e7ef      	b.n	8001606 <Switches_calcEncoder+0x5e>
 8001626:	bf00      	nop
 8001628:	20000132 	.word	0x20000132
 800162c:	20000131 	.word	0x20000131
 8001630:	20000133 	.word	0x20000133
 8001634:	20000130 	.word	0x20000130

08001638 <Switches_getCounter>:

uint8_t Switches_getCounter(void){
	return (uint8_t)counter;
 8001638:	4b01      	ldr	r3, [pc, #4]	@ (8001640 <Switches_getCounter+0x8>)
 800163a:	7818      	ldrb	r0, [r3, #0]
}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000130 	.word	0x20000130

08001644 <siprintf>:
 8001644:	b40e      	push	{r1, r2, r3}
 8001646:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800164a:	b500      	push	{lr}
 800164c:	b09c      	sub	sp, #112	@ 0x70
 800164e:	ab1d      	add	r3, sp, #116	@ 0x74
 8001650:	9002      	str	r0, [sp, #8]
 8001652:	9006      	str	r0, [sp, #24]
 8001654:	9107      	str	r1, [sp, #28]
 8001656:	9104      	str	r1, [sp, #16]
 8001658:	4808      	ldr	r0, [pc, #32]	@ (800167c <siprintf+0x38>)
 800165a:	4909      	ldr	r1, [pc, #36]	@ (8001680 <siprintf+0x3c>)
 800165c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001660:	9105      	str	r1, [sp, #20]
 8001662:	6800      	ldr	r0, [r0, #0]
 8001664:	a902      	add	r1, sp, #8
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	f000 f992 	bl	8001990 <_svfiprintf_r>
 800166c:	2200      	movs	r2, #0
 800166e:	9b02      	ldr	r3, [sp, #8]
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	b01c      	add	sp, #112	@ 0x70
 8001674:	f85d eb04 	ldr.w	lr, [sp], #4
 8001678:	b003      	add	sp, #12
 800167a:	4770      	bx	lr
 800167c:	20000018 	.word	0x20000018
 8001680:	ffff0208 	.word	0xffff0208

08001684 <memset>:
 8001684:	4603      	mov	r3, r0
 8001686:	4402      	add	r2, r0
 8001688:	4293      	cmp	r3, r2
 800168a:	d100      	bne.n	800168e <memset+0xa>
 800168c:	4770      	bx	lr
 800168e:	f803 1b01 	strb.w	r1, [r3], #1
 8001692:	e7f9      	b.n	8001688 <memset+0x4>

08001694 <__errno>:
 8001694:	4b01      	ldr	r3, [pc, #4]	@ (800169c <__errno+0x8>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000018 	.word	0x20000018

080016a0 <__libc_init_array>:
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	2600      	movs	r6, #0
 80016a4:	4d0c      	ldr	r5, [pc, #48]	@ (80016d8 <__libc_init_array+0x38>)
 80016a6:	4c0d      	ldr	r4, [pc, #52]	@ (80016dc <__libc_init_array+0x3c>)
 80016a8:	1b64      	subs	r4, r4, r5
 80016aa:	10a4      	asrs	r4, r4, #2
 80016ac:	42a6      	cmp	r6, r4
 80016ae:	d109      	bne.n	80016c4 <__libc_init_array+0x24>
 80016b0:	f000 fc78 	bl	8001fa4 <_init>
 80016b4:	2600      	movs	r6, #0
 80016b6:	4d0a      	ldr	r5, [pc, #40]	@ (80016e0 <__libc_init_array+0x40>)
 80016b8:	4c0a      	ldr	r4, [pc, #40]	@ (80016e4 <__libc_init_array+0x44>)
 80016ba:	1b64      	subs	r4, r4, r5
 80016bc:	10a4      	asrs	r4, r4, #2
 80016be:	42a6      	cmp	r6, r4
 80016c0:	d105      	bne.n	80016ce <__libc_init_array+0x2e>
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016c8:	4798      	blx	r3
 80016ca:	3601      	adds	r6, #1
 80016cc:	e7ee      	b.n	80016ac <__libc_init_array+0xc>
 80016ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80016d2:	4798      	blx	r3
 80016d4:	3601      	adds	r6, #1
 80016d6:	e7f2      	b.n	80016be <__libc_init_array+0x1e>
 80016d8:	08002024 	.word	0x08002024
 80016dc:	08002024 	.word	0x08002024
 80016e0:	08002024 	.word	0x08002024
 80016e4:	08002028 	.word	0x08002028

080016e8 <__retarget_lock_acquire_recursive>:
 80016e8:	4770      	bx	lr

080016ea <__retarget_lock_release_recursive>:
 80016ea:	4770      	bx	lr

080016ec <_free_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	4605      	mov	r5, r0
 80016f0:	2900      	cmp	r1, #0
 80016f2:	d040      	beq.n	8001776 <_free_r+0x8a>
 80016f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016f8:	1f0c      	subs	r4, r1, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bfb8      	it	lt
 80016fe:	18e4      	addlt	r4, r4, r3
 8001700:	f000 f8de 	bl	80018c0 <__malloc_lock>
 8001704:	4a1c      	ldr	r2, [pc, #112]	@ (8001778 <_free_r+0x8c>)
 8001706:	6813      	ldr	r3, [r2, #0]
 8001708:	b933      	cbnz	r3, 8001718 <_free_r+0x2c>
 800170a:	6063      	str	r3, [r4, #4]
 800170c:	6014      	str	r4, [r2, #0]
 800170e:	4628      	mov	r0, r5
 8001710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001714:	f000 b8da 	b.w	80018cc <__malloc_unlock>
 8001718:	42a3      	cmp	r3, r4
 800171a:	d908      	bls.n	800172e <_free_r+0x42>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	1821      	adds	r1, r4, r0
 8001720:	428b      	cmp	r3, r1
 8001722:	bf01      	itttt	eq
 8001724:	6819      	ldreq	r1, [r3, #0]
 8001726:	685b      	ldreq	r3, [r3, #4]
 8001728:	1809      	addeq	r1, r1, r0
 800172a:	6021      	streq	r1, [r4, #0]
 800172c:	e7ed      	b.n	800170a <_free_r+0x1e>
 800172e:	461a      	mov	r2, r3
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	b10b      	cbz	r3, 8001738 <_free_r+0x4c>
 8001734:	42a3      	cmp	r3, r4
 8001736:	d9fa      	bls.n	800172e <_free_r+0x42>
 8001738:	6811      	ldr	r1, [r2, #0]
 800173a:	1850      	adds	r0, r2, r1
 800173c:	42a0      	cmp	r0, r4
 800173e:	d10b      	bne.n	8001758 <_free_r+0x6c>
 8001740:	6820      	ldr	r0, [r4, #0]
 8001742:	4401      	add	r1, r0
 8001744:	1850      	adds	r0, r2, r1
 8001746:	4283      	cmp	r3, r0
 8001748:	6011      	str	r1, [r2, #0]
 800174a:	d1e0      	bne.n	800170e <_free_r+0x22>
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4408      	add	r0, r1
 8001752:	6010      	str	r0, [r2, #0]
 8001754:	6053      	str	r3, [r2, #4]
 8001756:	e7da      	b.n	800170e <_free_r+0x22>
 8001758:	d902      	bls.n	8001760 <_free_r+0x74>
 800175a:	230c      	movs	r3, #12
 800175c:	602b      	str	r3, [r5, #0]
 800175e:	e7d6      	b.n	800170e <_free_r+0x22>
 8001760:	6820      	ldr	r0, [r4, #0]
 8001762:	1821      	adds	r1, r4, r0
 8001764:	428b      	cmp	r3, r1
 8001766:	bf01      	itttt	eq
 8001768:	6819      	ldreq	r1, [r3, #0]
 800176a:	685b      	ldreq	r3, [r3, #4]
 800176c:	1809      	addeq	r1, r1, r0
 800176e:	6021      	streq	r1, [r4, #0]
 8001770:	6063      	str	r3, [r4, #4]
 8001772:	6054      	str	r4, [r2, #4]
 8001774:	e7cb      	b.n	800170e <_free_r+0x22>
 8001776:	bd38      	pop	{r3, r4, r5, pc}
 8001778:	2000027c 	.word	0x2000027c

0800177c <sbrk_aligned>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	4e0f      	ldr	r6, [pc, #60]	@ (80017bc <sbrk_aligned+0x40>)
 8001780:	460c      	mov	r4, r1
 8001782:	6831      	ldr	r1, [r6, #0]
 8001784:	4605      	mov	r5, r0
 8001786:	b911      	cbnz	r1, 800178e <sbrk_aligned+0x12>
 8001788:	f000 fbaa 	bl	8001ee0 <_sbrk_r>
 800178c:	6030      	str	r0, [r6, #0]
 800178e:	4621      	mov	r1, r4
 8001790:	4628      	mov	r0, r5
 8001792:	f000 fba5 	bl	8001ee0 <_sbrk_r>
 8001796:	1c43      	adds	r3, r0, #1
 8001798:	d103      	bne.n	80017a2 <sbrk_aligned+0x26>
 800179a:	f04f 34ff 	mov.w	r4, #4294967295
 800179e:	4620      	mov	r0, r4
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
 80017a2:	1cc4      	adds	r4, r0, #3
 80017a4:	f024 0403 	bic.w	r4, r4, #3
 80017a8:	42a0      	cmp	r0, r4
 80017aa:	d0f8      	beq.n	800179e <sbrk_aligned+0x22>
 80017ac:	1a21      	subs	r1, r4, r0
 80017ae:	4628      	mov	r0, r5
 80017b0:	f000 fb96 	bl	8001ee0 <_sbrk_r>
 80017b4:	3001      	adds	r0, #1
 80017b6:	d1f2      	bne.n	800179e <sbrk_aligned+0x22>
 80017b8:	e7ef      	b.n	800179a <sbrk_aligned+0x1e>
 80017ba:	bf00      	nop
 80017bc:	20000278 	.word	0x20000278

080017c0 <_malloc_r>:
 80017c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017c4:	1ccd      	adds	r5, r1, #3
 80017c6:	f025 0503 	bic.w	r5, r5, #3
 80017ca:	3508      	adds	r5, #8
 80017cc:	2d0c      	cmp	r5, #12
 80017ce:	bf38      	it	cc
 80017d0:	250c      	movcc	r5, #12
 80017d2:	2d00      	cmp	r5, #0
 80017d4:	4606      	mov	r6, r0
 80017d6:	db01      	blt.n	80017dc <_malloc_r+0x1c>
 80017d8:	42a9      	cmp	r1, r5
 80017da:	d904      	bls.n	80017e6 <_malloc_r+0x26>
 80017dc:	230c      	movs	r3, #12
 80017de:	6033      	str	r3, [r6, #0]
 80017e0:	2000      	movs	r0, #0
 80017e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80018bc <_malloc_r+0xfc>
 80017ea:	f000 f869 	bl	80018c0 <__malloc_lock>
 80017ee:	f8d8 3000 	ldr.w	r3, [r8]
 80017f2:	461c      	mov	r4, r3
 80017f4:	bb44      	cbnz	r4, 8001848 <_malloc_r+0x88>
 80017f6:	4629      	mov	r1, r5
 80017f8:	4630      	mov	r0, r6
 80017fa:	f7ff ffbf 	bl	800177c <sbrk_aligned>
 80017fe:	1c43      	adds	r3, r0, #1
 8001800:	4604      	mov	r4, r0
 8001802:	d158      	bne.n	80018b6 <_malloc_r+0xf6>
 8001804:	f8d8 4000 	ldr.w	r4, [r8]
 8001808:	4627      	mov	r7, r4
 800180a:	2f00      	cmp	r7, #0
 800180c:	d143      	bne.n	8001896 <_malloc_r+0xd6>
 800180e:	2c00      	cmp	r4, #0
 8001810:	d04b      	beq.n	80018aa <_malloc_r+0xea>
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	4639      	mov	r1, r7
 8001816:	4630      	mov	r0, r6
 8001818:	eb04 0903 	add.w	r9, r4, r3
 800181c:	f000 fb60 	bl	8001ee0 <_sbrk_r>
 8001820:	4581      	cmp	r9, r0
 8001822:	d142      	bne.n	80018aa <_malloc_r+0xea>
 8001824:	6821      	ldr	r1, [r4, #0]
 8001826:	4630      	mov	r0, r6
 8001828:	1a6d      	subs	r5, r5, r1
 800182a:	4629      	mov	r1, r5
 800182c:	f7ff ffa6 	bl	800177c <sbrk_aligned>
 8001830:	3001      	adds	r0, #1
 8001832:	d03a      	beq.n	80018aa <_malloc_r+0xea>
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	442b      	add	r3, r5
 8001838:	6023      	str	r3, [r4, #0]
 800183a:	f8d8 3000 	ldr.w	r3, [r8]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	bb62      	cbnz	r2, 800189c <_malloc_r+0xdc>
 8001842:	f8c8 7000 	str.w	r7, [r8]
 8001846:	e00f      	b.n	8001868 <_malloc_r+0xa8>
 8001848:	6822      	ldr	r2, [r4, #0]
 800184a:	1b52      	subs	r2, r2, r5
 800184c:	d420      	bmi.n	8001890 <_malloc_r+0xd0>
 800184e:	2a0b      	cmp	r2, #11
 8001850:	d917      	bls.n	8001882 <_malloc_r+0xc2>
 8001852:	1961      	adds	r1, r4, r5
 8001854:	42a3      	cmp	r3, r4
 8001856:	6025      	str	r5, [r4, #0]
 8001858:	bf18      	it	ne
 800185a:	6059      	strne	r1, [r3, #4]
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	bf08      	it	eq
 8001860:	f8c8 1000 	streq.w	r1, [r8]
 8001864:	5162      	str	r2, [r4, r5]
 8001866:	604b      	str	r3, [r1, #4]
 8001868:	4630      	mov	r0, r6
 800186a:	f000 f82f 	bl	80018cc <__malloc_unlock>
 800186e:	f104 000b 	add.w	r0, r4, #11
 8001872:	1d23      	adds	r3, r4, #4
 8001874:	f020 0007 	bic.w	r0, r0, #7
 8001878:	1ac2      	subs	r2, r0, r3
 800187a:	bf1c      	itt	ne
 800187c:	1a1b      	subne	r3, r3, r0
 800187e:	50a3      	strne	r3, [r4, r2]
 8001880:	e7af      	b.n	80017e2 <_malloc_r+0x22>
 8001882:	6862      	ldr	r2, [r4, #4]
 8001884:	42a3      	cmp	r3, r4
 8001886:	bf0c      	ite	eq
 8001888:	f8c8 2000 	streq.w	r2, [r8]
 800188c:	605a      	strne	r2, [r3, #4]
 800188e:	e7eb      	b.n	8001868 <_malloc_r+0xa8>
 8001890:	4623      	mov	r3, r4
 8001892:	6864      	ldr	r4, [r4, #4]
 8001894:	e7ae      	b.n	80017f4 <_malloc_r+0x34>
 8001896:	463c      	mov	r4, r7
 8001898:	687f      	ldr	r7, [r7, #4]
 800189a:	e7b6      	b.n	800180a <_malloc_r+0x4a>
 800189c:	461a      	mov	r2, r3
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	42a3      	cmp	r3, r4
 80018a2:	d1fb      	bne.n	800189c <_malloc_r+0xdc>
 80018a4:	2300      	movs	r3, #0
 80018a6:	6053      	str	r3, [r2, #4]
 80018a8:	e7de      	b.n	8001868 <_malloc_r+0xa8>
 80018aa:	230c      	movs	r3, #12
 80018ac:	4630      	mov	r0, r6
 80018ae:	6033      	str	r3, [r6, #0]
 80018b0:	f000 f80c 	bl	80018cc <__malloc_unlock>
 80018b4:	e794      	b.n	80017e0 <_malloc_r+0x20>
 80018b6:	6005      	str	r5, [r0, #0]
 80018b8:	e7d6      	b.n	8001868 <_malloc_r+0xa8>
 80018ba:	bf00      	nop
 80018bc:	2000027c 	.word	0x2000027c

080018c0 <__malloc_lock>:
 80018c0:	4801      	ldr	r0, [pc, #4]	@ (80018c8 <__malloc_lock+0x8>)
 80018c2:	f7ff bf11 	b.w	80016e8 <__retarget_lock_acquire_recursive>
 80018c6:	bf00      	nop
 80018c8:	20000274 	.word	0x20000274

080018cc <__malloc_unlock>:
 80018cc:	4801      	ldr	r0, [pc, #4]	@ (80018d4 <__malloc_unlock+0x8>)
 80018ce:	f7ff bf0c 	b.w	80016ea <__retarget_lock_release_recursive>
 80018d2:	bf00      	nop
 80018d4:	20000274 	.word	0x20000274

080018d8 <__ssputs_r>:
 80018d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018dc:	461f      	mov	r7, r3
 80018de:	688e      	ldr	r6, [r1, #8]
 80018e0:	4682      	mov	sl, r0
 80018e2:	42be      	cmp	r6, r7
 80018e4:	460c      	mov	r4, r1
 80018e6:	4690      	mov	r8, r2
 80018e8:	680b      	ldr	r3, [r1, #0]
 80018ea:	d82d      	bhi.n	8001948 <__ssputs_r+0x70>
 80018ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80018f4:	d026      	beq.n	8001944 <__ssputs_r+0x6c>
 80018f6:	6965      	ldr	r5, [r4, #20]
 80018f8:	6909      	ldr	r1, [r1, #16]
 80018fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018fe:	eba3 0901 	sub.w	r9, r3, r1
 8001902:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001906:	1c7b      	adds	r3, r7, #1
 8001908:	444b      	add	r3, r9
 800190a:	106d      	asrs	r5, r5, #1
 800190c:	429d      	cmp	r5, r3
 800190e:	bf38      	it	cc
 8001910:	461d      	movcc	r5, r3
 8001912:	0553      	lsls	r3, r2, #21
 8001914:	d527      	bpl.n	8001966 <__ssputs_r+0x8e>
 8001916:	4629      	mov	r1, r5
 8001918:	f7ff ff52 	bl	80017c0 <_malloc_r>
 800191c:	4606      	mov	r6, r0
 800191e:	b360      	cbz	r0, 800197a <__ssputs_r+0xa2>
 8001920:	464a      	mov	r2, r9
 8001922:	6921      	ldr	r1, [r4, #16]
 8001924:	f000 fafa 	bl	8001f1c <memcpy>
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800192e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001932:	81a3      	strh	r3, [r4, #12]
 8001934:	6126      	str	r6, [r4, #16]
 8001936:	444e      	add	r6, r9
 8001938:	6026      	str	r6, [r4, #0]
 800193a:	463e      	mov	r6, r7
 800193c:	6165      	str	r5, [r4, #20]
 800193e:	eba5 0509 	sub.w	r5, r5, r9
 8001942:	60a5      	str	r5, [r4, #8]
 8001944:	42be      	cmp	r6, r7
 8001946:	d900      	bls.n	800194a <__ssputs_r+0x72>
 8001948:	463e      	mov	r6, r7
 800194a:	4632      	mov	r2, r6
 800194c:	4641      	mov	r1, r8
 800194e:	6820      	ldr	r0, [r4, #0]
 8001950:	f000 faac 	bl	8001eac <memmove>
 8001954:	2000      	movs	r0, #0
 8001956:	68a3      	ldr	r3, [r4, #8]
 8001958:	1b9b      	subs	r3, r3, r6
 800195a:	60a3      	str	r3, [r4, #8]
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	4433      	add	r3, r6
 8001960:	6023      	str	r3, [r4, #0]
 8001962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001966:	462a      	mov	r2, r5
 8001968:	f000 fae6 	bl	8001f38 <_realloc_r>
 800196c:	4606      	mov	r6, r0
 800196e:	2800      	cmp	r0, #0
 8001970:	d1e0      	bne.n	8001934 <__ssputs_r+0x5c>
 8001972:	4650      	mov	r0, sl
 8001974:	6921      	ldr	r1, [r4, #16]
 8001976:	f7ff feb9 	bl	80016ec <_free_r>
 800197a:	230c      	movs	r3, #12
 800197c:	f8ca 3000 	str.w	r3, [sl]
 8001980:	89a3      	ldrh	r3, [r4, #12]
 8001982:	f04f 30ff 	mov.w	r0, #4294967295
 8001986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800198a:	81a3      	strh	r3, [r4, #12]
 800198c:	e7e9      	b.n	8001962 <__ssputs_r+0x8a>
	...

08001990 <_svfiprintf_r>:
 8001990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001994:	4698      	mov	r8, r3
 8001996:	898b      	ldrh	r3, [r1, #12]
 8001998:	4607      	mov	r7, r0
 800199a:	061b      	lsls	r3, r3, #24
 800199c:	460d      	mov	r5, r1
 800199e:	4614      	mov	r4, r2
 80019a0:	b09d      	sub	sp, #116	@ 0x74
 80019a2:	d510      	bpl.n	80019c6 <_svfiprintf_r+0x36>
 80019a4:	690b      	ldr	r3, [r1, #16]
 80019a6:	b973      	cbnz	r3, 80019c6 <_svfiprintf_r+0x36>
 80019a8:	2140      	movs	r1, #64	@ 0x40
 80019aa:	f7ff ff09 	bl	80017c0 <_malloc_r>
 80019ae:	6028      	str	r0, [r5, #0]
 80019b0:	6128      	str	r0, [r5, #16]
 80019b2:	b930      	cbnz	r0, 80019c2 <_svfiprintf_r+0x32>
 80019b4:	230c      	movs	r3, #12
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	b01d      	add	sp, #116	@ 0x74
 80019be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019c2:	2340      	movs	r3, #64	@ 0x40
 80019c4:	616b      	str	r3, [r5, #20]
 80019c6:	2300      	movs	r3, #0
 80019c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80019ca:	2320      	movs	r3, #32
 80019cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019d0:	2330      	movs	r3, #48	@ 0x30
 80019d2:	f04f 0901 	mov.w	r9, #1
 80019d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80019da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001b74 <_svfiprintf_r+0x1e4>
 80019de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019e2:	4623      	mov	r3, r4
 80019e4:	469a      	mov	sl, r3
 80019e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019ea:	b10a      	cbz	r2, 80019f0 <_svfiprintf_r+0x60>
 80019ec:	2a25      	cmp	r2, #37	@ 0x25
 80019ee:	d1f9      	bne.n	80019e4 <_svfiprintf_r+0x54>
 80019f0:	ebba 0b04 	subs.w	fp, sl, r4
 80019f4:	d00b      	beq.n	8001a0e <_svfiprintf_r+0x7e>
 80019f6:	465b      	mov	r3, fp
 80019f8:	4622      	mov	r2, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	4638      	mov	r0, r7
 80019fe:	f7ff ff6b 	bl	80018d8 <__ssputs_r>
 8001a02:	3001      	adds	r0, #1
 8001a04:	f000 80a7 	beq.w	8001b56 <_svfiprintf_r+0x1c6>
 8001a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a0a:	445a      	add	r2, fp
 8001a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 809f 	beq.w	8001b56 <_svfiprintf_r+0x1c6>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a22:	f10a 0a01 	add.w	sl, sl, #1
 8001a26:	9304      	str	r3, [sp, #16]
 8001a28:	9307      	str	r3, [sp, #28]
 8001a2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a30:	4654      	mov	r4, sl
 8001a32:	2205      	movs	r2, #5
 8001a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a38:	484e      	ldr	r0, [pc, #312]	@ (8001b74 <_svfiprintf_r+0x1e4>)
 8001a3a:	f000 fa61 	bl	8001f00 <memchr>
 8001a3e:	9a04      	ldr	r2, [sp, #16]
 8001a40:	b9d8      	cbnz	r0, 8001a7a <_svfiprintf_r+0xea>
 8001a42:	06d0      	lsls	r0, r2, #27
 8001a44:	bf44      	itt	mi
 8001a46:	2320      	movmi	r3, #32
 8001a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a4c:	0711      	lsls	r1, r2, #28
 8001a4e:	bf44      	itt	mi
 8001a50:	232b      	movmi	r3, #43	@ 0x2b
 8001a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a56:	f89a 3000 	ldrb.w	r3, [sl]
 8001a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a5c:	d015      	beq.n	8001a8a <_svfiprintf_r+0xfa>
 8001a5e:	4654      	mov	r4, sl
 8001a60:	2000      	movs	r0, #0
 8001a62:	f04f 0c0a 	mov.w	ip, #10
 8001a66:	9a07      	ldr	r2, [sp, #28]
 8001a68:	4621      	mov	r1, r4
 8001a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a6e:	3b30      	subs	r3, #48	@ 0x30
 8001a70:	2b09      	cmp	r3, #9
 8001a72:	d94b      	bls.n	8001b0c <_svfiprintf_r+0x17c>
 8001a74:	b1b0      	cbz	r0, 8001aa4 <_svfiprintf_r+0x114>
 8001a76:	9207      	str	r2, [sp, #28]
 8001a78:	e014      	b.n	8001aa4 <_svfiprintf_r+0x114>
 8001a7a:	eba0 0308 	sub.w	r3, r0, r8
 8001a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	46a2      	mov	sl, r4
 8001a86:	9304      	str	r3, [sp, #16]
 8001a88:	e7d2      	b.n	8001a30 <_svfiprintf_r+0xa0>
 8001a8a:	9b03      	ldr	r3, [sp, #12]
 8001a8c:	1d19      	adds	r1, r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	9103      	str	r1, [sp, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bfbb      	ittet	lt
 8001a96:	425b      	neglt	r3, r3
 8001a98:	f042 0202 	orrlt.w	r2, r2, #2
 8001a9c:	9307      	strge	r3, [sp, #28]
 8001a9e:	9307      	strlt	r3, [sp, #28]
 8001aa0:	bfb8      	it	lt
 8001aa2:	9204      	strlt	r2, [sp, #16]
 8001aa4:	7823      	ldrb	r3, [r4, #0]
 8001aa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001aa8:	d10a      	bne.n	8001ac0 <_svfiprintf_r+0x130>
 8001aaa:	7863      	ldrb	r3, [r4, #1]
 8001aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8001aae:	d132      	bne.n	8001b16 <_svfiprintf_r+0x186>
 8001ab0:	9b03      	ldr	r3, [sp, #12]
 8001ab2:	3402      	adds	r4, #2
 8001ab4:	1d1a      	adds	r2, r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	9203      	str	r2, [sp, #12]
 8001aba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001abe:	9305      	str	r3, [sp, #20]
 8001ac0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001b78 <_svfiprintf_r+0x1e8>
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4650      	mov	r0, sl
 8001ac8:	7821      	ldrb	r1, [r4, #0]
 8001aca:	f000 fa19 	bl	8001f00 <memchr>
 8001ace:	b138      	cbz	r0, 8001ae0 <_svfiprintf_r+0x150>
 8001ad0:	2240      	movs	r2, #64	@ 0x40
 8001ad2:	9b04      	ldr	r3, [sp, #16]
 8001ad4:	eba0 000a 	sub.w	r0, r0, sl
 8001ad8:	4082      	lsls	r2, r0
 8001ada:	4313      	orrs	r3, r2
 8001adc:	3401      	adds	r4, #1
 8001ade:	9304      	str	r3, [sp, #16]
 8001ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ae4:	2206      	movs	r2, #6
 8001ae6:	4825      	ldr	r0, [pc, #148]	@ (8001b7c <_svfiprintf_r+0x1ec>)
 8001ae8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001aec:	f000 fa08 	bl	8001f00 <memchr>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d036      	beq.n	8001b62 <_svfiprintf_r+0x1d2>
 8001af4:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <_svfiprintf_r+0x1f0>)
 8001af6:	bb1b      	cbnz	r3, 8001b40 <_svfiprintf_r+0x1b0>
 8001af8:	9b03      	ldr	r3, [sp, #12]
 8001afa:	3307      	adds	r3, #7
 8001afc:	f023 0307 	bic.w	r3, r3, #7
 8001b00:	3308      	adds	r3, #8
 8001b02:	9303      	str	r3, [sp, #12]
 8001b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b06:	4433      	add	r3, r6
 8001b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b0a:	e76a      	b.n	80019e2 <_svfiprintf_r+0x52>
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	2001      	movs	r0, #1
 8001b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b14:	e7a8      	b.n	8001a68 <_svfiprintf_r+0xd8>
 8001b16:	2300      	movs	r3, #0
 8001b18:	f04f 0c0a 	mov.w	ip, #10
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	3401      	adds	r4, #1
 8001b20:	9305      	str	r3, [sp, #20]
 8001b22:	4620      	mov	r0, r4
 8001b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b28:	3a30      	subs	r2, #48	@ 0x30
 8001b2a:	2a09      	cmp	r2, #9
 8001b2c:	d903      	bls.n	8001b36 <_svfiprintf_r+0x1a6>
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0c6      	beq.n	8001ac0 <_svfiprintf_r+0x130>
 8001b32:	9105      	str	r1, [sp, #20]
 8001b34:	e7c4      	b.n	8001ac0 <_svfiprintf_r+0x130>
 8001b36:	4604      	mov	r4, r0
 8001b38:	2301      	movs	r3, #1
 8001b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b3e:	e7f0      	b.n	8001b22 <_svfiprintf_r+0x192>
 8001b40:	ab03      	add	r3, sp, #12
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	462a      	mov	r2, r5
 8001b46:	4638      	mov	r0, r7
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <_svfiprintf_r+0x1f4>)
 8001b4a:	a904      	add	r1, sp, #16
 8001b4c:	f3af 8000 	nop.w
 8001b50:	1c42      	adds	r2, r0, #1
 8001b52:	4606      	mov	r6, r0
 8001b54:	d1d6      	bne.n	8001b04 <_svfiprintf_r+0x174>
 8001b56:	89ab      	ldrh	r3, [r5, #12]
 8001b58:	065b      	lsls	r3, r3, #25
 8001b5a:	f53f af2d 	bmi.w	80019b8 <_svfiprintf_r+0x28>
 8001b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b60:	e72c      	b.n	80019bc <_svfiprintf_r+0x2c>
 8001b62:	ab03      	add	r3, sp, #12
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	462a      	mov	r2, r5
 8001b68:	4638      	mov	r0, r7
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <_svfiprintf_r+0x1f4>)
 8001b6c:	a904      	add	r1, sp, #16
 8001b6e:	f000 f87d 	bl	8001c6c <_printf_i>
 8001b72:	e7ed      	b.n	8001b50 <_svfiprintf_r+0x1c0>
 8001b74:	08001fef 	.word	0x08001fef
 8001b78:	08001ff5 	.word	0x08001ff5
 8001b7c:	08001ff9 	.word	0x08001ff9
 8001b80:	00000000 	.word	0x00000000
 8001b84:	080018d9 	.word	0x080018d9

08001b88 <_printf_common>:
 8001b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b8c:	4616      	mov	r6, r2
 8001b8e:	4698      	mov	r8, r3
 8001b90:	688a      	ldr	r2, [r1, #8]
 8001b92:	690b      	ldr	r3, [r1, #16]
 8001b94:	4607      	mov	r7, r0
 8001b96:	4293      	cmp	r3, r2
 8001b98:	bfb8      	it	lt
 8001b9a:	4613      	movlt	r3, r2
 8001b9c:	6033      	str	r3, [r6, #0]
 8001b9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ba8:	b10a      	cbz	r2, 8001bae <_printf_common+0x26>
 8001baa:	3301      	adds	r3, #1
 8001bac:	6033      	str	r3, [r6, #0]
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	0699      	lsls	r1, r3, #26
 8001bb2:	bf42      	ittt	mi
 8001bb4:	6833      	ldrmi	r3, [r6, #0]
 8001bb6:	3302      	addmi	r3, #2
 8001bb8:	6033      	strmi	r3, [r6, #0]
 8001bba:	6825      	ldr	r5, [r4, #0]
 8001bbc:	f015 0506 	ands.w	r5, r5, #6
 8001bc0:	d106      	bne.n	8001bd0 <_printf_common+0x48>
 8001bc2:	f104 0a19 	add.w	sl, r4, #25
 8001bc6:	68e3      	ldr	r3, [r4, #12]
 8001bc8:	6832      	ldr	r2, [r6, #0]
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	42ab      	cmp	r3, r5
 8001bce:	dc2b      	bgt.n	8001c28 <_printf_common+0xa0>
 8001bd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001bd4:	6822      	ldr	r2, [r4, #0]
 8001bd6:	3b00      	subs	r3, #0
 8001bd8:	bf18      	it	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	0692      	lsls	r2, r2, #26
 8001bde:	d430      	bmi.n	8001c42 <_printf_common+0xba>
 8001be0:	4641      	mov	r1, r8
 8001be2:	4638      	mov	r0, r7
 8001be4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001be8:	47c8      	blx	r9
 8001bea:	3001      	adds	r0, #1
 8001bec:	d023      	beq.n	8001c36 <_printf_common+0xae>
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	6922      	ldr	r2, [r4, #16]
 8001bf2:	f003 0306 	and.w	r3, r3, #6
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf14      	ite	ne
 8001bfa:	2500      	movne	r5, #0
 8001bfc:	6833      	ldreq	r3, [r6, #0]
 8001bfe:	f04f 0600 	mov.w	r6, #0
 8001c02:	bf08      	it	eq
 8001c04:	68e5      	ldreq	r5, [r4, #12]
 8001c06:	f104 041a 	add.w	r4, r4, #26
 8001c0a:	bf08      	it	eq
 8001c0c:	1aed      	subeq	r5, r5, r3
 8001c0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001c12:	bf08      	it	eq
 8001c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bfc4      	itt	gt
 8001c1c:	1a9b      	subgt	r3, r3, r2
 8001c1e:	18ed      	addgt	r5, r5, r3
 8001c20:	42b5      	cmp	r5, r6
 8001c22:	d11a      	bne.n	8001c5a <_printf_common+0xd2>
 8001c24:	2000      	movs	r0, #0
 8001c26:	e008      	b.n	8001c3a <_printf_common+0xb2>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	4652      	mov	r2, sl
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	4638      	mov	r0, r7
 8001c30:	47c8      	blx	r9
 8001c32:	3001      	adds	r0, #1
 8001c34:	d103      	bne.n	8001c3e <_printf_common+0xb6>
 8001c36:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c3e:	3501      	adds	r5, #1
 8001c40:	e7c1      	b.n	8001bc6 <_printf_common+0x3e>
 8001c42:	2030      	movs	r0, #48	@ 0x30
 8001c44:	18e1      	adds	r1, r4, r3
 8001c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c50:	4422      	add	r2, r4
 8001c52:	3302      	adds	r3, #2
 8001c54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c58:	e7c2      	b.n	8001be0 <_printf_common+0x58>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	4622      	mov	r2, r4
 8001c5e:	4641      	mov	r1, r8
 8001c60:	4638      	mov	r0, r7
 8001c62:	47c8      	blx	r9
 8001c64:	3001      	adds	r0, #1
 8001c66:	d0e6      	beq.n	8001c36 <_printf_common+0xae>
 8001c68:	3601      	adds	r6, #1
 8001c6a:	e7d9      	b.n	8001c20 <_printf_common+0x98>

08001c6c <_printf_i>:
 8001c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c70:	7e0f      	ldrb	r7, [r1, #24]
 8001c72:	4691      	mov	r9, r2
 8001c74:	2f78      	cmp	r7, #120	@ 0x78
 8001c76:	4680      	mov	r8, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	469a      	mov	sl, r3
 8001c7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c82:	d807      	bhi.n	8001c94 <_printf_i+0x28>
 8001c84:	2f62      	cmp	r7, #98	@ 0x62
 8001c86:	d80a      	bhi.n	8001c9e <_printf_i+0x32>
 8001c88:	2f00      	cmp	r7, #0
 8001c8a:	f000 80d3 	beq.w	8001e34 <_printf_i+0x1c8>
 8001c8e:	2f58      	cmp	r7, #88	@ 0x58
 8001c90:	f000 80ba 	beq.w	8001e08 <_printf_i+0x19c>
 8001c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c9c:	e03a      	b.n	8001d14 <_printf_i+0xa8>
 8001c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ca2:	2b15      	cmp	r3, #21
 8001ca4:	d8f6      	bhi.n	8001c94 <_printf_i+0x28>
 8001ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8001cac <_printf_i+0x40>)
 8001ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cac:	08001d05 	.word	0x08001d05
 8001cb0:	08001d19 	.word	0x08001d19
 8001cb4:	08001c95 	.word	0x08001c95
 8001cb8:	08001c95 	.word	0x08001c95
 8001cbc:	08001c95 	.word	0x08001c95
 8001cc0:	08001c95 	.word	0x08001c95
 8001cc4:	08001d19 	.word	0x08001d19
 8001cc8:	08001c95 	.word	0x08001c95
 8001ccc:	08001c95 	.word	0x08001c95
 8001cd0:	08001c95 	.word	0x08001c95
 8001cd4:	08001c95 	.word	0x08001c95
 8001cd8:	08001e1b 	.word	0x08001e1b
 8001cdc:	08001d43 	.word	0x08001d43
 8001ce0:	08001dd5 	.word	0x08001dd5
 8001ce4:	08001c95 	.word	0x08001c95
 8001ce8:	08001c95 	.word	0x08001c95
 8001cec:	08001e3d 	.word	0x08001e3d
 8001cf0:	08001c95 	.word	0x08001c95
 8001cf4:	08001d43 	.word	0x08001d43
 8001cf8:	08001c95 	.word	0x08001c95
 8001cfc:	08001c95 	.word	0x08001c95
 8001d00:	08001ddd 	.word	0x08001ddd
 8001d04:	6833      	ldr	r3, [r6, #0]
 8001d06:	1d1a      	adds	r2, r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6032      	str	r2, [r6, #0]
 8001d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d14:	2301      	movs	r3, #1
 8001d16:	e09e      	b.n	8001e56 <_printf_i+0x1ea>
 8001d18:	6833      	ldr	r3, [r6, #0]
 8001d1a:	6820      	ldr	r0, [r4, #0]
 8001d1c:	1d19      	adds	r1, r3, #4
 8001d1e:	6031      	str	r1, [r6, #0]
 8001d20:	0606      	lsls	r6, r0, #24
 8001d22:	d501      	bpl.n	8001d28 <_printf_i+0xbc>
 8001d24:	681d      	ldr	r5, [r3, #0]
 8001d26:	e003      	b.n	8001d30 <_printf_i+0xc4>
 8001d28:	0645      	lsls	r5, r0, #25
 8001d2a:	d5fb      	bpl.n	8001d24 <_printf_i+0xb8>
 8001d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d30:	2d00      	cmp	r5, #0
 8001d32:	da03      	bge.n	8001d3c <_printf_i+0xd0>
 8001d34:	232d      	movs	r3, #45	@ 0x2d
 8001d36:	426d      	negs	r5, r5
 8001d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	4859      	ldr	r0, [pc, #356]	@ (8001ea4 <_printf_i+0x238>)
 8001d40:	e011      	b.n	8001d66 <_printf_i+0xfa>
 8001d42:	6821      	ldr	r1, [r4, #0]
 8001d44:	6833      	ldr	r3, [r6, #0]
 8001d46:	0608      	lsls	r0, r1, #24
 8001d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d4c:	d402      	bmi.n	8001d54 <_printf_i+0xe8>
 8001d4e:	0649      	lsls	r1, r1, #25
 8001d50:	bf48      	it	mi
 8001d52:	b2ad      	uxthmi	r5, r5
 8001d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d56:	6033      	str	r3, [r6, #0]
 8001d58:	bf14      	ite	ne
 8001d5a:	230a      	movne	r3, #10
 8001d5c:	2308      	moveq	r3, #8
 8001d5e:	4851      	ldr	r0, [pc, #324]	@ (8001ea4 <_printf_i+0x238>)
 8001d60:	2100      	movs	r1, #0
 8001d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d66:	6866      	ldr	r6, [r4, #4]
 8001d68:	2e00      	cmp	r6, #0
 8001d6a:	bfa8      	it	ge
 8001d6c:	6821      	ldrge	r1, [r4, #0]
 8001d6e:	60a6      	str	r6, [r4, #8]
 8001d70:	bfa4      	itt	ge
 8001d72:	f021 0104 	bicge.w	r1, r1, #4
 8001d76:	6021      	strge	r1, [r4, #0]
 8001d78:	b90d      	cbnz	r5, 8001d7e <_printf_i+0x112>
 8001d7a:	2e00      	cmp	r6, #0
 8001d7c:	d04b      	beq.n	8001e16 <_printf_i+0x1aa>
 8001d7e:	4616      	mov	r6, r2
 8001d80:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d84:	fb03 5711 	mls	r7, r3, r1, r5
 8001d88:	5dc7      	ldrb	r7, [r0, r7]
 8001d8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d8e:	462f      	mov	r7, r5
 8001d90:	42bb      	cmp	r3, r7
 8001d92:	460d      	mov	r5, r1
 8001d94:	d9f4      	bls.n	8001d80 <_printf_i+0x114>
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d10b      	bne.n	8001db2 <_printf_i+0x146>
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	07df      	lsls	r7, r3, #31
 8001d9e:	d508      	bpl.n	8001db2 <_printf_i+0x146>
 8001da0:	6923      	ldr	r3, [r4, #16]
 8001da2:	6861      	ldr	r1, [r4, #4]
 8001da4:	4299      	cmp	r1, r3
 8001da6:	bfde      	ittt	le
 8001da8:	2330      	movle	r3, #48	@ 0x30
 8001daa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001dae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001db2:	1b92      	subs	r2, r2, r6
 8001db4:	6122      	str	r2, [r4, #16]
 8001db6:	464b      	mov	r3, r9
 8001db8:	4621      	mov	r1, r4
 8001dba:	4640      	mov	r0, r8
 8001dbc:	f8cd a000 	str.w	sl, [sp]
 8001dc0:	aa03      	add	r2, sp, #12
 8001dc2:	f7ff fee1 	bl	8001b88 <_printf_common>
 8001dc6:	3001      	adds	r0, #1
 8001dc8:	d14a      	bne.n	8001e60 <_printf_i+0x1f4>
 8001dca:	f04f 30ff 	mov.w	r0, #4294967295
 8001dce:	b004      	add	sp, #16
 8001dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	f043 0320 	orr.w	r3, r3, #32
 8001dda:	6023      	str	r3, [r4, #0]
 8001ddc:	2778      	movs	r7, #120	@ 0x78
 8001dde:	4832      	ldr	r0, [pc, #200]	@ (8001ea8 <_printf_i+0x23c>)
 8001de0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	6831      	ldr	r1, [r6, #0]
 8001de8:	061f      	lsls	r7, r3, #24
 8001dea:	f851 5b04 	ldr.w	r5, [r1], #4
 8001dee:	d402      	bmi.n	8001df6 <_printf_i+0x18a>
 8001df0:	065f      	lsls	r7, r3, #25
 8001df2:	bf48      	it	mi
 8001df4:	b2ad      	uxthmi	r5, r5
 8001df6:	6031      	str	r1, [r6, #0]
 8001df8:	07d9      	lsls	r1, r3, #31
 8001dfa:	bf44      	itt	mi
 8001dfc:	f043 0320 	orrmi.w	r3, r3, #32
 8001e00:	6023      	strmi	r3, [r4, #0]
 8001e02:	b11d      	cbz	r5, 8001e0c <_printf_i+0x1a0>
 8001e04:	2310      	movs	r3, #16
 8001e06:	e7ab      	b.n	8001d60 <_printf_i+0xf4>
 8001e08:	4826      	ldr	r0, [pc, #152]	@ (8001ea4 <_printf_i+0x238>)
 8001e0a:	e7e9      	b.n	8001de0 <_printf_i+0x174>
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	f023 0320 	bic.w	r3, r3, #32
 8001e12:	6023      	str	r3, [r4, #0]
 8001e14:	e7f6      	b.n	8001e04 <_printf_i+0x198>
 8001e16:	4616      	mov	r6, r2
 8001e18:	e7bd      	b.n	8001d96 <_printf_i+0x12a>
 8001e1a:	6833      	ldr	r3, [r6, #0]
 8001e1c:	6825      	ldr	r5, [r4, #0]
 8001e1e:	1d18      	adds	r0, r3, #4
 8001e20:	6961      	ldr	r1, [r4, #20]
 8001e22:	6030      	str	r0, [r6, #0]
 8001e24:	062e      	lsls	r6, r5, #24
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	d501      	bpl.n	8001e2e <_printf_i+0x1c2>
 8001e2a:	6019      	str	r1, [r3, #0]
 8001e2c:	e002      	b.n	8001e34 <_printf_i+0x1c8>
 8001e2e:	0668      	lsls	r0, r5, #25
 8001e30:	d5fb      	bpl.n	8001e2a <_printf_i+0x1be>
 8001e32:	8019      	strh	r1, [r3, #0]
 8001e34:	2300      	movs	r3, #0
 8001e36:	4616      	mov	r6, r2
 8001e38:	6123      	str	r3, [r4, #16]
 8001e3a:	e7bc      	b.n	8001db6 <_printf_i+0x14a>
 8001e3c:	6833      	ldr	r3, [r6, #0]
 8001e3e:	2100      	movs	r1, #0
 8001e40:	1d1a      	adds	r2, r3, #4
 8001e42:	6032      	str	r2, [r6, #0]
 8001e44:	681e      	ldr	r6, [r3, #0]
 8001e46:	6862      	ldr	r2, [r4, #4]
 8001e48:	4630      	mov	r0, r6
 8001e4a:	f000 f859 	bl	8001f00 <memchr>
 8001e4e:	b108      	cbz	r0, 8001e54 <_printf_i+0x1e8>
 8001e50:	1b80      	subs	r0, r0, r6
 8001e52:	6060      	str	r0, [r4, #4]
 8001e54:	6863      	ldr	r3, [r4, #4]
 8001e56:	6123      	str	r3, [r4, #16]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e5e:	e7aa      	b.n	8001db6 <_printf_i+0x14a>
 8001e60:	4632      	mov	r2, r6
 8001e62:	4649      	mov	r1, r9
 8001e64:	4640      	mov	r0, r8
 8001e66:	6923      	ldr	r3, [r4, #16]
 8001e68:	47d0      	blx	sl
 8001e6a:	3001      	adds	r0, #1
 8001e6c:	d0ad      	beq.n	8001dca <_printf_i+0x15e>
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	079b      	lsls	r3, r3, #30
 8001e72:	d413      	bmi.n	8001e9c <_printf_i+0x230>
 8001e74:	68e0      	ldr	r0, [r4, #12]
 8001e76:	9b03      	ldr	r3, [sp, #12]
 8001e78:	4298      	cmp	r0, r3
 8001e7a:	bfb8      	it	lt
 8001e7c:	4618      	movlt	r0, r3
 8001e7e:	e7a6      	b.n	8001dce <_printf_i+0x162>
 8001e80:	2301      	movs	r3, #1
 8001e82:	4632      	mov	r2, r6
 8001e84:	4649      	mov	r1, r9
 8001e86:	4640      	mov	r0, r8
 8001e88:	47d0      	blx	sl
 8001e8a:	3001      	adds	r0, #1
 8001e8c:	d09d      	beq.n	8001dca <_printf_i+0x15e>
 8001e8e:	3501      	adds	r5, #1
 8001e90:	68e3      	ldr	r3, [r4, #12]
 8001e92:	9903      	ldr	r1, [sp, #12]
 8001e94:	1a5b      	subs	r3, r3, r1
 8001e96:	42ab      	cmp	r3, r5
 8001e98:	dcf2      	bgt.n	8001e80 <_printf_i+0x214>
 8001e9a:	e7eb      	b.n	8001e74 <_printf_i+0x208>
 8001e9c:	2500      	movs	r5, #0
 8001e9e:	f104 0619 	add.w	r6, r4, #25
 8001ea2:	e7f5      	b.n	8001e90 <_printf_i+0x224>
 8001ea4:	08002000 	.word	0x08002000
 8001ea8:	08002011 	.word	0x08002011

08001eac <memmove>:
 8001eac:	4288      	cmp	r0, r1
 8001eae:	b510      	push	{r4, lr}
 8001eb0:	eb01 0402 	add.w	r4, r1, r2
 8001eb4:	d902      	bls.n	8001ebc <memmove+0x10>
 8001eb6:	4284      	cmp	r4, r0
 8001eb8:	4623      	mov	r3, r4
 8001eba:	d807      	bhi.n	8001ecc <memmove+0x20>
 8001ebc:	1e43      	subs	r3, r0, #1
 8001ebe:	42a1      	cmp	r1, r4
 8001ec0:	d008      	beq.n	8001ed4 <memmove+0x28>
 8001ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001eca:	e7f8      	b.n	8001ebe <memmove+0x12>
 8001ecc:	4601      	mov	r1, r0
 8001ece:	4402      	add	r2, r0
 8001ed0:	428a      	cmp	r2, r1
 8001ed2:	d100      	bne.n	8001ed6 <memmove+0x2a>
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001ede:	e7f7      	b.n	8001ed0 <memmove+0x24>

08001ee0 <_sbrk_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	4d05      	ldr	r5, [pc, #20]	@ (8001efc <_sbrk_r+0x1c>)
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	4608      	mov	r0, r1
 8001eea:	602b      	str	r3, [r5, #0]
 8001eec:	f7fe fb60 	bl	80005b0 <_sbrk>
 8001ef0:	1c43      	adds	r3, r0, #1
 8001ef2:	d102      	bne.n	8001efa <_sbrk_r+0x1a>
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	b103      	cbz	r3, 8001efa <_sbrk_r+0x1a>
 8001ef8:	6023      	str	r3, [r4, #0]
 8001efa:	bd38      	pop	{r3, r4, r5, pc}
 8001efc:	20000270 	.word	0x20000270

08001f00 <memchr>:
 8001f00:	4603      	mov	r3, r0
 8001f02:	b510      	push	{r4, lr}
 8001f04:	b2c9      	uxtb	r1, r1
 8001f06:	4402      	add	r2, r0
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	d101      	bne.n	8001f12 <memchr+0x12>
 8001f0e:	2000      	movs	r0, #0
 8001f10:	e003      	b.n	8001f1a <memchr+0x1a>
 8001f12:	7804      	ldrb	r4, [r0, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	428c      	cmp	r4, r1
 8001f18:	d1f6      	bne.n	8001f08 <memchr+0x8>
 8001f1a:	bd10      	pop	{r4, pc}

08001f1c <memcpy>:
 8001f1c:	440a      	add	r2, r1
 8001f1e:	4291      	cmp	r1, r2
 8001f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f24:	d100      	bne.n	8001f28 <memcpy+0xc>
 8001f26:	4770      	bx	lr
 8001f28:	b510      	push	{r4, lr}
 8001f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f2e:	4291      	cmp	r1, r2
 8001f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f34:	d1f9      	bne.n	8001f2a <memcpy+0xe>
 8001f36:	bd10      	pop	{r4, pc}

08001f38 <_realloc_r>:
 8001f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f3c:	4680      	mov	r8, r0
 8001f3e:	4615      	mov	r5, r2
 8001f40:	460c      	mov	r4, r1
 8001f42:	b921      	cbnz	r1, 8001f4e <_realloc_r+0x16>
 8001f44:	4611      	mov	r1, r2
 8001f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f4a:	f7ff bc39 	b.w	80017c0 <_malloc_r>
 8001f4e:	b92a      	cbnz	r2, 8001f5c <_realloc_r+0x24>
 8001f50:	f7ff fbcc 	bl	80016ec <_free_r>
 8001f54:	2400      	movs	r4, #0
 8001f56:	4620      	mov	r0, r4
 8001f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f5c:	f000 f81a 	bl	8001f94 <_malloc_usable_size_r>
 8001f60:	4285      	cmp	r5, r0
 8001f62:	4606      	mov	r6, r0
 8001f64:	d802      	bhi.n	8001f6c <_realloc_r+0x34>
 8001f66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001f6a:	d8f4      	bhi.n	8001f56 <_realloc_r+0x1e>
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	4640      	mov	r0, r8
 8001f70:	f7ff fc26 	bl	80017c0 <_malloc_r>
 8001f74:	4607      	mov	r7, r0
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d0ec      	beq.n	8001f54 <_realloc_r+0x1c>
 8001f7a:	42b5      	cmp	r5, r6
 8001f7c:	462a      	mov	r2, r5
 8001f7e:	4621      	mov	r1, r4
 8001f80:	bf28      	it	cs
 8001f82:	4632      	movcs	r2, r6
 8001f84:	f7ff ffca 	bl	8001f1c <memcpy>
 8001f88:	4621      	mov	r1, r4
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	f7ff fbae 	bl	80016ec <_free_r>
 8001f90:	463c      	mov	r4, r7
 8001f92:	e7e0      	b.n	8001f56 <_realloc_r+0x1e>

08001f94 <_malloc_usable_size_r>:
 8001f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f98:	1f18      	subs	r0, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bfbc      	itt	lt
 8001f9e:	580b      	ldrlt	r3, [r1, r0]
 8001fa0:	18c0      	addlt	r0, r0, r3
 8001fa2:	4770      	bx	lr

08001fa4 <_init>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr

08001fb0 <_fini>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr
