
deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002014  08002014  00003014  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020ac  080020ac  000040b4  2**0
                  CONTENTS
  4 .ARM          00000000  080020ac  080020ac  000040b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020ac  080020ac  000040b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020ac  080020ac  000030ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020b0  080020b0  000030b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  080020b4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200000b4  08002168  000040b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08002168  00004340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d68b  00000000  00000000  000040dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002061  00000000  00000000  00011768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000058fe  00000000  00000000  000137c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  000190c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000991  00000000  00000000  00019938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017166  00000000  00000000  0001a2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001142e  00000000  00000000  0003142f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082692  00000000  00000000  0004285d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c4eef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bb0  00000000  00000000  000c4f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000c6ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ffc 	.word	0x08001ffc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08001ffc 	.word	0x08001ffc

0800014c <item0_f>:
    int index;
    func f;
}Main_menu_item;
Main_menu_item main_menu[4]={};

void item0_f(char *title, char line[15]){
 800014c:	4608      	mov	r0, r1
    sprintf(line,"%s %d","item0setted",0);
 800014e:	2300      	movs	r3, #0
 8000150:	4a01      	ldr	r2, [pc, #4]	@ (8000158 <item0_f+0xc>)
 8000152:	4902      	ldr	r1, [pc, #8]	@ (800015c <item0_f+0x10>)
 8000154:	f001 baa2 	b.w	800169c <siprintf>
 8000158:	08002014 	.word	0x08002014
 800015c:	08002020 	.word	0x08002020

08000160 <item1_f>:
}
void item1_f(char *title, char line[15]){
 8000160:	4608      	mov	r0, r1
    sprintf(line,"%s %d","item1setted",1);
 8000162:	2301      	movs	r3, #1
 8000164:	4a01      	ldr	r2, [pc, #4]	@ (800016c <item1_f+0xc>)
 8000166:	4902      	ldr	r1, [pc, #8]	@ (8000170 <item1_f+0x10>)
 8000168:	f001 ba98 	b.w	800169c <siprintf>
 800016c:	08002026 	.word	0x08002026
 8000170:	08002020 	.word	0x08002020

08000174 <item2_f>:
}
void item2_f(char *title, char line[15]){
 8000174:	4608      	mov	r0, r1
    sprintf(line,"%s %d","item2setted",2);
 8000176:	2302      	movs	r3, #2
 8000178:	4a01      	ldr	r2, [pc, #4]	@ (8000180 <item2_f+0xc>)
 800017a:	4902      	ldr	r1, [pc, #8]	@ (8000184 <item2_f+0x10>)
 800017c:	f001 ba8e 	b.w	800169c <siprintf>
 8000180:	08002032 	.word	0x08002032
 8000184:	08002020 	.word	0x08002020

08000188 <item3_f>:
}
void item3_f(char *title, char line[15]){
 8000188:	4608      	mov	r0, r1
    sprintf(line,"%s %d","item3setted",3);
 800018a:	2303      	movs	r3, #3
 800018c:	4a01      	ldr	r2, [pc, #4]	@ (8000194 <item3_f+0xc>)
 800018e:	4902      	ldr	r1, [pc, #8]	@ (8000198 <item3_f+0x10>)
 8000190:	f001 ba84 	b.w	800169c <siprintf>
 8000194:	0800203e 	.word	0x0800203e
 8000198:	08002020 	.word	0x08002020

0800019c <display_refresh>:
}display_content;


display_content content;

void display_refresh(void){
 800019c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	main_menu[content.line0_index].f(main_menu[content.line0_index].title, content.line0);
 80001a0:	4e16      	ldr	r6, [pc, #88]	@ (80001fc <display_refresh+0x60>)
 80001a2:	f04f 0814 	mov.w	r8, #20
 80001a6:	4635      	mov	r5, r6
 80001a8:	4c15      	ldr	r4, [pc, #84]	@ (8000200 <display_refresh+0x64>)
 80001aa:	f815 0b03 	ldrb.w	r0, [r5], #3
	main_menu[content.line1_index].f(main_menu[content.line1_index].title, content.line1);
 80001ae:	f106 0712 	add.w	r7, r6, #18
	main_menu[content.line0_index].f(main_menu[content.line0_index].title, content.line0);
 80001b2:	fb08 4000 	mla	r0, r8, r0, r4
 80001b6:	4629      	mov	r1, r5
 80001b8:	6903      	ldr	r3, [r0, #16]
 80001ba:	4798      	blx	r3
	main_menu[content.line1_index].f(main_menu[content.line1_index].title, content.line1);
 80001bc:	7873      	ldrb	r3, [r6, #1]
 80001be:	4639      	mov	r1, r7
 80001c0:	fb08 4003 	mla	r0, r8, r3, r4
 80001c4:	6903      	ldr	r3, [r0, #16]
 80001c6:	4798      	blx	r3

	LCD_clear();
 80001c8:	f001 f9ec 	bl	80015a4 <LCD_clear>

	LCD_set_cursor(content.sign_index, 15);
 80001cc:	210f      	movs	r1, #15
 80001ce:	78b0      	ldrb	r0, [r6, #2]
 80001d0:	f001 f9de 	bl	8001590 <LCD_set_cursor>
	LCD_write_string("<");
 80001d4:	480b      	ldr	r0, [pc, #44]	@ (8000204 <display_refresh+0x68>)
 80001d6:	f001 f9d2 	bl	800157e <LCD_write_string>

	LCD_set_cursor(0, 0);
 80001da:	2100      	movs	r1, #0
 80001dc:	4608      	mov	r0, r1
 80001de:	f001 f9d7 	bl	8001590 <LCD_set_cursor>
	LCD_write_string(content.line0);
 80001e2:	4628      	mov	r0, r5
 80001e4:	f001 f9cb 	bl	800157e <LCD_write_string>

	LCD_set_cursor(1, 0);
 80001e8:	2001      	movs	r0, #1
 80001ea:	2100      	movs	r1, #0
 80001ec:	f001 f9d0 	bl	8001590 <LCD_set_cursor>
	LCD_write_string(content.line1);
 80001f0:	4638      	mov	r0, r7
}
 80001f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LCD_write_string(content.line1);
 80001f6:	f001 b9c2 	b.w	800157e <LCD_write_string>
 80001fa:	bf00      	nop
 80001fc:	200000d0 	.word	0x200000d0
 8000200:	200000f8 	.word	0x200000f8
 8000204:	0800204a 	.word	0x0800204a

08000208 <main_menu_add_item>:
main_menu[3] = item3;*/



void main_menu_add_item(Main_menu_item *item){
	main_menu[content.item_num++] = *item;
 8000208:	4a07      	ldr	r2, [pc, #28]	@ (8000228 <main_menu_add_item+0x20>)
void main_menu_add_item(Main_menu_item *item){
 800020a:	b530      	push	{r4, r5, lr}
	main_menu[content.item_num++] = *item;
 800020c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800020e:	4605      	mov	r5, r0
 8000210:	1c59      	adds	r1, r3, #1
 8000212:	6251      	str	r1, [r2, #36]	@ 0x24
 8000214:	2214      	movs	r2, #20
 8000216:	4c05      	ldr	r4, [pc, #20]	@ (800022c <main_menu_add_item+0x24>)
 8000218:	fb02 4403 	mla	r4, r2, r3, r4
 800021c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800021e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000220:	682b      	ldr	r3, [r5, #0]
 8000222:	6023      	str	r3, [r4, #0]
}
 8000224:	bd30      	pop	{r4, r5, pc}
 8000226:	bf00      	nop
 8000228:	200000d0 	.word	0x200000d0
 800022c:	200000f8 	.word	0x200000f8

08000230 <main_menu_init>:

void main_menu_init(void){
 8000230:	b570      	push	{r4, r5, r6, lr}
	  main_menu_add_item(&item0);
 8000232:	4810      	ldr	r0, [pc, #64]	@ (8000274 <main_menu_init+0x44>)
 8000234:	f7ff ffe8 	bl	8000208 <main_menu_add_item>
	  main_menu_add_item(&item1);
 8000238:	480f      	ldr	r0, [pc, #60]	@ (8000278 <main_menu_init+0x48>)
 800023a:	f7ff ffe5 	bl	8000208 <main_menu_add_item>
	  main_menu_add_item(&item2);
 800023e:	480f      	ldr	r0, [pc, #60]	@ (800027c <main_menu_init+0x4c>)
 8000240:	f7ff ffe2 	bl	8000208 <main_menu_add_item>
	  main_menu_add_item(&item3);
 8000244:	480e      	ldr	r0, [pc, #56]	@ (8000280 <main_menu_init+0x50>)
 8000246:	f7ff ffdf 	bl	8000208 <main_menu_add_item>

	  content.line0_index=0;
 800024a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800024e:	4d0d      	ldr	r5, [pc, #52]	@ (8000284 <main_menu_init+0x54>)
	  content.line1_index=1;
	  content.sign_index=0;

	  main_menu[content.line0_index].f(main_menu[content.line0_index].title, content.line0);
 8000250:	4c0d      	ldr	r4, [pc, #52]	@ (8000288 <main_menu_init+0x58>)
	  content.line0_index=0;
 8000252:	802b      	strh	r3, [r5, #0]
	  content.sign_index=0;
 8000254:	2300      	movs	r3, #0
	  main_menu[content.line0_index].f(main_menu[content.line0_index].title, content.line0);
 8000256:	4620      	mov	r0, r4
	  content.sign_index=0;
 8000258:	70ab      	strb	r3, [r5, #2]
	  main_menu[content.line0_index].f(main_menu[content.line0_index].title, content.line0);
 800025a:	1ce9      	adds	r1, r5, #3
 800025c:	6923      	ldr	r3, [r4, #16]
 800025e:	4798      	blx	r3
	  main_menu[content.line1_index].f(main_menu[content.line1_index].title, content.line1);
 8000260:	2214      	movs	r2, #20
 8000262:	786b      	ldrb	r3, [r5, #1]
 8000264:	f105 0112 	add.w	r1, r5, #18
 8000268:	fb02 4003 	mla	r0, r2, r3, r4
}
 800026c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  main_menu[content.line1_index].f(main_menu[content.line1_index].title, content.line1);
 8000270:	6903      	ldr	r3, [r0, #16]
 8000272:	4718      	bx	r3
 8000274:	2000003c 	.word	0x2000003c
 8000278:	20000028 	.word	0x20000028
 800027c:	20000014 	.word	0x20000014
 8000280:	20000000 	.word	0x20000000
 8000284:	200000d0 	.word	0x200000d0
 8000288:	200000f8 	.word	0x200000f8

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b500      	push	{lr}
 800028e:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000290:	2224      	movs	r2, #36	@ 0x24
 8000292:	2100      	movs	r1, #0
 8000294:	a807      	add	r0, sp, #28
 8000296:	f001 fa21 	bl	80016dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	2214      	movs	r2, #20
 800029c:	2100      	movs	r1, #0
 800029e:	a801      	add	r0, sp, #4
 80002a0:	f001 fa1c 	bl	80016dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f000 fdff 	bl	8000eb4 <HAL_RCC_OscConfig>
 80002b6:	4601      	mov	r1, r0
 80002b8:	b108      	cbz	r0, 80002be <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002bc:	e7fe      	b.n	80002bc <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c4:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	a801      	add	r0, sp, #4
 80002cc:	f000 ffb4 	bl	8001238 <HAL_RCC_ClockConfig>
 80002d0:	b108      	cbz	r0, 80002d6 <SystemClock_Config+0x4a>
 80002d2:	b672      	cpsid	i
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <SystemClock_Config+0x48>
}
 80002d6:	b011      	add	sp, #68	@ 0x44
 80002d8:	f85d fb04 	ldr.w	pc, [sp], #4

080002dc <main>:
{
 80002dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002e0:	b088      	sub	sp, #32
  HAL_Init();
 80002e2:	f000 fa03 	bl	80006ec <HAL_Init>
  SystemClock_Config();
 80002e6:	f7ff ffd1 	bl	800028c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	2210      	movs	r2, #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	eb0d 0002 	add.w	r0, sp, r2
 80002f2:	f001 f9f3 	bl	80016dc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f6:	4b6b      	ldr	r3, [pc, #428]	@ (80004a4 <main+0x1c8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002fe:	486a      	ldr	r0, [pc, #424]	@ (80004a8 <main+0x1cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	f042 0210 	orr.w	r2, r2, #16
 8000304:	619a      	str	r2, [r3, #24]
 8000306:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	f002 0210 	and.w	r2, r2, #16
 800030e:	9201      	str	r2, [sp, #4]
 8000310:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	f042 0204 	orr.w	r2, r2, #4
 800031a:	619a      	str	r2, [r3, #24]
 800031c:	699a      	ldr	r2, [r3, #24]
  huart2.Init.BaudRate = 115200;
 800031e:	4e63      	ldr	r6, [pc, #396]	@ (80004ac <main+0x1d0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000320:	f002 0204 	and.w	r2, r2, #4
 8000324:	9202      	str	r2, [sp, #8]
 8000326:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	699a      	ldr	r2, [r3, #24]
 800032a:	f042 0208 	orr.w	r2, r2, #8
 800032e:	619a      	str	r2, [r3, #24]
 8000330:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	f003 0308 	and.w	r3, r3, #8
 8000338:	9303      	str	r3, [sp, #12]
 800033a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800033c:	f000 fb3a 	bl	80009b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000340:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000344:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000348:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800034a:	4857      	ldr	r0, [pc, #348]	@ (80004a8 <main+0x1cc>)
 800034c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	e9cd 4306 	strd	r4, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000352:	f000 fa57 	bl	8000804 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_Pin|DATA_Pin|CLOCK_Pin;
 8000356:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035a:	4855      	ldr	r0, [pc, #340]	@ (80004b0 <main+0x1d4>)
 800035c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035e:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000364:	f000 fa4e 	bl	8000804 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8000368:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 800036c:	4851      	ldr	r0, [pc, #324]	@ (80004b4 <main+0x1d8>)
  huart2.Init.BaudRate = 115200;
 800036e:	e9c0 6300 	strd	r6, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000372:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000374:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000378:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037c:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800037e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000380:	f001 f850 	bl	8001424 <HAL_UART_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	b108      	cbz	r0, 800038c <main+0xb0>
 8000388:	b672      	cpsid	i
  while (1)
 800038a:	e7fe      	b.n	800038a <main+0xae>
  hi2c1.Instance = I2C1;
 800038c:	484a      	ldr	r0, [pc, #296]	@ (80004b8 <main+0x1dc>)
  hi2c1.Init.ClockSpeed = 100000;
 800038e:	494b      	ldr	r1, [pc, #300]	@ (80004bc <main+0x1e0>)
 8000390:	4a4b      	ldr	r2, [pc, #300]	@ (80004c0 <main+0x1e4>)
  hi2c1.Init.OwnAddress1 = 0;
 8000392:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000396:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800039e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a8:	f000 fc02 	bl	8000bb0 <HAL_I2C_Init>
 80003ac:	4604      	mov	r4, r0
 80003ae:	b108      	cbz	r0, 80003b4 <main+0xd8>
 80003b0:	b672      	cpsid	i
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <main+0xd6>
  LCD_init();
 80003b4:	f001 f8b5 	bl	8001522 <LCD_init>
  LCD_backlight(1); // Turn on backlight
 80003b8:	4628      	mov	r0, r5
 80003ba:	f001 f8fd 	bl	80015b8 <LCD_backlight>
  main_menu_init();
 80003be:	f7ff ff37 	bl	8000230 <main_menu_init>
  SysTick_Config(SystemCoreClock/1000);
 80003c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003c6:	4b3f      	ldr	r3, [pc, #252]	@ (80004c4 <main+0x1e8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ce:	3b01      	subs	r3, #1
 80003d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80003d4:	d209      	bcs.n	80003ea <main+0x10e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003d6:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003da:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003dc:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003de:	4b3a      	ldr	r3, [pc, #232]	@ (80004c8 <main+0x1ec>)
 80003e0:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e6:	6194      	str	r4, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e8:	6113      	str	r3, [r2, #16]
{
 80003ea:	2400      	movs	r4, #0
	  else if(current_counter > previous_counter){
 80003ec:	4d37      	ldr	r5, [pc, #220]	@ (80004cc <main+0x1f0>)
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003ee:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 80004a8 <main+0x1cc>
	  current_counter = Switches_getCounter();
 80003f2:	4e37      	ldr	r6, [pc, #220]	@ (80004d0 <main+0x1f4>)
		  trigger++;
 80003f4:	4f37      	ldr	r7, [pc, #220]	@ (80004d4 <main+0x1f8>)
	  Switches_calcEncoder();
 80003f6:	f001 f8f7 	bl	80015e8 <Switches_calcEncoder>
	  current_counter = Switches_getCounter();
 80003fa:	f001 f943 	bl	8001684 <Switches_getCounter>
	  if(current_counter > 3){
 80003fe:	2803      	cmp	r0, #3
	  current_counter = Switches_getCounter();
 8000400:	7030      	strb	r0, [r6, #0]
	  if(current_counter > 3){
 8000402:	d915      	bls.n	8000430 <main+0x154>
		  Switches_setCounter(3);
 8000404:	2003      	movs	r0, #3
 8000406:	f001 f943 	bl	8001690 <Switches_setCounter>
		  current_counter = 3;
 800040a:	2303      	movs	r3, #3
 800040c:	7033      	strb	r3, [r6, #0]
	  if((HAL_GetTick() - prev_time) > 2000){
 800040e:	f000 f98b 	bl	8000728 <HAL_GetTick>
 8000412:	1b00      	subs	r0, r0, r4
 8000414:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8000418:	d9ed      	bls.n	80003f6 <main+0x11a>
		  prev_time = HAL_GetTick();
 800041a:	f000 f985 	bl	8000728 <HAL_GetTick>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800041e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
		  prev_time = HAL_GetTick();
 8000422:	4604      	mov	r4, r0
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000424:	4640      	mov	r0, r8
 8000426:	f000 faca 	bl	80009be <HAL_GPIO_TogglePin>
		  display_refresh();
 800042a:	f7ff feb7 	bl	800019c <display_refresh>
 800042e:	e7e0      	b.n	80003f2 <main+0x116>
	  else if(current_counter > previous_counter){
 8000430:	782b      	ldrb	r3, [r5, #0]
 8000432:	4298      	cmp	r0, r3
 8000434:	d91a      	bls.n	800046c <main+0x190>
		  trigger++;
 8000436:	783a      	ldrb	r2, [r7, #0]
		  if(trigger > head){
 8000438:	4927      	ldr	r1, [pc, #156]	@ (80004d8 <main+0x1fc>)
		  trigger++;
 800043a:	3201      	adds	r2, #1
		  if(trigger > head){
 800043c:	780b      	ldrb	r3, [r1, #0]
		  trigger++;
 800043e:	b2d2      	uxtb	r2, r2
		  if(trigger > head){
 8000440:	429a      	cmp	r2, r3
		  trigger++;
 8000442:	703a      	strb	r2, [r7, #0]
		  previous_counter = current_counter;
 8000444:	7028      	strb	r0, [r5, #0]
		  if(trigger > head){
 8000446:	4a25      	ldr	r2, [pc, #148]	@ (80004dc <main+0x200>)
 8000448:	d909      	bls.n	800045e <main+0x182>
			  tail++;
 800044a:	4825      	ldr	r0, [pc, #148]	@ (80004e0 <main+0x204>)
			  head++;
 800044c:	3301      	adds	r3, #1
 800044e:	b2db      	uxtb	r3, r3
 8000450:	700b      	strb	r3, [r1, #0]
			  tail++;
 8000452:	7801      	ldrb	r1, [r0, #0]
 8000454:	3101      	adds	r1, #1
 8000456:	7001      	strb	r1, [r0, #0]
			  content.line0_index = content.line1_index;
 8000458:	7851      	ldrb	r1, [r2, #1]
			  content.line1_index = head;
 800045a:	7053      	strb	r3, [r2, #1]
			  content.line0_index = content.line1_index;
 800045c:	7011      	strb	r1, [r2, #0]
		  if(content.sign_index == 0)
 800045e:	7893      	ldrb	r3, [r2, #2]
 8000460:	b90b      	cbnz	r3, 8000466 <main+0x18a>
			  content.sign_index=1;
 8000462:	2301      	movs	r3, #1
 8000464:	7093      	strb	r3, [r2, #2]
		  display_refresh();
 8000466:	f7ff fe99 	bl	800019c <display_refresh>
 800046a:	e7d0      	b.n	800040e <main+0x132>
	  else if(current_counter < previous_counter){
 800046c:	d2cf      	bcs.n	800040e <main+0x132>
		  trigger--;
 800046e:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <main+0x1f8>)
		  if(trigger < tail){
 8000470:	491b      	ldr	r1, [pc, #108]	@ (80004e0 <main+0x204>)
		  trigger--;
 8000472:	781a      	ldrb	r2, [r3, #0]
		  previous_counter = current_counter;
 8000474:	7028      	strb	r0, [r5, #0]
		  trigger--;
 8000476:	3a01      	subs	r2, #1
 8000478:	b2d2      	uxtb	r2, r2
 800047a:	701a      	strb	r2, [r3, #0]
		  if(trigger < tail){
 800047c:	780b      	ldrb	r3, [r1, #0]
 800047e:	429a      	cmp	r2, r3
 8000480:	4a16      	ldr	r2, [pc, #88]	@ (80004dc <main+0x200>)
 8000482:	d209      	bcs.n	8000498 <main+0x1bc>
			  head--;
 8000484:	4814      	ldr	r0, [pc, #80]	@ (80004d8 <main+0x1fc>)
			  tail--;
 8000486:	3b01      	subs	r3, #1
 8000488:	b2db      	uxtb	r3, r3
 800048a:	700b      	strb	r3, [r1, #0]
			  head--;
 800048c:	7801      	ldrb	r1, [r0, #0]
 800048e:	3901      	subs	r1, #1
 8000490:	7001      	strb	r1, [r0, #0]
			  content.line1_index = content.line0_index;
 8000492:	7811      	ldrb	r1, [r2, #0]
			  content.line0_index = tail;
 8000494:	7013      	strb	r3, [r2, #0]
			  content.line1_index = content.line0_index;
 8000496:	7051      	strb	r1, [r2, #1]
		  if(content.sign_index == 1)
 8000498:	7893      	ldrb	r3, [r2, #2]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d1e3      	bne.n	8000466 <main+0x18a>
			  content.sign_index = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	e7e0      	b.n	8000464 <main+0x188>
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40011000 	.word	0x40011000
 80004ac:	40004400 	.word	0x40004400
 80004b0:	40010c00 	.word	0x40010c00
 80004b4:	2000014c 	.word	0x2000014c
 80004b8:	20000194 	.word	0x20000194
 80004bc:	40005400 	.word	0x40005400
 80004c0:	000186a0 	.word	0x000186a0
 80004c4:	20000054 	.word	0x20000054
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	2000014a 	.word	0x2000014a
 80004d0:	2000014b 	.word	0x2000014b
 80004d4:	20000148 	.word	0x20000148
 80004d8:	20000050 	.word	0x20000050
 80004dc:	200000d0 	.word	0x200000d0
 80004e0:	20000149 	.word	0x20000149

080004e4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <HAL_MspInit+0x3c>)
{
 80004e6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e8:	699a      	ldr	r2, [r3, #24]
 80004ea:	f042 0201 	orr.w	r2, r2, #1
 80004ee:	619a      	str	r2, [r3, #24]
 80004f0:	699a      	ldr	r2, [r3, #24]
 80004f2:	f002 0201 	and.w	r2, r2, #1
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	69da      	ldr	r2, [r3, #28]
 80004fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000500:	61da      	str	r2, [r3, #28]
 8000502:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000504:	4a07      	ldr	r2, [pc, #28]	@ (8000524 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050e:	6853      	ldr	r3, [r2, #4]
 8000510:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000518:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	b002      	add	sp, #8
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40010000 	.word	0x40010000

08000528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000528:	b510      	push	{r4, lr}
 800052a:	4604      	mov	r4, r0
 800052c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	2210      	movs	r2, #16
 8000530:	2100      	movs	r1, #0
 8000532:	a802      	add	r0, sp, #8
 8000534:	f001 f8d2 	bl	80016dc <memset>
  if(hi2c->Instance==I2C1)
 8000538:	6822      	ldr	r2, [r4, #0]
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <HAL_I2C_MspInit+0x58>)
 800053c:	429a      	cmp	r2, r3
 800053e:	d11c      	bne.n	800057a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000540:	4c10      	ldr	r4, [pc, #64]	@ (8000584 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000542:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	4810      	ldr	r0, [pc, #64]	@ (8000588 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	61a3      	str	r3, [r4, #24]
 800054e:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000550:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	f003 0308 	and.w	r3, r3, #8
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800055a:	2312      	movs	r3, #18
 800055c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000560:	2303      	movs	r3, #3
 8000562:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	f000 f94e 	bl	8000804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000568:	69e3      	ldr	r3, [r4, #28]
 800056a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800056e:	61e3      	str	r3, [r4, #28]
 8000570:	69e3      	ldr	r3, [r4, #28]
 8000572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800057a:	b006      	add	sp, #24
 800057c:	bd10      	pop	{r4, pc}
 800057e:	bf00      	nop
 8000580:	40005400 	.word	0x40005400
 8000584:	40021000 	.word	0x40021000
 8000588:	40010c00 	.word	0x40010c00

0800058c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800058c:	b510      	push	{r4, lr}
 800058e:	4604      	mov	r4, r0
 8000590:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	2210      	movs	r2, #16
 8000594:	2100      	movs	r1, #0
 8000596:	a802      	add	r0, sp, #8
 8000598:	f001 f8a0 	bl	80016dc <memset>
  if(huart->Instance==USART2)
 800059c:	6822      	ldr	r2, [r4, #0]
 800059e:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <HAL_UART_MspInit+0x6c>)
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d126      	bne.n	80005f2 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a4:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 80005a8:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	4814      	ldr	r0, [pc, #80]	@ (80005fc <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80005b0:	61da      	str	r2, [r3, #28]
 80005b2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b6:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	699a      	ldr	r2, [r3, #24]
 80005c0:	f042 0204 	orr.w	r2, r2, #4
 80005c4:	619a      	str	r2, [r3, #24]
 80005c6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f000 f912 	bl	8000804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2108      	movs	r1, #8
 80005e2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f000 f909 	bl	8000804 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005f2:	b006      	add	sp, #24
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	bf00      	nop
 80005f8:	40004400 	.word	0x40004400
 80005fc:	40010800 	.word	0x40010800

08000600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler>

08000602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler>

08000604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler>

08000606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler>

08000608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <UsageFault_Handler>

0800060a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060a:	4770      	bx	lr

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800060c:	4770      	bx	lr

0800060e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800060e:	4770      	bx	lr

08000610 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 b87e 	b.w	8000710 <HAL_IncTick>

08000614 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000614:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <_sbrk+0x30>)
{
 8000616:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000618:	6811      	ldr	r1, [r2, #0]
{
 800061a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800061c:	b909      	cbnz	r1, 8000622 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800061e:	490a      	ldr	r1, [pc, #40]	@ (8000648 <_sbrk+0x34>)
 8000620:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000622:	6810      	ldr	r0, [r2, #0]
 8000624:	4909      	ldr	r1, [pc, #36]	@ (800064c <_sbrk+0x38>)
 8000626:	4c0a      	ldr	r4, [pc, #40]	@ (8000650 <_sbrk+0x3c>)
 8000628:	4403      	add	r3, r0
 800062a:	1b09      	subs	r1, r1, r4
 800062c:	428b      	cmp	r3, r1
 800062e:	d906      	bls.n	800063e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000630:	f001 f85c 	bl	80016ec <__errno>
 8000634:	230c      	movs	r3, #12
 8000636:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000638:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800063c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800063e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000640:	e7fc      	b.n	800063c <_sbrk+0x28>
 8000642:	bf00      	nop
 8000644:	200001e8 	.word	0x200001e8
 8000648:	20000340 	.word	0x20000340
 800064c:	20002800 	.word	0x20002800
 8000650:	00000400 	.word	0x00000400

08000654 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000654:	4770      	bx	lr
	...

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff fffc 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065e:	490c      	ldr	r1, [pc, #48]	@ (8000690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a09      	ldr	r2, [pc, #36]	@ (8000698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000674:	4c09      	ldr	r4, [pc, #36]	@ (800069c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f001 f839 	bl	80016f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fe29 	bl	80002dc <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000694:	080020b4 	.word	0x080020b4
  ldr r2, =_sbss
 8000698:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800069c:	20000340 	.word	0x20000340

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <HAL_InitTick+0x3c>)
{
 80006a8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80006b4:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <HAL_InitTick+0x40>)
 80006b6:	6810      	ldr	r0, [r2, #0]
 80006b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80006bc:	f000 f88e 	bl	80007dc <HAL_SYSTICK_Config>
 80006c0:	4604      	mov	r4, r0
 80006c2:	b958      	cbnz	r0, 80006dc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c4:	2d0f      	cmp	r5, #15
 80006c6:	d809      	bhi.n	80006dc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	4602      	mov	r2, r0
 80006ca:	4629      	mov	r1, r5
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f000 f854 	bl	800077c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d4:	4620      	mov	r0, r4
 80006d6:	4b04      	ldr	r3, [pc, #16]	@ (80006e8 <HAL_InitTick+0x44>)
 80006d8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
 80006de:	e7fc      	b.n	80006da <HAL_InitTick+0x36>
 80006e0:	20000058 	.word	0x20000058
 80006e4:	20000054 	.word	0x20000054
 80006e8:	2000005c 	.word	0x2000005c

080006ec <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4a07      	ldr	r2, [pc, #28]	@ (800070c <HAL_Init+0x20>)
{
 80006ee:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fa:	f000 f82d 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fe:	200f      	movs	r0, #15
 8000700:	f7ff ffd0 	bl	80006a4 <HAL_InitTick>
  HAL_MspInit();
 8000704:	f7ff feee 	bl	80004e4 <HAL_MspInit>
}
 8000708:	2000      	movs	r0, #0
 800070a:	bd08      	pop	{r3, pc}
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000710:	4a03      	ldr	r2, [pc, #12]	@ (8000720 <HAL_IncTick+0x10>)
 8000712:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <HAL_IncTick+0x14>)
 8000714:	6811      	ldr	r1, [r2, #0]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	440b      	add	r3, r1
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200001ec 	.word	0x200001ec
 8000724:	20000058 	.word	0x20000058

08000728 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000728:	4b01      	ldr	r3, [pc, #4]	@ (8000730 <HAL_GetTick+0x8>)
 800072a:	6818      	ldr	r0, [r3, #0]
}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	200001ec 	.word	0x200001ec

08000734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000734:	b538      	push	{r3, r4, r5, lr}
 8000736:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000738:	f7ff fff6 	bl	8000728 <HAL_GetTick>
 800073c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000740:	bf1e      	ittt	ne
 8000742:	4b04      	ldrne	r3, [pc, #16]	@ (8000754 <HAL_Delay+0x20>)
 8000744:	781b      	ldrbne	r3, [r3, #0]
 8000746:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000748:	f7ff ffee 	bl	8000728 <HAL_GetTick>
 800074c:	1b43      	subs	r3, r0, r5
 800074e:	42a3      	cmp	r3, r4
 8000750:	d3fa      	bcc.n	8000748 <HAL_Delay+0x14>
  {
  }
}
 8000752:	bd38      	pop	{r3, r4, r5, pc}
 8000754:	20000058 	.word	0x20000058

08000758 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000758:	4907      	ldr	r1, [pc, #28]	@ (8000778 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800075a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800075c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800075e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000762:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000766:	0412      	lsls	r2, r2, #16
 8000768:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800076c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000774:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	68dc      	ldr	r4, [r3, #12]
 8000782:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000786:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078c:	2b04      	cmp	r3, #4
 800078e:	bf28      	it	cs
 8000790:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000798:	bf94      	ite	ls
 800079a:	2400      	movls	r4, #0
 800079c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079e:	fa05 f303 	lsl.w	r3, r5, r3
 80007a2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a6:	40a5      	lsls	r5, r4
 80007a8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80007ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	bfac      	ite	ge
 80007b6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	4a07      	ldrlt	r2, [pc, #28]	@ (80007d8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	bfab      	itete	ge
 80007c4:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007d2:	bd30      	pop	{r4, r5, pc}
 80007d4:	e000ed00 	.word	0xe000ed00
 80007d8:	e000ed14 	.word	0xe000ed14

080007dc <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	3801      	subs	r0, #1
 80007de:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007e2:	d20b      	bcs.n	80007fc <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	21f0      	movs	r1, #240	@ 0xf0
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ec:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ee:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007fc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000808:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800080a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800080c:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 800098c <HAL_GPIO_Init+0x188>
 8000810:	4b5f      	ldr	r3, [pc, #380]	@ (8000990 <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 8000812:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8000994 <HAL_GPIO_Init+0x190>
 8000816:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8000998 <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081a:	680d      	ldr	r5, [r1, #0]
 800081c:	fa35 f406 	lsrs.w	r4, r5, r6
 8000820:	d102      	bne.n	8000828 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8000822:	b003      	add	sp, #12
 8000824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000828:	2701      	movs	r7, #1
 800082a:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082c:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 8000830:	ea37 0505 	bics.w	r5, r7, r5
 8000834:	d175      	bne.n	8000922 <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 8000836:	684d      	ldr	r5, [r1, #4]
 8000838:	2d03      	cmp	r5, #3
 800083a:	d806      	bhi.n	800084a <HAL_GPIO_Init+0x46>
 800083c:	3d01      	subs	r5, #1
 800083e:	2d02      	cmp	r5, #2
 8000840:	d87e      	bhi.n	8000940 <HAL_GPIO_Init+0x13c>
 8000842:	e8df f005 	tbb	[pc, r5]
 8000846:	948f      	.short	0x948f
 8000848:	9a          	.byte	0x9a
 8000849:	00          	.byte	0x00
 800084a:	2d12      	cmp	r5, #18
 800084c:	f000 8092 	beq.w	8000974 <HAL_GPIO_Init+0x170>
 8000850:	d869      	bhi.n	8000926 <HAL_GPIO_Init+0x122>
 8000852:	2d11      	cmp	r5, #17
 8000854:	f000 8088 	beq.w	8000968 <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000858:	2cff      	cmp	r4, #255	@ 0xff
 800085a:	bf98      	it	ls
 800085c:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800085e:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000862:	bf88      	it	hi
 8000864:	f100 0904 	addhi.w	r9, r0, #4
 8000868:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800086c:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000870:	bf88      	it	hi
 8000872:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000874:	fa0b fa05 	lsl.w	sl, fp, r5
 8000878:	ea27 070a 	bic.w	r7, r7, sl
 800087c:	fa02 f505 	lsl.w	r5, r2, r5
 8000880:	432f      	orrs	r7, r5
 8000882:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000886:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800088a:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 800088e:	d048      	beq.n	8000922 <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000890:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000894:	f026 0703 	bic.w	r7, r6, #3
 8000898:	f045 0501 	orr.w	r5, r5, #1
 800089c:	f8cc 5018 	str.w	r5, [ip, #24]
 80008a0:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80008a4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80008a8:	f005 0501 	and.w	r5, r5, #1
 80008ac:	9501      	str	r5, [sp, #4]
 80008ae:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008b2:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008b6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008b8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80008bc:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008be:	fa0b fb0a 	lsl.w	fp, fp, sl
 80008c2:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008c6:	4d35      	ldr	r5, [pc, #212]	@ (800099c <HAL_GPIO_Init+0x198>)
 80008c8:	42a8      	cmp	r0, r5
 80008ca:	d05a      	beq.n	8000982 <HAL_GPIO_Init+0x17e>
 80008cc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80008d0:	42a8      	cmp	r0, r5
 80008d2:	d058      	beq.n	8000986 <HAL_GPIO_Init+0x182>
 80008d4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80008d8:	42a8      	cmp	r0, r5
 80008da:	bf14      	ite	ne
 80008dc:	2503      	movne	r5, #3
 80008de:	2502      	moveq	r5, #2
 80008e0:	fa05 f50a 	lsl.w	r5, r5, sl
 80008e4:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80008e8:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80008ea:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ec:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80008f0:	bf14      	ite	ne
 80008f2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008f4:	43a5      	biceq	r5, r4
 80008f6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80008f8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008fa:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008fe:	bf14      	ite	ne
 8000900:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000902:	43a5      	biceq	r5, r4
 8000904:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000906:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000908:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800090c:	bf14      	ite	ne
 800090e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000910:	43a5      	biceq	r5, r4
 8000912:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000914:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000916:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800091a:	bf14      	ite	ne
 800091c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800091e:	43a5      	biceq	r5, r4
 8000920:	601d      	str	r5, [r3, #0]
	position++;
 8000922:	3601      	adds	r6, #1
 8000924:	e779      	b.n	800081a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000926:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80009a0 <HAL_GPIO_Init+0x19c>
 800092a:	454d      	cmp	r5, r9
 800092c:	d008      	beq.n	8000940 <HAL_GPIO_Init+0x13c>
 800092e:	d811      	bhi.n	8000954 <HAL_GPIO_Init+0x150>
 8000930:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8000934:	454d      	cmp	r5, r9
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0x13c>
 8000938:	4575      	cmp	r5, lr
 800093a:	d001      	beq.n	8000940 <HAL_GPIO_Init+0x13c>
 800093c:	4545      	cmp	r5, r8
 800093e:	d18b      	bne.n	8000858 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000940:	688a      	ldr	r2, [r1, #8]
 8000942:	b1e2      	cbz	r2, 800097e <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000944:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000946:	bf08      	it	eq
 8000948:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800094a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800094e:	bf18      	it	ne
 8000950:	6147      	strne	r7, [r0, #20]
 8000952:	e781      	b.n	8000858 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8000954:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 80009a4 <HAL_GPIO_Init+0x1a0>
 8000958:	454d      	cmp	r5, r9
 800095a:	d0f1      	beq.n	8000940 <HAL_GPIO_Init+0x13c>
 800095c:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8000960:	454d      	cmp	r5, r9
 8000962:	e7ec      	b.n	800093e <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000964:	68ca      	ldr	r2, [r1, #12]
          break;
 8000966:	e777      	b.n	8000858 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000968:	68ca      	ldr	r2, [r1, #12]
 800096a:	3204      	adds	r2, #4
          break;
 800096c:	e774      	b.n	8000858 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800096e:	68ca      	ldr	r2, [r1, #12]
 8000970:	3208      	adds	r2, #8
          break;
 8000972:	e771      	b.n	8000858 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000974:	68ca      	ldr	r2, [r1, #12]
 8000976:	320c      	adds	r2, #12
          break;
 8000978:	e76e      	b.n	8000858 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800097a:	2200      	movs	r2, #0
 800097c:	e76c      	b.n	8000858 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800097e:	2204      	movs	r2, #4
 8000980:	e76a      	b.n	8000858 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000982:	2500      	movs	r5, #0
 8000984:	e7ac      	b.n	80008e0 <HAL_GPIO_Init+0xdc>
 8000986:	2501      	movs	r5, #1
 8000988:	e7aa      	b.n	80008e0 <HAL_GPIO_Init+0xdc>
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	40010400 	.word	0x40010400
 8000994:	10210000 	.word	0x10210000
 8000998:	10110000 	.word	0x10110000
 800099c:	40010800 	.word	0x40010800
 80009a0:	10220000 	.word	0x10220000
 80009a4:	10310000 	.word	0x10310000

080009a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80009a8:	6883      	ldr	r3, [r0, #8]
 80009aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80009ac:	bf14      	ite	ne
 80009ae:	2001      	movne	r0, #1
 80009b0:	2000      	moveq	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009b4:	b10a      	cbz	r2, 80009ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009b6:	6101      	str	r1, [r0, #16]
  }
}
 80009b8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ba:	0409      	lsls	r1, r1, #16
 80009bc:	e7fb      	b.n	80009b6 <HAL_GPIO_WritePin+0x2>

080009be <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009be:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009c0:	ea01 0203 	and.w	r2, r1, r3
 80009c4:	ea21 0103 	bic.w	r1, r1, r3
 80009c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80009cc:	6101      	str	r1, [r0, #16]
}
 80009ce:	4770      	bx	lr

080009d0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009d0:	6801      	ldr	r1, [r0, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	694b      	ldr	r3, [r1, #20]
 80009d6:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 80009da:	d010      	beq.n	80009fe <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80009dc:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80009e0:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80009e2:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80009e4:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80009e6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009ea:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80009ee:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009f0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 80009fa:	2001      	movs	r0, #1
 80009fc:	4770      	bx	lr
  }
  return HAL_OK;
 80009fe:	4618      	mov	r0, r3
}
 8000a00:	4770      	bx	lr

08000a02 <I2C_WaitOnFlagUntilTimeout>:
{
 8000a02:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8000a06:	4606      	mov	r6, r0
 8000a08:	460f      	mov	r7, r1
 8000a0a:	4691      	mov	r9, r2
 8000a0c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8000a12:	6833      	ldr	r3, [r6, #0]
 8000a14:	f1ba 0f01 	cmp.w	sl, #1
 8000a18:	bf0c      	ite	eq
 8000a1a:	695c      	ldreq	r4, [r3, #20]
 8000a1c:	699c      	ldrne	r4, [r3, #24]
 8000a1e:	ea27 0404 	bic.w	r4, r7, r4
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fab4 f484 	clz	r4, r4
 8000a28:	0964      	lsrs	r4, r4, #5
 8000a2a:	45a1      	cmp	r9, r4
 8000a2c:	d001      	beq.n	8000a32 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8000a2e:	2000      	movs	r0, #0
 8000a30:	e025      	b.n	8000a7e <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8000a32:	1c6a      	adds	r2, r5, #1
 8000a34:	d0ee      	beq.n	8000a14 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a36:	f7ff fe77 	bl	8000728 <HAL_GetTick>
 8000a3a:	9b08      	ldr	r3, [sp, #32]
 8000a3c:	1ac0      	subs	r0, r0, r3
 8000a3e:	42a8      	cmp	r0, r5
 8000a40:	d801      	bhi.n	8000a46 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d1e5      	bne.n	8000a12 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000a46:	6833      	ldr	r3, [r6, #0]
 8000a48:	f1ba 0f01 	cmp.w	sl, #1
 8000a4c:	bf0c      	ite	eq
 8000a4e:	695b      	ldreq	r3, [r3, #20]
 8000a50:	699b      	ldrne	r3, [r3, #24]
 8000a52:	ea27 0303 	bic.w	r3, r7, r3
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	fab3 f383 	clz	r3, r3
 8000a5c:	095b      	lsrs	r3, r3, #5
 8000a5e:	4599      	cmp	r9, r3
 8000a60:	d1d7      	bne.n	8000a12 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8000a62:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8000a64:	2220      	movs	r2, #32
          return HAL_ERROR;
 8000a66:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8000a68:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8000a6a:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000a6e:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000a72:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000a74:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000a78:	f042 0220 	orr.w	r2, r2, #32
 8000a7c:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8000a7e:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08000a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a86:	4604      	mov	r4, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	4616      	mov	r6, r2
 8000a8c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000a8e:	6825      	ldr	r5, [r4, #0]
 8000a90:	6968      	ldr	r0, [r5, #20]
 8000a92:	ea27 0000 	bic.w	r0, r7, r0
 8000a96:	b280      	uxth	r0, r0
 8000a98:	b1c0      	cbz	r0, 8000acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a9a:	696b      	ldr	r3, [r5, #20]
 8000a9c:	055a      	lsls	r2, r3, #21
 8000a9e:	d517      	bpl.n	8000ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000aa0:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000aa2:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000aa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000aaa:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8000aae:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ab4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ab8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000abc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000abe:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ac2:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000ac4:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000ac6:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8000ac8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8000acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ad0:	1c73      	adds	r3, r6, #1
 8000ad2:	d0dd      	beq.n	8000a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ad4:	f7ff fe28 	bl	8000728 <HAL_GetTick>
 8000ad8:	eba0 0008 	sub.w	r0, r0, r8
 8000adc:	42b0      	cmp	r0, r6
 8000ade:	d801      	bhi.n	8000ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	d1d4      	bne.n	8000a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	ea27 0202 	bic.w	r2, r7, r2
 8000aec:	b292      	uxth	r2, r2
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d0cd      	beq.n	8000a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000af2:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8000af4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000af6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000af8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000afc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b02:	4313      	orrs	r3, r2
 8000b04:	e7dd      	b.n	8000ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08000b06 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000b06:	b570      	push	{r4, r5, r6, lr}
 8000b08:	4604      	mov	r4, r0
 8000b0a:	460d      	mov	r5, r1
 8000b0c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	061b      	lsls	r3, r3, #24
 8000b14:	d501      	bpl.n	8000b1a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000b16:	2000      	movs	r0, #0
 8000b18:	e01e      	b.n	8000b58 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f7ff ff58 	bl	80009d0 <I2C_IsAcknowledgeFailed>
 8000b20:	b9c8      	cbnz	r0, 8000b56 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000b22:	1c6a      	adds	r2, r5, #1
 8000b24:	d0f3      	beq.n	8000b0e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b26:	f7ff fdff 	bl	8000728 <HAL_GetTick>
 8000b2a:	1b80      	subs	r0, r0, r6
 8000b2c:	42a8      	cmp	r0, r5
 8000b2e:	d801      	bhi.n	8000b34 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d1ec      	bne.n	8000b0e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8000b3c:	d1e7      	bne.n	8000b0e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b3e:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000b40:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b42:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b4a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000b4c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b50:	f042 0220 	orr.w	r2, r2, #32
 8000b54:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8000b56:	2001      	movs	r0, #1
}
 8000b58:	bd70      	pop	{r4, r5, r6, pc}

08000b5a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000b5a:	b570      	push	{r4, r5, r6, lr}
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	460d      	mov	r5, r1
 8000b60:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	075b      	lsls	r3, r3, #29
 8000b68:	d501      	bpl.n	8000b6e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e01e      	b.n	8000bac <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f7ff ff2e 	bl	80009d0 <I2C_IsAcknowledgeFailed>
 8000b74:	b9c8      	cbnz	r0, 8000baa <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000b76:	1c6a      	adds	r2, r5, #1
 8000b78:	d0f3      	beq.n	8000b62 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b7a:	f7ff fdd5 	bl	8000728 <HAL_GetTick>
 8000b7e:	1b80      	subs	r0, r0, r6
 8000b80:	42a8      	cmp	r0, r5
 8000b82:	d801      	bhi.n	8000b88 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d1ec      	bne.n	8000b62 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	f013 0304 	ands.w	r3, r3, #4
 8000b90:	d1e7      	bne.n	8000b62 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b92:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000b94:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b96:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b9a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000ba0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ba4:	f042 0220 	orr.w	r2, r2, #32
 8000ba8:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8000baa:	2001      	movs	r0, #1
}
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08000bb0 <HAL_I2C_Init>:
{
 8000bb0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	b908      	cbnz	r0, 8000bba <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000bb6:	2001      	movs	r0, #1
}
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000bbe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000bc2:	b91b      	cbnz	r3, 8000bcc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000bc4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8000bc8:	f7ff fcae 	bl	8000528 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bcc:	2324      	movs	r3, #36	@ 0x24
 8000bce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f022 0201 	bic.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bea:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bec:	f000 fbc0 	bl	8001370 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf0 <HAL_I2C_Init+0x140>)
 8000bf2:	6865      	ldr	r5, [r4, #4]
 8000bf4:	429d      	cmp	r5, r3
 8000bf6:	bf94      	ite	ls
 8000bf8:	4b3e      	ldrls	r3, [pc, #248]	@ (8000cf4 <HAL_I2C_Init+0x144>)
 8000bfa:	4b3f      	ldrhi	r3, [pc, #252]	@ (8000cf8 <HAL_I2C_Init+0x148>)
 8000bfc:	4298      	cmp	r0, r3
 8000bfe:	bf8c      	ite	hi
 8000c00:	2300      	movhi	r3, #0
 8000c02:	2301      	movls	r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1d6      	bne.n	8000bb6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c08:	4e39      	ldr	r6, [pc, #228]	@ (8000cf0 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000cfc <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c0c:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8000c0e:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c12:	bf88      	it	hi
 8000c14:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c18:	6822      	ldr	r2, [r4, #0]
 8000c1a:	6851      	ldr	r1, [r2, #4]
 8000c1c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000c20:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c24:	bf82      	ittt	hi
 8000c26:	4373      	mulhi	r3, r6
 8000c28:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8000c2c:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c30:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c32:	6a11      	ldr	r1, [r2, #32]
 8000c34:	3301      	adds	r3, #1
 8000c36:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000c3a:	430b      	orrs	r3, r1
 8000c3c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c3e:	69d1      	ldr	r1, [r2, #28]
 8000c40:	1e43      	subs	r3, r0, #1
 8000c42:	482b      	ldr	r0, [pc, #172]	@ (8000cf0 <HAL_I2C_Init+0x140>)
 8000c44:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8000c48:	4285      	cmp	r5, r0
 8000c4a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000c4e:	d832      	bhi.n	8000cb6 <HAL_I2C_Init+0x106>
 8000c50:	006d      	lsls	r5, r5, #1
 8000c52:	fbb3 f3f5 	udiv	r3, r3, r5
 8000c56:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4203      	tst	r3, r0
 8000c5e:	d042      	beq.n	8000ce6 <HAL_I2C_Init+0x136>
 8000c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c64:	4319      	orrs	r1, r3
 8000c66:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000c68:	6811      	ldr	r1, [r2, #0]
 8000c6a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8000c6e:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8000c72:	4303      	orrs	r3, r0
 8000c74:	430b      	orrs	r3, r1
 8000c76:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000c78:	6891      	ldr	r1, [r2, #8]
 8000c7a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8000c7e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8000c82:	4303      	orrs	r3, r0
 8000c84:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c8c:	68d1      	ldr	r1, [r2, #12]
 8000c8e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8000c92:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000c96:	4303      	orrs	r3, r0
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000c9c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c9e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000ca6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca8:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000caa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cae:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cb0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8000cb4:	e780      	b.n	8000bb8 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cb6:	68a0      	ldr	r0, [r4, #8]
 8000cb8:	b950      	cbnz	r0, 8000cd0 <HAL_I2C_Init+0x120>
 8000cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000cbe:	fbb3 f3f5 	udiv	r3, r3, r5
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc8:	b17b      	cbz	r3, 8000cea <HAL_I2C_Init+0x13a>
 8000cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cce:	e7c9      	b.n	8000c64 <HAL_I2C_Init+0xb4>
 8000cd0:	2019      	movs	r0, #25
 8000cd2:	4368      	muls	r0, r5
 8000cd4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cde:	b123      	cbz	r3, 8000cea <HAL_I2C_Init+0x13a>
 8000ce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce4:	e7be      	b.n	8000c64 <HAL_I2C_Init+0xb4>
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	e7bc      	b.n	8000c64 <HAL_I2C_Init+0xb4>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e7ba      	b.n	8000c64 <HAL_I2C_Init+0xb4>
 8000cee:	bf00      	nop
 8000cf0:	000186a0 	.word	0x000186a0
 8000cf4:	001e847f 	.word	0x001e847f
 8000cf8:	003d08ff 	.word	0x003d08ff
 8000cfc:	000f4240 	.word	0x000f4240

08000d00 <HAL_I2C_Master_Transmit>:
{
 8000d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d04:	4604      	mov	r4, r0
 8000d06:	b085      	sub	sp, #20
 8000d08:	4698      	mov	r8, r3
 8000d0a:	460d      	mov	r5, r1
 8000d0c:	4691      	mov	r9, r2
 8000d0e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fd0a 	bl	8000728 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d14:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8000d18:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d1a:	2b20      	cmp	r3, #32
 8000d1c:	d004      	beq.n	8000d28 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8000d1e:	2502      	movs	r5, #2
}
 8000d20:	4628      	mov	r0, r5
 8000d22:	b005      	add	sp, #20
 8000d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d28:	9000      	str	r0, [sp, #0]
 8000d2a:	2319      	movs	r3, #25
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4620      	mov	r0, r4
 8000d30:	495c      	ldr	r1, [pc, #368]	@ (8000ea4 <HAL_I2C_Master_Transmit+0x1a4>)
 8000d32:	f7ff fe66 	bl	8000a02 <I2C_WaitOnFlagUntilTimeout>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d1f1      	bne.n	8000d1e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8000d3a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d0ed      	beq.n	8000d1e <HAL_I2C_Master_Transmit+0x1e>
 8000d42:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d44:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8000d46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d4a:	680b      	ldr	r3, [r1, #0]
 8000d4c:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8000d4e:	bf5e      	ittt	pl
 8000d50:	680b      	ldrpl	r3, [r1, #0]
 8000d52:	f043 0301 	orrpl.w	r3, r3, #1
 8000d56:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d58:	680b      	ldr	r3, [r1, #0]
 8000d5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d5e:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000d60:	2321      	movs	r3, #33	@ 0x21
 8000d62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000d66:	2310      	movs	r3, #16
 8000d68:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8000d70:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000d74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8000d76:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000d7a:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea8 <HAL_I2C_Master_Transmit+0x1a8>)
 8000d7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000d80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d004      	beq.n	8000d90 <HAL_I2C_Master_Transmit+0x90>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <HAL_I2C_Master_Transmit+0x90>
 8000d8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8000d8e:	d104      	bne.n	8000d9a <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000d90:	680b      	ldr	r3, [r1, #0]
 8000d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d96:	600b      	str	r3, [r1, #0]
 8000d98:	e002      	b.n	8000da0 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000d9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d9c:	2b12      	cmp	r3, #18
 8000d9e:	d0f7      	beq.n	8000d90 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000da0:	2200      	movs	r2, #0
 8000da2:	463b      	mov	r3, r7
 8000da4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000da8:	4620      	mov	r0, r4
 8000daa:	9600      	str	r6, [sp, #0]
 8000dac:	f7ff fe29 	bl	8000a02 <I2C_WaitOnFlagUntilTimeout>
 8000db0:	6822      	ldr	r2, [r4, #0]
 8000db2:	b140      	cbz	r0, 8000dc6 <HAL_I2C_Master_Transmit+0xc6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000db4:	6813      	ldr	r3, [r2, #0]
 8000db6:	05db      	lsls	r3, r3, #23
 8000db8:	d401      	bmi.n	8000dbe <HAL_I2C_Master_Transmit+0xbe>
      return HAL_ERROR;
 8000dba:	2501      	movs	r5, #1
 8000dbc:	e7b0      	b.n	8000d20 <HAL_I2C_Master_Transmit+0x20>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000dbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc2:	6423      	str	r3, [r4, #64]	@ 0x40
 8000dc4:	e7f9      	b.n	8000dba <HAL_I2C_Master_Transmit+0xba>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dc6:	6923      	ldr	r3, [r4, #16]
 8000dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000dcc:	d121      	bne.n	8000e12 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000dce:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8000dd2:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000dd4:	4633      	mov	r3, r6
 8000dd6:	463a      	mov	r2, r7
 8000dd8:	4620      	mov	r0, r4
 8000dda:	4934      	ldr	r1, [pc, #208]	@ (8000eac <HAL_I2C_Master_Transmit+0x1ac>)
 8000ddc:	f7ff fe51 	bl	8000a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000de0:	4605      	mov	r5, r0
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d1e9      	bne.n	8000dba <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	9003      	str	r0, [sp, #12]
 8000dea:	695a      	ldr	r2, [r3, #20]
 8000dec:	9203      	str	r2, [sp, #12]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	9303      	str	r3, [sp, #12]
 8000df2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000df4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8000df6:	b9f3      	cbnz	r3, 8000e36 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000df8:	6821      	ldr	r1, [r4, #0]
 8000dfa:	680a      	ldr	r2, [r1, #0]
 8000dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e00:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e02:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000e04:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000e08:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e0c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8000e10:	e786      	b.n	8000d20 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000e12:	11eb      	asrs	r3, r5, #7
 8000e14:	f003 0306 	and.w	r3, r3, #6
 8000e18:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000e1c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000e1e:	4620      	mov	r0, r4
 8000e20:	4633      	mov	r3, r6
 8000e22:	463a      	mov	r2, r7
 8000e24:	4922      	ldr	r1, [pc, #136]	@ (8000eb0 <HAL_I2C_Master_Transmit+0x1b0>)
 8000e26:	f7ff fe2c 	bl	8000a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d1c5      	bne.n	8000dba <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	b2ed      	uxtb	r5, r5
 8000e32:	611d      	str	r5, [r3, #16]
 8000e34:	e7ce      	b.n	8000dd4 <HAL_I2C_Master_Transmit+0xd4>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e36:	4632      	mov	r2, r6
 8000e38:	4639      	mov	r1, r7
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f7ff fe63 	bl	8000b06 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e40:	b140      	cbz	r0, 8000e54 <HAL_I2C_Master_Transmit+0x154>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d1b8      	bne.n	8000dba <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e48:	6822      	ldr	r2, [r4, #0]
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e7b2      	b.n	8000dba <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000e56:	6820      	ldr	r0, [r4, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000e5e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000e60:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8000e62:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8000e64:	3a01      	subs	r2, #1
 8000e66:	b292      	uxth	r2, r2
 8000e68:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8000e6a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e6c:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8000e70:	1e51      	subs	r1, r2, #1
 8000e72:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e74:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8000e78:	8521      	strh	r1, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e7a:	d00a      	beq.n	8000e92 <HAL_I2C_Master_Transmit+0x192>
 8000e7c:	b149      	cbz	r1, 8000e92 <HAL_I2C_Master_Transmit+0x192>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e7e:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8000e80:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e82:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000e84:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8000e86:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8000e88:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8000e90:	8522      	strh	r2, [r4, #40]	@ 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e92:	4632      	mov	r2, r6
 8000e94:	4639      	mov	r1, r7
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff fe5f 	bl	8000b5a <I2C_WaitOnBTFFlagUntilTimeout>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d0a9      	beq.n	8000df4 <HAL_I2C_Master_Transmit+0xf4>
 8000ea0:	e7cf      	b.n	8000e42 <HAL_I2C_Master_Transmit+0x142>
 8000ea2:	bf00      	nop
 8000ea4:	00100002 	.word	0x00100002
 8000ea8:	ffff0000 	.word	0xffff0000
 8000eac:	00010002 	.word	0x00010002
 8000eb0:	00010008 	.word	0x00010008

08000eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb8:	4605      	mov	r5, r0
 8000eba:	b338      	cbz	r0, 8000f0c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebc:	6803      	ldr	r3, [r0, #0]
 8000ebe:	07db      	lsls	r3, r3, #31
 8000ec0:	d410      	bmi.n	8000ee4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec2:	682b      	ldr	r3, [r5, #0]
 8000ec4:	079f      	lsls	r7, r3, #30
 8000ec6:	d45e      	bmi.n	8000f86 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	0719      	lsls	r1, r3, #28
 8000ecc:	f100 8095 	bmi.w	8000ffa <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	075a      	lsls	r2, r3, #29
 8000ed4:	f100 80c1 	bmi.w	800105a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ed8:	69eb      	ldr	r3, [r5, #28]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 812c 	bne.w	8001138 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	e029      	b.n	8000f38 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee4:	4c90      	ldr	r4, [pc, #576]	@ (8001128 <HAL_RCC_OscConfig+0x274>)
 8000ee6:	6863      	ldr	r3, [r4, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d007      	beq.n	8000f00 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef0:	6863      	ldr	r3, [r4, #4]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d10a      	bne.n	8000f10 <HAL_RCC_OscConfig+0x5c>
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	03de      	lsls	r6, r3, #15
 8000efe:	d507      	bpl.n	8000f10 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	039c      	lsls	r4, r3, #14
 8000f04:	d5dd      	bpl.n	8000ec2 <HAL_RCC_OscConfig+0xe>
 8000f06:	686b      	ldr	r3, [r5, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1da      	bne.n	8000ec2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	e013      	b.n	8000f38 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f10:	686b      	ldr	r3, [r5, #4]
 8000f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f16:	d112      	bne.n	8000f3e <HAL_RCC_OscConfig+0x8a>
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f1e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc02 	bl	8000728 <HAL_GetTick>
 8000f24:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	0398      	lsls	r0, r3, #14
 8000f2a:	d4ca      	bmi.n	8000ec2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fbfc 	bl	8000728 <HAL_GetTick>
 8000f30:	1b80      	subs	r0, r0, r6
 8000f32:	2864      	cmp	r0, #100	@ 0x64
 8000f34:	d9f7      	bls.n	8000f26 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000f36:	2003      	movs	r0, #3
}
 8000f38:	b002      	add	sp, #8
 8000f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3e:	b99b      	cbnz	r3, 8000f68 <HAL_RCC_OscConfig+0xb4>
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f46:	6023      	str	r3, [r4, #0]
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f4e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f50:	f7ff fbea 	bl	8000728 <HAL_GetTick>
 8000f54:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	0399      	lsls	r1, r3, #14
 8000f5a:	d5b2      	bpl.n	8000ec2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fbe4 	bl	8000728 <HAL_GetTick>
 8000f60:	1b80      	subs	r0, r0, r6
 8000f62:	2864      	cmp	r0, #100	@ 0x64
 8000f64:	d9f7      	bls.n	8000f56 <HAL_RCC_OscConfig+0xa2>
 8000f66:	e7e6      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	d103      	bne.n	8000f78 <HAL_RCC_OscConfig+0xc4>
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f74:	6023      	str	r3, [r4, #0]
 8000f76:	e7cf      	b.n	8000f18 <HAL_RCC_OscConfig+0x64>
 8000f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f7c:	6023      	str	r3, [r4, #0]
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f84:	e7cb      	b.n	8000f1e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f86:	4c68      	ldr	r4, [pc, #416]	@ (8001128 <HAL_RCC_OscConfig+0x274>)
 8000f88:	6863      	ldr	r3, [r4, #4]
 8000f8a:	f013 0f0c 	tst.w	r3, #12
 8000f8e:	d007      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d110      	bne.n	8000fbc <HAL_RCC_OscConfig+0x108>
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	03da      	lsls	r2, r3, #15
 8000f9e:	d40d      	bmi.n	8000fbc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	079b      	lsls	r3, r3, #30
 8000fa4:	d502      	bpl.n	8000fac <HAL_RCC_OscConfig+0xf8>
 8000fa6:	692b      	ldr	r3, [r5, #16]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d1af      	bne.n	8000f0c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	696a      	ldr	r2, [r5, #20]
 8000fb0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000fb4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	e785      	b.n	8000ec8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbc:	692a      	ldr	r2, [r5, #16]
 8000fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800112c <HAL_RCC_OscConfig+0x278>)
 8000fc0:	b16a      	cbz	r2, 8000fde <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fbaf 	bl	8000728 <HAL_GetTick>
 8000fca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	079f      	lsls	r7, r3, #30
 8000fd0:	d4ec      	bmi.n	8000fac <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fba9 	bl	8000728 <HAL_GetTick>
 8000fd6:	1b80      	subs	r0, r0, r6
 8000fd8:	2802      	cmp	r0, #2
 8000fda:	d9f7      	bls.n	8000fcc <HAL_RCC_OscConfig+0x118>
 8000fdc:	e7ab      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8000fde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fba2 	bl	8000728 <HAL_GetTick>
 8000fe4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	0798      	lsls	r0, r3, #30
 8000fea:	f57f af6d 	bpl.w	8000ec8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fee:	f7ff fb9b 	bl	8000728 <HAL_GetTick>
 8000ff2:	1b80      	subs	r0, r0, r6
 8000ff4:	2802      	cmp	r0, #2
 8000ff6:	d9f6      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x132>
 8000ff8:	e79d      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ffa:	69aa      	ldr	r2, [r5, #24]
 8000ffc:	4e4a      	ldr	r6, [pc, #296]	@ (8001128 <HAL_RCC_OscConfig+0x274>)
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800112c <HAL_RCC_OscConfig+0x278>)
 8001000:	b1e2      	cbz	r2, 800103c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001002:	2201      	movs	r2, #1
 8001004:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001008:	f7ff fb8e 	bl	8000728 <HAL_GetTick>
 800100c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001010:	079b      	lsls	r3, r3, #30
 8001012:	d50d      	bpl.n	8001030 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001014:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001018:	4b45      	ldr	r3, [pc, #276]	@ (8001130 <HAL_RCC_OscConfig+0x27c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001020:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001022:	bf00      	nop
  }
  while (Delay --);
 8001024:	9b01      	ldr	r3, [sp, #4]
 8001026:	1e5a      	subs	r2, r3, #1
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f9      	bne.n	8001022 <HAL_RCC_OscConfig+0x16e>
 800102e:	e74f      	b.n	8000ed0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fb7a 	bl	8000728 <HAL_GetTick>
 8001034:	1b00      	subs	r0, r0, r4
 8001036:	2802      	cmp	r0, #2
 8001038:	d9e9      	bls.n	800100e <HAL_RCC_OscConfig+0x15a>
 800103a:	e77c      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800103c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001040:	f7ff fb72 	bl	8000728 <HAL_GetTick>
 8001044:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001046:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001048:	079f      	lsls	r7, r3, #30
 800104a:	f57f af41 	bpl.w	8000ed0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800104e:	f7ff fb6b 	bl	8000728 <HAL_GetTick>
 8001052:	1b00      	subs	r0, r0, r4
 8001054:	2802      	cmp	r0, #2
 8001056:	d9f6      	bls.n	8001046 <HAL_RCC_OscConfig+0x192>
 8001058:	e76d      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105a:	4c33      	ldr	r4, [pc, #204]	@ (8001128 <HAL_RCC_OscConfig+0x274>)
 800105c:	69e3      	ldr	r3, [r4, #28]
 800105e:	00d8      	lsls	r0, r3, #3
 8001060:	d424      	bmi.n	80010ac <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001062:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	69e3      	ldr	r3, [r4, #28]
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106a:	61e3      	str	r3, [r4, #28]
 800106c:	69e3      	ldr	r3, [r4, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4e2f      	ldr	r6, [pc, #188]	@ (8001134 <HAL_RCC_OscConfig+0x280>)
 8001078:	6833      	ldr	r3, [r6, #0]
 800107a:	05d9      	lsls	r1, r3, #23
 800107c:	d518      	bpl.n	80010b0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107e:	68eb      	ldr	r3, [r5, #12]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d126      	bne.n	80010d2 <HAL_RCC_OscConfig+0x21e>
 8001084:	6a23      	ldr	r3, [r4, #32]
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800108c:	f7ff fb4c 	bl	8000728 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001090:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001094:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001096:	6a23      	ldr	r3, [r4, #32]
 8001098:	079b      	lsls	r3, r3, #30
 800109a:	d53f      	bpl.n	800111c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800109c:	2f00      	cmp	r7, #0
 800109e:	f43f af1b 	beq.w	8000ed8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a2:	69e3      	ldr	r3, [r4, #28]
 80010a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	61e3      	str	r3, [r4, #28]
 80010aa:	e715      	b.n	8000ed8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80010ac:	2700      	movs	r7, #0
 80010ae:	e7e2      	b.n	8001076 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b0:	6833      	ldr	r3, [r6, #0]
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010b8:	f7ff fb36 	bl	8000728 <HAL_GetTick>
 80010bc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010be:	6833      	ldr	r3, [r6, #0]
 80010c0:	05da      	lsls	r2, r3, #23
 80010c2:	d4dc      	bmi.n	800107e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c4:	f7ff fb30 	bl	8000728 <HAL_GetTick>
 80010c8:	eba0 0008 	sub.w	r0, r0, r8
 80010cc:	2864      	cmp	r0, #100	@ 0x64
 80010ce:	d9f6      	bls.n	80010be <HAL_RCC_OscConfig+0x20a>
 80010d0:	e731      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d2:	b9ab      	cbnz	r3, 8001100 <HAL_RCC_OscConfig+0x24c>
 80010d4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6223      	str	r3, [r4, #32]
 80010e0:	6a23      	ldr	r3, [r4, #32]
 80010e2:	f023 0304 	bic.w	r3, r3, #4
 80010e6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010e8:	f7ff fb1e 	bl	8000728 <HAL_GetTick>
 80010ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ee:	6a23      	ldr	r3, [r4, #32]
 80010f0:	0798      	lsls	r0, r3, #30
 80010f2:	d5d3      	bpl.n	800109c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f4:	f7ff fb18 	bl	8000728 <HAL_GetTick>
 80010f8:	1b80      	subs	r0, r0, r6
 80010fa:	4540      	cmp	r0, r8
 80010fc:	d9f7      	bls.n	80010ee <HAL_RCC_OscConfig+0x23a>
 80010fe:	e71a      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001100:	2b05      	cmp	r3, #5
 8001102:	6a23      	ldr	r3, [r4, #32]
 8001104:	d103      	bne.n	800110e <HAL_RCC_OscConfig+0x25a>
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6223      	str	r3, [r4, #32]
 800110c:	e7ba      	b.n	8001084 <HAL_RCC_OscConfig+0x1d0>
 800110e:	f023 0301 	bic.w	r3, r3, #1
 8001112:	6223      	str	r3, [r4, #32]
 8001114:	6a23      	ldr	r3, [r4, #32]
 8001116:	f023 0304 	bic.w	r3, r3, #4
 800111a:	e7b6      	b.n	800108a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111c:	f7ff fb04 	bl	8000728 <HAL_GetTick>
 8001120:	1b80      	subs	r0, r0, r6
 8001122:	4540      	cmp	r0, r8
 8001124:	d9b7      	bls.n	8001096 <HAL_RCC_OscConfig+0x1e2>
 8001126:	e706      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
 8001128:	40021000 	.word	0x40021000
 800112c:	42420000 	.word	0x42420000
 8001130:	20000054 	.word	0x20000054
 8001134:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001138:	4c2a      	ldr	r4, [pc, #168]	@ (80011e4 <HAL_RCC_OscConfig+0x330>)
 800113a:	6862      	ldr	r2, [r4, #4]
 800113c:	f002 020c 	and.w	r2, r2, #12
 8001140:	2a08      	cmp	r2, #8
 8001142:	d03e      	beq.n	80011c2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	2200      	movs	r2, #0
 8001146:	2b02      	cmp	r3, #2
 8001148:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800114a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800114c:	d12c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800114e:	f7ff faeb 	bl	8000728 <HAL_GetTick>
 8001152:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	0199      	lsls	r1, r3, #6
 8001158:	d420      	bmi.n	800119c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800115a:	6a2b      	ldr	r3, [r5, #32]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001160:	d105      	bne.n	800116e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001162:	6862      	ldr	r2, [r4, #4]
 8001164:	68a9      	ldr	r1, [r5, #8]
 8001166:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800116a:	430a      	orrs	r2, r1
 800116c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800116e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001170:	6862      	ldr	r2, [r4, #4]
 8001172:	430b      	orrs	r3, r1
 8001174:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001178:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800117a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800117c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <HAL_RCC_OscConfig+0x334>)
 8001180:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001182:	f7ff fad1 	bl	8000728 <HAL_GetTick>
 8001186:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	019a      	lsls	r2, r3, #6
 800118c:	f53f aea8 	bmi.w	8000ee0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001190:	f7ff faca 	bl	8000728 <HAL_GetTick>
 8001194:	1b40      	subs	r0, r0, r5
 8001196:	2802      	cmp	r0, #2
 8001198:	d9f6      	bls.n	8001188 <HAL_RCC_OscConfig+0x2d4>
 800119a:	e6cc      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119c:	f7ff fac4 	bl	8000728 <HAL_GetTick>
 80011a0:	1b80      	subs	r0, r0, r6
 80011a2:	2802      	cmp	r0, #2
 80011a4:	d9d6      	bls.n	8001154 <HAL_RCC_OscConfig+0x2a0>
 80011a6:	e6c6      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80011a8:	f7ff fabe 	bl	8000728 <HAL_GetTick>
 80011ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	019b      	lsls	r3, r3, #6
 80011b2:	f57f ae95 	bpl.w	8000ee0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b6:	f7ff fab7 	bl	8000728 <HAL_GetTick>
 80011ba:	1b40      	subs	r0, r0, r5
 80011bc:	2802      	cmp	r0, #2
 80011be:	d9f6      	bls.n	80011ae <HAL_RCC_OscConfig+0x2fa>
 80011c0:	e6b9      	b.n	8000f36 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	f43f aea2 	beq.w	8000f0c <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80011c8:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ca:	6a2b      	ldr	r3, [r5, #32]
 80011cc:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f47f ae9b 	bne.w	8000f0c <HAL_RCC_OscConfig+0x58>
 80011d6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011d8:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011dc:	1ac0      	subs	r0, r0, r3
 80011de:	bf18      	it	ne
 80011e0:	2001      	movne	r0, #1
 80011e2:	e6a9      	b.n	8000f38 <HAL_RCC_OscConfig+0x84>
 80011e4:	40021000 	.word	0x40021000
 80011e8:	42420000 	.word	0x42420000

080011ec <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80011ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <HAL_RCC_GetSysClockFreq+0x38>)
 80011ee:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011f0:	f003 010c 	and.w	r1, r3, #12
 80011f4:	2908      	cmp	r1, #8
 80011f6:	d112      	bne.n	800121e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011fa:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011fe:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001200:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001202:	d509      	bpl.n	8001218 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001204:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001206:	4a09      	ldr	r2, [pc, #36]	@ (800122c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001208:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800120c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x44>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001212:	fbb0 f0f3 	udiv	r0, r0, r3
 8001216:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_RCC_GetSysClockFreq+0x48>)
 800121a:	4358      	muls	r0, r3
 800121c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800121e:	4803      	ldr	r0, [pc, #12]	@ (800122c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	08002066 	.word	0x08002066
 800122c:	007a1200 	.word	0x007a1200
 8001230:	08002064 	.word	0x08002064
 8001234:	003d0900 	.word	0x003d0900

08001238 <HAL_RCC_ClockConfig>:
{
 8001238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800123c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800123e:	4604      	mov	r4, r0
 8001240:	b910      	cbnz	r0, 8001248 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
}
 8001244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4a44      	ldr	r2, [pc, #272]	@ (800135c <HAL_RCC_ClockConfig+0x124>)
 800124a:	6813      	ldr	r3, [r2, #0]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	428b      	cmp	r3, r1
 8001252:	d328      	bcc.n	80012a6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001254:	6821      	ldr	r1, [r4, #0]
 8001256:	078e      	lsls	r6, r1, #30
 8001258:	d430      	bmi.n	80012bc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	07ca      	lsls	r2, r1, #31
 800125c:	d443      	bmi.n	80012e6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800125e:	4a3f      	ldr	r2, [pc, #252]	@ (800135c <HAL_RCC_ClockConfig+0x124>)
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	42ab      	cmp	r3, r5
 8001268:	d865      	bhi.n	8001336 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	4d3c      	ldr	r5, [pc, #240]	@ (8001360 <HAL_RCC_ClockConfig+0x128>)
 800126e:	f012 0f04 	tst.w	r2, #4
 8001272:	d16c      	bne.n	800134e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001274:	0713      	lsls	r3, r2, #28
 8001276:	d506      	bpl.n	8001286 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001278:	686b      	ldr	r3, [r5, #4]
 800127a:	6922      	ldr	r2, [r4, #16]
 800127c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001280:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001284:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001286:	f7ff ffb1 	bl	80011ec <HAL_RCC_GetSysClockFreq>
 800128a:	686b      	ldr	r3, [r5, #4]
 800128c:	4a35      	ldr	r2, [pc, #212]	@ (8001364 <HAL_RCC_ClockConfig+0x12c>)
 800128e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	40d8      	lsrs	r0, r3
 8001296:	4b34      	ldr	r3, [pc, #208]	@ (8001368 <HAL_RCC_ClockConfig+0x130>)
 8001298:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800129a:	4b34      	ldr	r3, [pc, #208]	@ (800136c <HAL_RCC_ClockConfig+0x134>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	f7ff fa01 	bl	80006a4 <HAL_InitTick>
  return HAL_OK;
 80012a2:	2000      	movs	r0, #0
 80012a4:	e7ce      	b.n	8001244 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	f023 0307 	bic.w	r3, r3, #7
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	428b      	cmp	r3, r1
 80012b8:	d1c3      	bne.n	8001242 <HAL_RCC_ClockConfig+0xa>
 80012ba:	e7cb      	b.n	8001254 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <HAL_RCC_ClockConfig+0x128>)
 80012be:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c2:	bf1e      	ittt	ne
 80012c4:	685a      	ldrne	r2, [r3, #4]
 80012c6:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80012ca:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012cc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ce:	bf42      	ittt	mi
 80012d0:	685a      	ldrmi	r2, [r3, #4]
 80012d2:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80012d6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	68a0      	ldr	r0, [r4, #8]
 80012dc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80012e0:	4302      	orrs	r2, r0
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	e7b9      	b.n	800125a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e6:	6862      	ldr	r2, [r4, #4]
 80012e8:	4e1d      	ldr	r6, [pc, #116]	@ (8001360 <HAL_RCC_ClockConfig+0x128>)
 80012ea:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ec:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	d11a      	bne.n	8001326 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	d0a5      	beq.n	8001242 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fc:	f023 0303 	bic.w	r3, r3, #3
 8001300:	4313      	orrs	r3, r2
 8001302:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001304:	f7ff fa10 	bl	8000728 <HAL_GetTick>
 8001308:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	6873      	ldr	r3, [r6, #4]
 800130c:	6862      	ldr	r2, [r4, #4]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001316:	d0a2      	beq.n	800125e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f7ff fa06 	bl	8000728 <HAL_GetTick>
 800131c:	1bc0      	subs	r0, r0, r7
 800131e:	4540      	cmp	r0, r8
 8001320:	d9f3      	bls.n	800130a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
 8001324:	e78e      	b.n	8001244 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001326:	2a02      	cmp	r2, #2
 8001328:	d102      	bne.n	8001330 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800132e:	e7e1      	b.n	80012f4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	f013 0f02 	tst.w	r3, #2
 8001334:	e7de      	b.n	80012f4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f023 0307 	bic.w	r3, r3, #7
 800133c:	432b      	orrs	r3, r5
 800133e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	42ab      	cmp	r3, r5
 8001348:	f47f af7b 	bne.w	8001242 <HAL_RCC_ClockConfig+0xa>
 800134c:	e78d      	b.n	800126a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800134e:	686b      	ldr	r3, [r5, #4]
 8001350:	68e1      	ldr	r1, [r4, #12]
 8001352:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001356:	430b      	orrs	r3, r1
 8001358:	606b      	str	r3, [r5, #4]
 800135a:	e78b      	b.n	8001274 <HAL_RCC_ClockConfig+0x3c>
 800135c:	40022000 	.word	0x40022000
 8001360:	40021000 	.word	0x40021000
 8001364:	08002054 	.word	0x08002054
 8001368:	20000054 	.word	0x20000054
 800136c:	2000005c 	.word	0x2000005c

08001370 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	4a03      	ldr	r2, [pc, #12]	@ (800138c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800137e:	6810      	ldr	r0, [r2, #0]
}
 8001380:	40d8      	lsrs	r0, r3
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000
 8001388:	0800204c 	.word	0x0800204c
 800138c:	20000054 	.word	0x20000054

08001390 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001392:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	4a03      	ldr	r2, [pc, #12]	@ (80013ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800139e:	6810      	ldr	r0, [r2, #0]
}
 80013a0:	40d8      	lsrs	r0, r3
 80013a2:	4770      	bx	lr
 80013a4:	40021000 	.word	0x40021000
 80013a8:	0800204c 	.word	0x0800204c
 80013ac:	20000054 	.word	0x20000054

080013b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013b0:	b510      	push	{r4, lr}
 80013b2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	68c1      	ldr	r1, [r0, #12]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80013be:	430a      	orrs	r2, r1
 80013c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013c2:	6882      	ldr	r2, [r0, #8]
 80013c4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80013c6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013c8:	4302      	orrs	r2, r0
 80013ca:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80013cc:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 80013d0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80013d6:	430a      	orrs	r2, r1
 80013d8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	69a1      	ldr	r1, [r4, #24]
 80013de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80013e2:	430a      	orrs	r2, r1
 80013e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80013e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <UART_SetConfig+0x70>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d115      	bne.n	8001418 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80013ec:	f7ff ffd0 	bl	8001390 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013f0:	2319      	movs	r3, #25
 80013f2:	4343      	muls	r3, r0
 80013f4:	6862      	ldr	r2, [r4, #4]
 80013f6:	6820      	ldr	r0, [r4, #0]
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80013fe:	2264      	movs	r2, #100	@ 0x64
 8001400:	fbb3 f1f2 	udiv	r1, r3, r2
 8001404:	fb02 3311 	mls	r3, r2, r1, r3
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	3332      	adds	r3, #50	@ 0x32
 800140c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001410:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001414:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8001416:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001418:	f7ff ffaa 	bl	8001370 <HAL_RCC_GetPCLK1Freq>
 800141c:	e7e8      	b.n	80013f0 <UART_SetConfig+0x40>
 800141e:	bf00      	nop
 8001420:	40013800 	.word	0x40013800

08001424 <HAL_UART_Init>:
{
 8001424:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001426:	4604      	mov	r4, r0
 8001428:	b348      	cbz	r0, 800147e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800142a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800142e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001432:	b91b      	cbnz	r3, 800143c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001434:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001438:	f7ff f8a8 	bl	800058c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800143c:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800143e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001440:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001444:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001446:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001448:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800144c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800144e:	f7ff ffaf 	bl	80013b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001452:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001454:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800145c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001464:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800146c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800146e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001470:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001472:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001476:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800147a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800147c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800147e:	2001      	movs	r0, #1
 8001480:	e7fc      	b.n	800147c <HAL_UART_Init+0x58>
	...

08001484 <LCD_write_nibble>:
uint8_t backlight_state = 1;

/* Private variables */
extern I2C_HandleTypeDef hi2c1;

void LCD_write_nibble(uint8_t nibble, uint8_t rs) {
 8001484:	b530      	push	{r4, r5, lr}
  uint8_t data = nibble << D4_BIT;
  data |= rs << RS_BIT;
  data |= backlight_state << BL_BIT; // Include backlight state in data
  data |= 1 << EN_BIT;
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001486:	2564      	movs	r5, #100	@ 0x64
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <LCD_write_nibble+0x54>)
  data |= rs << RS_BIT;
 800148a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800148e:	781b      	ldrb	r3, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001490:	4c12      	ldr	r4, [pc, #72]	@ (80014dc <LCD_write_nibble+0x58>)
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001492:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
void LCD_write_nibble(uint8_t nibble, uint8_t rs) {
 8001496:	b085      	sub	sp, #20
  data |= 1 << EN_BIT;
 8001498:	f041 0104 	orr.w	r1, r1, #4
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800149c:	f10d 020f 	add.w	r2, sp, #15
 80014a0:	2301      	movs	r3, #1
  data |= 1 << EN_BIT;
 80014a2:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80014a6:	4620      	mov	r0, r4
 80014a8:	214e      	movs	r1, #78	@ 0x4e
 80014aa:	9500      	str	r5, [sp, #0]
 80014ac:	f7ff fc28 	bl	8000d00 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff f93f 	bl	8000734 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 80014b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80014ba:	214e      	movs	r1, #78	@ 0x4e
  data &= ~(1 << EN_BIT);
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80014c4:	4620      	mov	r0, r4
 80014c6:	2301      	movs	r3, #1
 80014c8:	9500      	str	r5, [sp, #0]
 80014ca:	f10d 020f 	add.w	r2, sp, #15
 80014ce:	f7ff fc17 	bl	8000d00 <HAL_I2C_Master_Transmit>
}
 80014d2:	b005      	add	sp, #20
 80014d4:	bd30      	pop	{r4, r5, pc}
 80014d6:	bf00      	nop
 80014d8:	20000060 	.word	0x20000060
 80014dc:	20000194 	.word	0x20000194

080014e0 <LCD_send_cmd>:

void LCD_send_cmd(uint8_t cmd) {
 80014e0:	b510      	push	{r4, lr}
 80014e2:	4604      	mov	r4, r0
  uint8_t upper_nibble = cmd >> 4;
  uint8_t lower_nibble = cmd & 0x0F;
  LCD_write_nibble(upper_nibble, 0);
 80014e4:	2100      	movs	r1, #0
 80014e6:	0900      	lsrs	r0, r0, #4
 80014e8:	f7ff ffcc 	bl	8001484 <LCD_write_nibble>
  LCD_write_nibble(lower_nibble, 0);
 80014ec:	f004 000f 	and.w	r0, r4, #15
 80014f0:	2100      	movs	r1, #0
  if (cmd == 0x01 || cmd == 0x02) {
 80014f2:	3c01      	subs	r4, #1
  LCD_write_nibble(lower_nibble, 0);
 80014f4:	f7ff ffc6 	bl	8001484 <LCD_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 80014f8:	2c01      	cmp	r4, #1
 80014fa:	d804      	bhi.n	8001506 <LCD_send_cmd+0x26>
    HAL_Delay(2);
  }
}
 80014fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(2);
 8001500:	2002      	movs	r0, #2
 8001502:	f7ff b917 	b.w	8000734 <HAL_Delay>
}
 8001506:	bd10      	pop	{r4, pc}

08001508 <LCD_send_data>:

void LCD_send_data(uint8_t data) {
 8001508:	b510      	push	{r4, lr}
 800150a:	4604      	mov	r4, r0
  uint8_t upper_nibble = data >> 4;
  uint8_t lower_nibble = data & 0x0F;
  LCD_write_nibble(upper_nibble, 1);
 800150c:	2101      	movs	r1, #1
 800150e:	0900      	lsrs	r0, r0, #4
 8001510:	f7ff ffb8 	bl	8001484 <LCD_write_nibble>
  LCD_write_nibble(lower_nibble, 1);
 8001514:	f004 000f 	and.w	r0, r4, #15
 8001518:	2101      	movs	r1, #1
}
 800151a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_write_nibble(lower_nibble, 1);
 800151e:	f7ff bfb1 	b.w	8001484 <LCD_write_nibble>

08001522 <LCD_init>:

void LCD_init() {
 8001522:	b508      	push	{r3, lr}
  HAL_Delay(50);
 8001524:	2032      	movs	r0, #50	@ 0x32
 8001526:	f7ff f905 	bl	8000734 <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 800152a:	2100      	movs	r1, #0
 800152c:	2003      	movs	r0, #3
 800152e:	f7ff ffa9 	bl	8001484 <LCD_write_nibble>
  HAL_Delay(5);
 8001532:	2005      	movs	r0, #5
 8001534:	f7ff f8fe 	bl	8000734 <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 8001538:	2100      	movs	r1, #0
 800153a:	2003      	movs	r0, #3
 800153c:	f7ff ffa2 	bl	8001484 <LCD_write_nibble>
  HAL_Delay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff f8f7 	bl	8000734 <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 8001546:	2100      	movs	r1, #0
 8001548:	2003      	movs	r0, #3
 800154a:	f7ff ff9b 	bl	8001484 <LCD_write_nibble>
  HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff f8f0 	bl	8000734 <HAL_Delay>
  LCD_write_nibble(0x02, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	2002      	movs	r0, #2
 8001558:	f7ff ff94 	bl	8001484 <LCD_write_nibble>
  LCD_send_cmd(0x28);
 800155c:	2028      	movs	r0, #40	@ 0x28
 800155e:	f7ff ffbf 	bl	80014e0 <LCD_send_cmd>
  LCD_send_cmd(0x0C);
 8001562:	200c      	movs	r0, #12
 8001564:	f7ff ffbc 	bl	80014e0 <LCD_send_cmd>
  LCD_send_cmd(0x06);
 8001568:	2006      	movs	r0, #6
 800156a:	f7ff ffb9 	bl	80014e0 <LCD_send_cmd>
  LCD_send_cmd(0x01);
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff ffb6 	bl	80014e0 <LCD_send_cmd>
  HAL_Delay(2);
}
 8001574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(2);
 8001578:	2002      	movs	r0, #2
 800157a:	f7ff b8db 	b.w	8000734 <HAL_Delay>

0800157e <LCD_write_string>:

void LCD_write_string(char *str) {
 800157e:	b510      	push	{r4, lr}
 8001580:	1e44      	subs	r4, r0, #1
  while (*str) {
 8001582:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001586:	b900      	cbnz	r0, 800158a <LCD_write_string+0xc>
	  LCD_send_data(*str++);
  }
}
 8001588:	bd10      	pop	{r4, pc}
	  LCD_send_data(*str++);
 800158a:	f7ff ffbd 	bl	8001508 <LCD_send_data>
 800158e:	e7f8      	b.n	8001582 <LCD_write_string+0x4>

08001590 <LCD_set_cursor>:

void LCD_set_cursor(uint8_t row, uint8_t column) {
    uint8_t address;
    switch (row) {
 8001590:	1e43      	subs	r3, r0, #1
 8001592:	4258      	negs	r0, r3
 8001594:	4158      	adcs	r0, r3
            address = 0x40;
            break;
        default:
            address = 0x00;
    }
    address += column;
 8001596:	eb01 1180 	add.w	r1, r1, r0, lsl #6
    LCD_send_cmd(0x80 | address);
 800159a:	f061 007f 	orn	r0, r1, #127	@ 0x7f
 800159e:	b2c0      	uxtb	r0, r0
 80015a0:	f7ff bf9e 	b.w	80014e0 <LCD_send_cmd>

080015a4 <LCD_clear>:
}

void LCD_clear(void) {
 80015a4:	b508      	push	{r3, lr}
	LCD_send_cmd(0x01);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff ff9a 	bl	80014e0 <LCD_send_cmd>
    HAL_Delay(2);
}
 80015ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(2);
 80015b0:	2002      	movs	r0, #2
 80015b2:	f7ff b8bf 	b.w	8000734 <HAL_Delay>
	...

080015b8 <LCD_backlight>:

void LCD_backlight(uint8_t state) {
  if (state) {
 80015b8:	3800      	subs	r0, #0
 80015ba:	bf18      	it	ne
 80015bc:	2001      	movne	r0, #1
 80015be:	4b01      	ldr	r3, [pc, #4]	@ (80015c4 <LCD_backlight+0xc>)
 80015c0:	7018      	strb	r0, [r3, #0]
    backlight_state = 1;
  } else {
    backlight_state = 0;
  }
}
 80015c2:	4770      	bx	lr
 80015c4:	20000060 	.word	0x20000060

080015c8 <read_clock_pin>:
	order = 0;
	counter = 0;
}

Switch_State_t read_clock_pin(void){
	return (Switch_State_t)HAL_GPIO_ReadPin(CLOCK_PORT, CLOCK_PIN);
 80015c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015cc:	4801      	ldr	r0, [pc, #4]	@ (80015d4 <read_clock_pin+0xc>)
 80015ce:	f7ff b9eb 	b.w	80009a8 <HAL_GPIO_ReadPin>
 80015d2:	bf00      	nop
 80015d4:	40010c00 	.word	0x40010c00

080015d8 <read_data_pin>:
}

Switch_State_t read_data_pin(void){
	return (Switch_State_t)HAL_GPIO_ReadPin(DATA_PORT, DATA_PIN);
 80015d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015dc:	4801      	ldr	r0, [pc, #4]	@ (80015e4 <read_data_pin+0xc>)
 80015de:	f7ff b9e3 	b.w	80009a8 <HAL_GPIO_ReadPin>
 80015e2:	bf00      	nop
 80015e4:	40010c00 	.word	0x40010c00

080015e8 <Switches_calcEncoder>:

Switch_State_t Switches_getButton(void){
	return read_button_pin();
}

void Switches_calcEncoder(void){
 80015e8:	b538      	push	{r3, r4, r5, lr}
	if (read_clock_pin() && (order == 0)) {
 80015ea:	f7ff ffed 	bl	80015c8 <read_clock_pin>
 80015ee:	4c21      	ldr	r4, [pc, #132]	@ (8001674 <Switches_calcEncoder+0x8c>)
 80015f0:	b150      	cbz	r0, 8001608 <Switches_calcEncoder+0x20>
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <Switches_calcEncoder+0x90>)
 80015f4:	781d      	ldrb	r5, [r3, #0]
 80015f6:	b93d      	cbnz	r5, 8001608 <Switches_calcEncoder+0x20>
		arr[order++] = (uint8_t)read_data_pin();
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	f7ff ffec 	bl	80015d8 <read_data_pin>
 8001600:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <Switches_calcEncoder+0x94>)
		complate_flag = 0;
 8001602:	7025      	strb	r5, [r4, #0]
		arr[order++] = (uint8_t)read_data_pin();
 8001604:	7018      	strb	r0, [r3, #0]
		else if ((arr[0] == 0) && (arr[1] == 1)) {
			counter--;
			if(counter < 0) counter = 0;
		}
	}
}
 8001606:	bd38      	pop	{r3, r4, r5, pc}
	else if (!read_clock_pin() && order) {
 8001608:	f7ff ffde 	bl	80015c8 <read_clock_pin>
 800160c:	bb08      	cbnz	r0, 8001652 <Switches_calcEncoder+0x6a>
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <Switches_calcEncoder+0x90>)
 8001610:	781d      	ldrb	r5, [r3, #0]
 8001612:	b1f5      	cbz	r5, 8001652 <Switches_calcEncoder+0x6a>
		arr[order++] = (uint8_t)read_data_pin();
 8001614:	1c6a      	adds	r2, r5, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	f7ff ffde 	bl	80015d8 <read_data_pin>
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <Switches_calcEncoder+0x94>)
 800161e:	5558      	strb	r0, [r3, r5]
		complate_flag = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	7023      	strb	r3, [r4, #0]
	if (complate_flag && (order == 2)) {
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <Switches_calcEncoder+0x90>)
 8001626:	7813      	ldrb	r3, [r2, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d1ec      	bne.n	8001606 <Switches_calcEncoder+0x1e>
		order = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	7013      	strb	r3, [r2, #0]
		complate_flag = 0;
 8001630:	7023      	strb	r3, [r4, #0]
		if ((arr[0] == 1) && (arr[1] == 0)) {
 8001632:	4b12      	ldr	r3, [pc, #72]	@ (800167c <Switches_calcEncoder+0x94>)
 8001634:	7819      	ldrb	r1, [r3, #0]
 8001636:	2901      	cmp	r1, #1
 8001638:	d10f      	bne.n	800165a <Switches_calcEncoder+0x72>
 800163a:	785b      	ldrb	r3, [r3, #1]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e2      	bne.n	8001606 <Switches_calcEncoder+0x1e>
			counter ++;
 8001640:	4a0f      	ldr	r2, [pc, #60]	@ (8001680 <Switches_calcEncoder+0x98>)
 8001642:	7813      	ldrb	r3, [r2, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	b25b      	sxtb	r3, r3
			if(counter > 100) counter = 100;
 8001648:	2b64      	cmp	r3, #100	@ 0x64
 800164a:	bfc8      	it	gt
 800164c:	2364      	movgt	r3, #100	@ 0x64
			counter--;
 800164e:	7013      	strb	r3, [r2, #0]
 8001650:	e7d9      	b.n	8001606 <Switches_calcEncoder+0x1e>
	if (complate_flag && (order == 2)) {
 8001652:	7823      	ldrb	r3, [r4, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e5      	bne.n	8001624 <Switches_calcEncoder+0x3c>
 8001658:	e7d5      	b.n	8001606 <Switches_calcEncoder+0x1e>
		else if ((arr[0] == 0) && (arr[1] == 1)) {
 800165a:	2900      	cmp	r1, #0
 800165c:	d1d3      	bne.n	8001606 <Switches_calcEncoder+0x1e>
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d1d0      	bne.n	8001606 <Switches_calcEncoder+0x1e>
			counter--;
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <Switches_calcEncoder+0x98>)
 8001666:	7813      	ldrb	r3, [r2, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	b25b      	sxtb	r3, r3
			if(counter < 0) counter = 0;
 800166c:	2b00      	cmp	r3, #0
 800166e:	daee      	bge.n	800164e <Switches_calcEncoder+0x66>
 8001670:	7011      	strb	r1, [r2, #0]
}
 8001672:	e7c8      	b.n	8001606 <Switches_calcEncoder+0x1e>
 8001674:	200001f2 	.word	0x200001f2
 8001678:	200001f1 	.word	0x200001f1
 800167c:	200001f3 	.word	0x200001f3
 8001680:	200001f0 	.word	0x200001f0

08001684 <Switches_getCounter>:
uint8_t Switches_getCounter(void){
	return (uint8_t)counter;;
}
 8001684:	4b01      	ldr	r3, [pc, #4]	@ (800168c <Switches_getCounter+0x8>)
 8001686:	7818      	ldrb	r0, [r3, #0]
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200001f0 	.word	0x200001f0

08001690 <Switches_setCounter>:

void Switches_setCounter(uint8_t counter_val){
	counter = counter_val;
 8001690:	4b01      	ldr	r3, [pc, #4]	@ (8001698 <Switches_setCounter+0x8>)
 8001692:	7018      	strb	r0, [r3, #0]
}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	200001f0 	.word	0x200001f0

0800169c <siprintf>:
 800169c:	b40e      	push	{r1, r2, r3}
 800169e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80016a2:	b500      	push	{lr}
 80016a4:	b09c      	sub	sp, #112	@ 0x70
 80016a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80016a8:	9002      	str	r0, [sp, #8]
 80016aa:	9006      	str	r0, [sp, #24]
 80016ac:	9107      	str	r1, [sp, #28]
 80016ae:	9104      	str	r1, [sp, #16]
 80016b0:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <siprintf+0x38>)
 80016b2:	4909      	ldr	r1, [pc, #36]	@ (80016d8 <siprintf+0x3c>)
 80016b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80016b8:	9105      	str	r1, [sp, #20]
 80016ba:	6800      	ldr	r0, [r0, #0]
 80016bc:	a902      	add	r1, sp, #8
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	f000 f992 	bl	80019e8 <_svfiprintf_r>
 80016c4:	2200      	movs	r2, #0
 80016c6:	9b02      	ldr	r3, [sp, #8]
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	b01c      	add	sp, #112	@ 0x70
 80016cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80016d0:	b003      	add	sp, #12
 80016d2:	4770      	bx	lr
 80016d4:	20000064 	.word	0x20000064
 80016d8:	ffff0208 	.word	0xffff0208

080016dc <memset>:
 80016dc:	4603      	mov	r3, r0
 80016de:	4402      	add	r2, r0
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d100      	bne.n	80016e6 <memset+0xa>
 80016e4:	4770      	bx	lr
 80016e6:	f803 1b01 	strb.w	r1, [r3], #1
 80016ea:	e7f9      	b.n	80016e0 <memset+0x4>

080016ec <__errno>:
 80016ec:	4b01      	ldr	r3, [pc, #4]	@ (80016f4 <__errno+0x8>)
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000064 	.word	0x20000064

080016f8 <__libc_init_array>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	2600      	movs	r6, #0
 80016fc:	4d0c      	ldr	r5, [pc, #48]	@ (8001730 <__libc_init_array+0x38>)
 80016fe:	4c0d      	ldr	r4, [pc, #52]	@ (8001734 <__libc_init_array+0x3c>)
 8001700:	1b64      	subs	r4, r4, r5
 8001702:	10a4      	asrs	r4, r4, #2
 8001704:	42a6      	cmp	r6, r4
 8001706:	d109      	bne.n	800171c <__libc_init_array+0x24>
 8001708:	f000 fc78 	bl	8001ffc <_init>
 800170c:	2600      	movs	r6, #0
 800170e:	4d0a      	ldr	r5, [pc, #40]	@ (8001738 <__libc_init_array+0x40>)
 8001710:	4c0a      	ldr	r4, [pc, #40]	@ (800173c <__libc_init_array+0x44>)
 8001712:	1b64      	subs	r4, r4, r5
 8001714:	10a4      	asrs	r4, r4, #2
 8001716:	42a6      	cmp	r6, r4
 8001718:	d105      	bne.n	8001726 <__libc_init_array+0x2e>
 800171a:	bd70      	pop	{r4, r5, r6, pc}
 800171c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001720:	4798      	blx	r3
 8001722:	3601      	adds	r6, #1
 8001724:	e7ee      	b.n	8001704 <__libc_init_array+0xc>
 8001726:	f855 3b04 	ldr.w	r3, [r5], #4
 800172a:	4798      	blx	r3
 800172c:	3601      	adds	r6, #1
 800172e:	e7f2      	b.n	8001716 <__libc_init_array+0x1e>
 8001730:	080020ac 	.word	0x080020ac
 8001734:	080020ac 	.word	0x080020ac
 8001738:	080020ac 	.word	0x080020ac
 800173c:	080020b0 	.word	0x080020b0

08001740 <__retarget_lock_acquire_recursive>:
 8001740:	4770      	bx	lr

08001742 <__retarget_lock_release_recursive>:
 8001742:	4770      	bx	lr

08001744 <_free_r>:
 8001744:	b538      	push	{r3, r4, r5, lr}
 8001746:	4605      	mov	r5, r0
 8001748:	2900      	cmp	r1, #0
 800174a:	d040      	beq.n	80017ce <_free_r+0x8a>
 800174c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001750:	1f0c      	subs	r4, r1, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	bfb8      	it	lt
 8001756:	18e4      	addlt	r4, r4, r3
 8001758:	f000 f8de 	bl	8001918 <__malloc_lock>
 800175c:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <_free_r+0x8c>)
 800175e:	6813      	ldr	r3, [r2, #0]
 8001760:	b933      	cbnz	r3, 8001770 <_free_r+0x2c>
 8001762:	6063      	str	r3, [r4, #4]
 8001764:	6014      	str	r4, [r2, #0]
 8001766:	4628      	mov	r0, r5
 8001768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800176c:	f000 b8da 	b.w	8001924 <__malloc_unlock>
 8001770:	42a3      	cmp	r3, r4
 8001772:	d908      	bls.n	8001786 <_free_r+0x42>
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	1821      	adds	r1, r4, r0
 8001778:	428b      	cmp	r3, r1
 800177a:	bf01      	itttt	eq
 800177c:	6819      	ldreq	r1, [r3, #0]
 800177e:	685b      	ldreq	r3, [r3, #4]
 8001780:	1809      	addeq	r1, r1, r0
 8001782:	6021      	streq	r1, [r4, #0]
 8001784:	e7ed      	b.n	8001762 <_free_r+0x1e>
 8001786:	461a      	mov	r2, r3
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	b10b      	cbz	r3, 8001790 <_free_r+0x4c>
 800178c:	42a3      	cmp	r3, r4
 800178e:	d9fa      	bls.n	8001786 <_free_r+0x42>
 8001790:	6811      	ldr	r1, [r2, #0]
 8001792:	1850      	adds	r0, r2, r1
 8001794:	42a0      	cmp	r0, r4
 8001796:	d10b      	bne.n	80017b0 <_free_r+0x6c>
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	4401      	add	r1, r0
 800179c:	1850      	adds	r0, r2, r1
 800179e:	4283      	cmp	r3, r0
 80017a0:	6011      	str	r1, [r2, #0]
 80017a2:	d1e0      	bne.n	8001766 <_free_r+0x22>
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4408      	add	r0, r1
 80017aa:	6010      	str	r0, [r2, #0]
 80017ac:	6053      	str	r3, [r2, #4]
 80017ae:	e7da      	b.n	8001766 <_free_r+0x22>
 80017b0:	d902      	bls.n	80017b8 <_free_r+0x74>
 80017b2:	230c      	movs	r3, #12
 80017b4:	602b      	str	r3, [r5, #0]
 80017b6:	e7d6      	b.n	8001766 <_free_r+0x22>
 80017b8:	6820      	ldr	r0, [r4, #0]
 80017ba:	1821      	adds	r1, r4, r0
 80017bc:	428b      	cmp	r3, r1
 80017be:	bf01      	itttt	eq
 80017c0:	6819      	ldreq	r1, [r3, #0]
 80017c2:	685b      	ldreq	r3, [r3, #4]
 80017c4:	1809      	addeq	r1, r1, r0
 80017c6:	6021      	streq	r1, [r4, #0]
 80017c8:	6063      	str	r3, [r4, #4]
 80017ca:	6054      	str	r4, [r2, #4]
 80017cc:	e7cb      	b.n	8001766 <_free_r+0x22>
 80017ce:	bd38      	pop	{r3, r4, r5, pc}
 80017d0:	2000033c 	.word	0x2000033c

080017d4 <sbrk_aligned>:
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	4e0f      	ldr	r6, [pc, #60]	@ (8001814 <sbrk_aligned+0x40>)
 80017d8:	460c      	mov	r4, r1
 80017da:	6831      	ldr	r1, [r6, #0]
 80017dc:	4605      	mov	r5, r0
 80017de:	b911      	cbnz	r1, 80017e6 <sbrk_aligned+0x12>
 80017e0:	f000 fbaa 	bl	8001f38 <_sbrk_r>
 80017e4:	6030      	str	r0, [r6, #0]
 80017e6:	4621      	mov	r1, r4
 80017e8:	4628      	mov	r0, r5
 80017ea:	f000 fba5 	bl	8001f38 <_sbrk_r>
 80017ee:	1c43      	adds	r3, r0, #1
 80017f0:	d103      	bne.n	80017fa <sbrk_aligned+0x26>
 80017f2:	f04f 34ff 	mov.w	r4, #4294967295
 80017f6:	4620      	mov	r0, r4
 80017f8:	bd70      	pop	{r4, r5, r6, pc}
 80017fa:	1cc4      	adds	r4, r0, #3
 80017fc:	f024 0403 	bic.w	r4, r4, #3
 8001800:	42a0      	cmp	r0, r4
 8001802:	d0f8      	beq.n	80017f6 <sbrk_aligned+0x22>
 8001804:	1a21      	subs	r1, r4, r0
 8001806:	4628      	mov	r0, r5
 8001808:	f000 fb96 	bl	8001f38 <_sbrk_r>
 800180c:	3001      	adds	r0, #1
 800180e:	d1f2      	bne.n	80017f6 <sbrk_aligned+0x22>
 8001810:	e7ef      	b.n	80017f2 <sbrk_aligned+0x1e>
 8001812:	bf00      	nop
 8001814:	20000338 	.word	0x20000338

08001818 <_malloc_r>:
 8001818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800181c:	1ccd      	adds	r5, r1, #3
 800181e:	f025 0503 	bic.w	r5, r5, #3
 8001822:	3508      	adds	r5, #8
 8001824:	2d0c      	cmp	r5, #12
 8001826:	bf38      	it	cc
 8001828:	250c      	movcc	r5, #12
 800182a:	2d00      	cmp	r5, #0
 800182c:	4606      	mov	r6, r0
 800182e:	db01      	blt.n	8001834 <_malloc_r+0x1c>
 8001830:	42a9      	cmp	r1, r5
 8001832:	d904      	bls.n	800183e <_malloc_r+0x26>
 8001834:	230c      	movs	r3, #12
 8001836:	6033      	str	r3, [r6, #0]
 8001838:	2000      	movs	r0, #0
 800183a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800183e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001914 <_malloc_r+0xfc>
 8001842:	f000 f869 	bl	8001918 <__malloc_lock>
 8001846:	f8d8 3000 	ldr.w	r3, [r8]
 800184a:	461c      	mov	r4, r3
 800184c:	bb44      	cbnz	r4, 80018a0 <_malloc_r+0x88>
 800184e:	4629      	mov	r1, r5
 8001850:	4630      	mov	r0, r6
 8001852:	f7ff ffbf 	bl	80017d4 <sbrk_aligned>
 8001856:	1c43      	adds	r3, r0, #1
 8001858:	4604      	mov	r4, r0
 800185a:	d158      	bne.n	800190e <_malloc_r+0xf6>
 800185c:	f8d8 4000 	ldr.w	r4, [r8]
 8001860:	4627      	mov	r7, r4
 8001862:	2f00      	cmp	r7, #0
 8001864:	d143      	bne.n	80018ee <_malloc_r+0xd6>
 8001866:	2c00      	cmp	r4, #0
 8001868:	d04b      	beq.n	8001902 <_malloc_r+0xea>
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	4639      	mov	r1, r7
 800186e:	4630      	mov	r0, r6
 8001870:	eb04 0903 	add.w	r9, r4, r3
 8001874:	f000 fb60 	bl	8001f38 <_sbrk_r>
 8001878:	4581      	cmp	r9, r0
 800187a:	d142      	bne.n	8001902 <_malloc_r+0xea>
 800187c:	6821      	ldr	r1, [r4, #0]
 800187e:	4630      	mov	r0, r6
 8001880:	1a6d      	subs	r5, r5, r1
 8001882:	4629      	mov	r1, r5
 8001884:	f7ff ffa6 	bl	80017d4 <sbrk_aligned>
 8001888:	3001      	adds	r0, #1
 800188a:	d03a      	beq.n	8001902 <_malloc_r+0xea>
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	442b      	add	r3, r5
 8001890:	6023      	str	r3, [r4, #0]
 8001892:	f8d8 3000 	ldr.w	r3, [r8]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	bb62      	cbnz	r2, 80018f4 <_malloc_r+0xdc>
 800189a:	f8c8 7000 	str.w	r7, [r8]
 800189e:	e00f      	b.n	80018c0 <_malloc_r+0xa8>
 80018a0:	6822      	ldr	r2, [r4, #0]
 80018a2:	1b52      	subs	r2, r2, r5
 80018a4:	d420      	bmi.n	80018e8 <_malloc_r+0xd0>
 80018a6:	2a0b      	cmp	r2, #11
 80018a8:	d917      	bls.n	80018da <_malloc_r+0xc2>
 80018aa:	1961      	adds	r1, r4, r5
 80018ac:	42a3      	cmp	r3, r4
 80018ae:	6025      	str	r5, [r4, #0]
 80018b0:	bf18      	it	ne
 80018b2:	6059      	strne	r1, [r3, #4]
 80018b4:	6863      	ldr	r3, [r4, #4]
 80018b6:	bf08      	it	eq
 80018b8:	f8c8 1000 	streq.w	r1, [r8]
 80018bc:	5162      	str	r2, [r4, r5]
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	4630      	mov	r0, r6
 80018c2:	f000 f82f 	bl	8001924 <__malloc_unlock>
 80018c6:	f104 000b 	add.w	r0, r4, #11
 80018ca:	1d23      	adds	r3, r4, #4
 80018cc:	f020 0007 	bic.w	r0, r0, #7
 80018d0:	1ac2      	subs	r2, r0, r3
 80018d2:	bf1c      	itt	ne
 80018d4:	1a1b      	subne	r3, r3, r0
 80018d6:	50a3      	strne	r3, [r4, r2]
 80018d8:	e7af      	b.n	800183a <_malloc_r+0x22>
 80018da:	6862      	ldr	r2, [r4, #4]
 80018dc:	42a3      	cmp	r3, r4
 80018de:	bf0c      	ite	eq
 80018e0:	f8c8 2000 	streq.w	r2, [r8]
 80018e4:	605a      	strne	r2, [r3, #4]
 80018e6:	e7eb      	b.n	80018c0 <_malloc_r+0xa8>
 80018e8:	4623      	mov	r3, r4
 80018ea:	6864      	ldr	r4, [r4, #4]
 80018ec:	e7ae      	b.n	800184c <_malloc_r+0x34>
 80018ee:	463c      	mov	r4, r7
 80018f0:	687f      	ldr	r7, [r7, #4]
 80018f2:	e7b6      	b.n	8001862 <_malloc_r+0x4a>
 80018f4:	461a      	mov	r2, r3
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	42a3      	cmp	r3, r4
 80018fa:	d1fb      	bne.n	80018f4 <_malloc_r+0xdc>
 80018fc:	2300      	movs	r3, #0
 80018fe:	6053      	str	r3, [r2, #4]
 8001900:	e7de      	b.n	80018c0 <_malloc_r+0xa8>
 8001902:	230c      	movs	r3, #12
 8001904:	4630      	mov	r0, r6
 8001906:	6033      	str	r3, [r6, #0]
 8001908:	f000 f80c 	bl	8001924 <__malloc_unlock>
 800190c:	e794      	b.n	8001838 <_malloc_r+0x20>
 800190e:	6005      	str	r5, [r0, #0]
 8001910:	e7d6      	b.n	80018c0 <_malloc_r+0xa8>
 8001912:	bf00      	nop
 8001914:	2000033c 	.word	0x2000033c

08001918 <__malloc_lock>:
 8001918:	4801      	ldr	r0, [pc, #4]	@ (8001920 <__malloc_lock+0x8>)
 800191a:	f7ff bf11 	b.w	8001740 <__retarget_lock_acquire_recursive>
 800191e:	bf00      	nop
 8001920:	20000334 	.word	0x20000334

08001924 <__malloc_unlock>:
 8001924:	4801      	ldr	r0, [pc, #4]	@ (800192c <__malloc_unlock+0x8>)
 8001926:	f7ff bf0c 	b.w	8001742 <__retarget_lock_release_recursive>
 800192a:	bf00      	nop
 800192c:	20000334 	.word	0x20000334

08001930 <__ssputs_r>:
 8001930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001934:	461f      	mov	r7, r3
 8001936:	688e      	ldr	r6, [r1, #8]
 8001938:	4682      	mov	sl, r0
 800193a:	42be      	cmp	r6, r7
 800193c:	460c      	mov	r4, r1
 800193e:	4690      	mov	r8, r2
 8001940:	680b      	ldr	r3, [r1, #0]
 8001942:	d82d      	bhi.n	80019a0 <__ssputs_r+0x70>
 8001944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001948:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800194c:	d026      	beq.n	800199c <__ssputs_r+0x6c>
 800194e:	6965      	ldr	r5, [r4, #20]
 8001950:	6909      	ldr	r1, [r1, #16]
 8001952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001956:	eba3 0901 	sub.w	r9, r3, r1
 800195a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800195e:	1c7b      	adds	r3, r7, #1
 8001960:	444b      	add	r3, r9
 8001962:	106d      	asrs	r5, r5, #1
 8001964:	429d      	cmp	r5, r3
 8001966:	bf38      	it	cc
 8001968:	461d      	movcc	r5, r3
 800196a:	0553      	lsls	r3, r2, #21
 800196c:	d527      	bpl.n	80019be <__ssputs_r+0x8e>
 800196e:	4629      	mov	r1, r5
 8001970:	f7ff ff52 	bl	8001818 <_malloc_r>
 8001974:	4606      	mov	r6, r0
 8001976:	b360      	cbz	r0, 80019d2 <__ssputs_r+0xa2>
 8001978:	464a      	mov	r2, r9
 800197a:	6921      	ldr	r1, [r4, #16]
 800197c:	f000 fafa 	bl	8001f74 <memcpy>
 8001980:	89a3      	ldrh	r3, [r4, #12]
 8001982:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198a:	81a3      	strh	r3, [r4, #12]
 800198c:	6126      	str	r6, [r4, #16]
 800198e:	444e      	add	r6, r9
 8001990:	6026      	str	r6, [r4, #0]
 8001992:	463e      	mov	r6, r7
 8001994:	6165      	str	r5, [r4, #20]
 8001996:	eba5 0509 	sub.w	r5, r5, r9
 800199a:	60a5      	str	r5, [r4, #8]
 800199c:	42be      	cmp	r6, r7
 800199e:	d900      	bls.n	80019a2 <__ssputs_r+0x72>
 80019a0:	463e      	mov	r6, r7
 80019a2:	4632      	mov	r2, r6
 80019a4:	4641      	mov	r1, r8
 80019a6:	6820      	ldr	r0, [r4, #0]
 80019a8:	f000 faac 	bl	8001f04 <memmove>
 80019ac:	2000      	movs	r0, #0
 80019ae:	68a3      	ldr	r3, [r4, #8]
 80019b0:	1b9b      	subs	r3, r3, r6
 80019b2:	60a3      	str	r3, [r4, #8]
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	4433      	add	r3, r6
 80019b8:	6023      	str	r3, [r4, #0]
 80019ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019be:	462a      	mov	r2, r5
 80019c0:	f000 fae6 	bl	8001f90 <_realloc_r>
 80019c4:	4606      	mov	r6, r0
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d1e0      	bne.n	800198c <__ssputs_r+0x5c>
 80019ca:	4650      	mov	r0, sl
 80019cc:	6921      	ldr	r1, [r4, #16]
 80019ce:	f7ff feb9 	bl	8001744 <_free_r>
 80019d2:	230c      	movs	r3, #12
 80019d4:	f8ca 3000 	str.w	r3, [sl]
 80019d8:	89a3      	ldrh	r3, [r4, #12]
 80019da:	f04f 30ff 	mov.w	r0, #4294967295
 80019de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019e2:	81a3      	strh	r3, [r4, #12]
 80019e4:	e7e9      	b.n	80019ba <__ssputs_r+0x8a>
	...

080019e8 <_svfiprintf_r>:
 80019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ec:	4698      	mov	r8, r3
 80019ee:	898b      	ldrh	r3, [r1, #12]
 80019f0:	4607      	mov	r7, r0
 80019f2:	061b      	lsls	r3, r3, #24
 80019f4:	460d      	mov	r5, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	b09d      	sub	sp, #116	@ 0x74
 80019fa:	d510      	bpl.n	8001a1e <_svfiprintf_r+0x36>
 80019fc:	690b      	ldr	r3, [r1, #16]
 80019fe:	b973      	cbnz	r3, 8001a1e <_svfiprintf_r+0x36>
 8001a00:	2140      	movs	r1, #64	@ 0x40
 8001a02:	f7ff ff09 	bl	8001818 <_malloc_r>
 8001a06:	6028      	str	r0, [r5, #0]
 8001a08:	6128      	str	r0, [r5, #16]
 8001a0a:	b930      	cbnz	r0, 8001a1a <_svfiprintf_r+0x32>
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	b01d      	add	sp, #116	@ 0x74
 8001a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a1a:	2340      	movs	r3, #64	@ 0x40
 8001a1c:	616b      	str	r3, [r5, #20]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a22:	2320      	movs	r3, #32
 8001a24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001a28:	2330      	movs	r3, #48	@ 0x30
 8001a2a:	f04f 0901 	mov.w	r9, #1
 8001a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001bcc <_svfiprintf_r+0x1e4>
 8001a36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a42:	b10a      	cbz	r2, 8001a48 <_svfiprintf_r+0x60>
 8001a44:	2a25      	cmp	r2, #37	@ 0x25
 8001a46:	d1f9      	bne.n	8001a3c <_svfiprintf_r+0x54>
 8001a48:	ebba 0b04 	subs.w	fp, sl, r4
 8001a4c:	d00b      	beq.n	8001a66 <_svfiprintf_r+0x7e>
 8001a4e:	465b      	mov	r3, fp
 8001a50:	4622      	mov	r2, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	4638      	mov	r0, r7
 8001a56:	f7ff ff6b 	bl	8001930 <__ssputs_r>
 8001a5a:	3001      	adds	r0, #1
 8001a5c:	f000 80a7 	beq.w	8001bae <_svfiprintf_r+0x1c6>
 8001a60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a62:	445a      	add	r2, fp
 8001a64:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a66:	f89a 3000 	ldrb.w	r3, [sl]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 809f 	beq.w	8001bae <_svfiprintf_r+0x1c6>
 8001a70:	2300      	movs	r3, #0
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295
 8001a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a7a:	f10a 0a01 	add.w	sl, sl, #1
 8001a7e:	9304      	str	r3, [sp, #16]
 8001a80:	9307      	str	r3, [sp, #28]
 8001a82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a86:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a88:	4654      	mov	r4, sl
 8001a8a:	2205      	movs	r2, #5
 8001a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a90:	484e      	ldr	r0, [pc, #312]	@ (8001bcc <_svfiprintf_r+0x1e4>)
 8001a92:	f000 fa61 	bl	8001f58 <memchr>
 8001a96:	9a04      	ldr	r2, [sp, #16]
 8001a98:	b9d8      	cbnz	r0, 8001ad2 <_svfiprintf_r+0xea>
 8001a9a:	06d0      	lsls	r0, r2, #27
 8001a9c:	bf44      	itt	mi
 8001a9e:	2320      	movmi	r3, #32
 8001aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001aa4:	0711      	lsls	r1, r2, #28
 8001aa6:	bf44      	itt	mi
 8001aa8:	232b      	movmi	r3, #43	@ 0x2b
 8001aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001aae:	f89a 3000 	ldrb.w	r3, [sl]
 8001ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ab4:	d015      	beq.n	8001ae2 <_svfiprintf_r+0xfa>
 8001ab6:	4654      	mov	r4, sl
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f04f 0c0a 	mov.w	ip, #10
 8001abe:	9a07      	ldr	r2, [sp, #28]
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ac6:	3b30      	subs	r3, #48	@ 0x30
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d94b      	bls.n	8001b64 <_svfiprintf_r+0x17c>
 8001acc:	b1b0      	cbz	r0, 8001afc <_svfiprintf_r+0x114>
 8001ace:	9207      	str	r2, [sp, #28]
 8001ad0:	e014      	b.n	8001afc <_svfiprintf_r+0x114>
 8001ad2:	eba0 0308 	sub.w	r3, r0, r8
 8001ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	46a2      	mov	sl, r4
 8001ade:	9304      	str	r3, [sp, #16]
 8001ae0:	e7d2      	b.n	8001a88 <_svfiprintf_r+0xa0>
 8001ae2:	9b03      	ldr	r3, [sp, #12]
 8001ae4:	1d19      	adds	r1, r3, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	9103      	str	r1, [sp, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bfbb      	ittet	lt
 8001aee:	425b      	neglt	r3, r3
 8001af0:	f042 0202 	orrlt.w	r2, r2, #2
 8001af4:	9307      	strge	r3, [sp, #28]
 8001af6:	9307      	strlt	r3, [sp, #28]
 8001af8:	bfb8      	it	lt
 8001afa:	9204      	strlt	r2, [sp, #16]
 8001afc:	7823      	ldrb	r3, [r4, #0]
 8001afe:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b00:	d10a      	bne.n	8001b18 <_svfiprintf_r+0x130>
 8001b02:	7863      	ldrb	r3, [r4, #1]
 8001b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b06:	d132      	bne.n	8001b6e <_svfiprintf_r+0x186>
 8001b08:	9b03      	ldr	r3, [sp, #12]
 8001b0a:	3402      	adds	r4, #2
 8001b0c:	1d1a      	adds	r2, r3, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	9203      	str	r2, [sp, #12]
 8001b12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001b16:	9305      	str	r3, [sp, #20]
 8001b18:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001bd0 <_svfiprintf_r+0x1e8>
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	4650      	mov	r0, sl
 8001b20:	7821      	ldrb	r1, [r4, #0]
 8001b22:	f000 fa19 	bl	8001f58 <memchr>
 8001b26:	b138      	cbz	r0, 8001b38 <_svfiprintf_r+0x150>
 8001b28:	2240      	movs	r2, #64	@ 0x40
 8001b2a:	9b04      	ldr	r3, [sp, #16]
 8001b2c:	eba0 000a 	sub.w	r0, r0, sl
 8001b30:	4082      	lsls	r2, r0
 8001b32:	4313      	orrs	r3, r2
 8001b34:	3401      	adds	r4, #1
 8001b36:	9304      	str	r3, [sp, #16]
 8001b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	4825      	ldr	r0, [pc, #148]	@ (8001bd4 <_svfiprintf_r+0x1ec>)
 8001b40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001b44:	f000 fa08 	bl	8001f58 <memchr>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d036      	beq.n	8001bba <_svfiprintf_r+0x1d2>
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <_svfiprintf_r+0x1f0>)
 8001b4e:	bb1b      	cbnz	r3, 8001b98 <_svfiprintf_r+0x1b0>
 8001b50:	9b03      	ldr	r3, [sp, #12]
 8001b52:	3307      	adds	r3, #7
 8001b54:	f023 0307 	bic.w	r3, r3, #7
 8001b58:	3308      	adds	r3, #8
 8001b5a:	9303      	str	r3, [sp, #12]
 8001b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b5e:	4433      	add	r3, r6
 8001b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b62:	e76a      	b.n	8001a3a <_svfiprintf_r+0x52>
 8001b64:	460c      	mov	r4, r1
 8001b66:	2001      	movs	r0, #1
 8001b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b6c:	e7a8      	b.n	8001ac0 <_svfiprintf_r+0xd8>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f04f 0c0a 	mov.w	ip, #10
 8001b74:	4619      	mov	r1, r3
 8001b76:	3401      	adds	r4, #1
 8001b78:	9305      	str	r3, [sp, #20]
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b80:	3a30      	subs	r2, #48	@ 0x30
 8001b82:	2a09      	cmp	r2, #9
 8001b84:	d903      	bls.n	8001b8e <_svfiprintf_r+0x1a6>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0c6      	beq.n	8001b18 <_svfiprintf_r+0x130>
 8001b8a:	9105      	str	r1, [sp, #20]
 8001b8c:	e7c4      	b.n	8001b18 <_svfiprintf_r+0x130>
 8001b8e:	4604      	mov	r4, r0
 8001b90:	2301      	movs	r3, #1
 8001b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b96:	e7f0      	b.n	8001b7a <_svfiprintf_r+0x192>
 8001b98:	ab03      	add	r3, sp, #12
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	462a      	mov	r2, r5
 8001b9e:	4638      	mov	r0, r7
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <_svfiprintf_r+0x1f4>)
 8001ba2:	a904      	add	r1, sp, #16
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	1c42      	adds	r2, r0, #1
 8001baa:	4606      	mov	r6, r0
 8001bac:	d1d6      	bne.n	8001b5c <_svfiprintf_r+0x174>
 8001bae:	89ab      	ldrh	r3, [r5, #12]
 8001bb0:	065b      	lsls	r3, r3, #25
 8001bb2:	f53f af2d 	bmi.w	8001a10 <_svfiprintf_r+0x28>
 8001bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001bb8:	e72c      	b.n	8001a14 <_svfiprintf_r+0x2c>
 8001bba:	ab03      	add	r3, sp, #12
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	462a      	mov	r2, r5
 8001bc0:	4638      	mov	r0, r7
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <_svfiprintf_r+0x1f4>)
 8001bc4:	a904      	add	r1, sp, #16
 8001bc6:	f000 f87d 	bl	8001cc4 <_printf_i>
 8001bca:	e7ed      	b.n	8001ba8 <_svfiprintf_r+0x1c0>
 8001bcc:	08002076 	.word	0x08002076
 8001bd0:	0800207c 	.word	0x0800207c
 8001bd4:	08002080 	.word	0x08002080
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	08001931 	.word	0x08001931

08001be0 <_printf_common>:
 8001be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001be4:	4616      	mov	r6, r2
 8001be6:	4698      	mov	r8, r3
 8001be8:	688a      	ldr	r2, [r1, #8]
 8001bea:	690b      	ldr	r3, [r1, #16]
 8001bec:	4607      	mov	r7, r0
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	bfb8      	it	lt
 8001bf2:	4613      	movlt	r3, r2
 8001bf4:	6033      	str	r3, [r6, #0]
 8001bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001c00:	b10a      	cbz	r2, 8001c06 <_printf_common+0x26>
 8001c02:	3301      	adds	r3, #1
 8001c04:	6033      	str	r3, [r6, #0]
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	0699      	lsls	r1, r3, #26
 8001c0a:	bf42      	ittt	mi
 8001c0c:	6833      	ldrmi	r3, [r6, #0]
 8001c0e:	3302      	addmi	r3, #2
 8001c10:	6033      	strmi	r3, [r6, #0]
 8001c12:	6825      	ldr	r5, [r4, #0]
 8001c14:	f015 0506 	ands.w	r5, r5, #6
 8001c18:	d106      	bne.n	8001c28 <_printf_common+0x48>
 8001c1a:	f104 0a19 	add.w	sl, r4, #25
 8001c1e:	68e3      	ldr	r3, [r4, #12]
 8001c20:	6832      	ldr	r2, [r6, #0]
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	42ab      	cmp	r3, r5
 8001c26:	dc2b      	bgt.n	8001c80 <_printf_common+0xa0>
 8001c28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	3b00      	subs	r3, #0
 8001c30:	bf18      	it	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	0692      	lsls	r2, r2, #26
 8001c36:	d430      	bmi.n	8001c9a <_printf_common+0xba>
 8001c38:	4641      	mov	r1, r8
 8001c3a:	4638      	mov	r0, r7
 8001c3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001c40:	47c8      	blx	r9
 8001c42:	3001      	adds	r0, #1
 8001c44:	d023      	beq.n	8001c8e <_printf_common+0xae>
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	6922      	ldr	r2, [r4, #16]
 8001c4a:	f003 0306 	and.w	r3, r3, #6
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf14      	ite	ne
 8001c52:	2500      	movne	r5, #0
 8001c54:	6833      	ldreq	r3, [r6, #0]
 8001c56:	f04f 0600 	mov.w	r6, #0
 8001c5a:	bf08      	it	eq
 8001c5c:	68e5      	ldreq	r5, [r4, #12]
 8001c5e:	f104 041a 	add.w	r4, r4, #26
 8001c62:	bf08      	it	eq
 8001c64:	1aed      	subeq	r5, r5, r3
 8001c66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001c6a:	bf08      	it	eq
 8001c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c70:	4293      	cmp	r3, r2
 8001c72:	bfc4      	itt	gt
 8001c74:	1a9b      	subgt	r3, r3, r2
 8001c76:	18ed      	addgt	r5, r5, r3
 8001c78:	42b5      	cmp	r5, r6
 8001c7a:	d11a      	bne.n	8001cb2 <_printf_common+0xd2>
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	e008      	b.n	8001c92 <_printf_common+0xb2>
 8001c80:	2301      	movs	r3, #1
 8001c82:	4652      	mov	r2, sl
 8001c84:	4641      	mov	r1, r8
 8001c86:	4638      	mov	r0, r7
 8001c88:	47c8      	blx	r9
 8001c8a:	3001      	adds	r0, #1
 8001c8c:	d103      	bne.n	8001c96 <_printf_common+0xb6>
 8001c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c96:	3501      	adds	r5, #1
 8001c98:	e7c1      	b.n	8001c1e <_printf_common+0x3e>
 8001c9a:	2030      	movs	r0, #48	@ 0x30
 8001c9c:	18e1      	adds	r1, r4, r3
 8001c9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ca8:	4422      	add	r2, r4
 8001caa:	3302      	adds	r3, #2
 8001cac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001cb0:	e7c2      	b.n	8001c38 <_printf_common+0x58>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	4622      	mov	r2, r4
 8001cb6:	4641      	mov	r1, r8
 8001cb8:	4638      	mov	r0, r7
 8001cba:	47c8      	blx	r9
 8001cbc:	3001      	adds	r0, #1
 8001cbe:	d0e6      	beq.n	8001c8e <_printf_common+0xae>
 8001cc0:	3601      	adds	r6, #1
 8001cc2:	e7d9      	b.n	8001c78 <_printf_common+0x98>

08001cc4 <_printf_i>:
 8001cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc8:	7e0f      	ldrb	r7, [r1, #24]
 8001cca:	4691      	mov	r9, r2
 8001ccc:	2f78      	cmp	r7, #120	@ 0x78
 8001cce:	4680      	mov	r8, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	469a      	mov	sl, r3
 8001cd4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001cd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001cda:	d807      	bhi.n	8001cec <_printf_i+0x28>
 8001cdc:	2f62      	cmp	r7, #98	@ 0x62
 8001cde:	d80a      	bhi.n	8001cf6 <_printf_i+0x32>
 8001ce0:	2f00      	cmp	r7, #0
 8001ce2:	f000 80d3 	beq.w	8001e8c <_printf_i+0x1c8>
 8001ce6:	2f58      	cmp	r7, #88	@ 0x58
 8001ce8:	f000 80ba 	beq.w	8001e60 <_printf_i+0x19c>
 8001cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001cf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001cf4:	e03a      	b.n	8001d6c <_printf_i+0xa8>
 8001cf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001cfa:	2b15      	cmp	r3, #21
 8001cfc:	d8f6      	bhi.n	8001cec <_printf_i+0x28>
 8001cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8001d04 <_printf_i+0x40>)
 8001d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d04:	08001d5d 	.word	0x08001d5d
 8001d08:	08001d71 	.word	0x08001d71
 8001d0c:	08001ced 	.word	0x08001ced
 8001d10:	08001ced 	.word	0x08001ced
 8001d14:	08001ced 	.word	0x08001ced
 8001d18:	08001ced 	.word	0x08001ced
 8001d1c:	08001d71 	.word	0x08001d71
 8001d20:	08001ced 	.word	0x08001ced
 8001d24:	08001ced 	.word	0x08001ced
 8001d28:	08001ced 	.word	0x08001ced
 8001d2c:	08001ced 	.word	0x08001ced
 8001d30:	08001e73 	.word	0x08001e73
 8001d34:	08001d9b 	.word	0x08001d9b
 8001d38:	08001e2d 	.word	0x08001e2d
 8001d3c:	08001ced 	.word	0x08001ced
 8001d40:	08001ced 	.word	0x08001ced
 8001d44:	08001e95 	.word	0x08001e95
 8001d48:	08001ced 	.word	0x08001ced
 8001d4c:	08001d9b 	.word	0x08001d9b
 8001d50:	08001ced 	.word	0x08001ced
 8001d54:	08001ced 	.word	0x08001ced
 8001d58:	08001e35 	.word	0x08001e35
 8001d5c:	6833      	ldr	r3, [r6, #0]
 8001d5e:	1d1a      	adds	r2, r3, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6032      	str	r2, [r6, #0]
 8001d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e09e      	b.n	8001eae <_printf_i+0x1ea>
 8001d70:	6833      	ldr	r3, [r6, #0]
 8001d72:	6820      	ldr	r0, [r4, #0]
 8001d74:	1d19      	adds	r1, r3, #4
 8001d76:	6031      	str	r1, [r6, #0]
 8001d78:	0606      	lsls	r6, r0, #24
 8001d7a:	d501      	bpl.n	8001d80 <_printf_i+0xbc>
 8001d7c:	681d      	ldr	r5, [r3, #0]
 8001d7e:	e003      	b.n	8001d88 <_printf_i+0xc4>
 8001d80:	0645      	lsls	r5, r0, #25
 8001d82:	d5fb      	bpl.n	8001d7c <_printf_i+0xb8>
 8001d84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d88:	2d00      	cmp	r5, #0
 8001d8a:	da03      	bge.n	8001d94 <_printf_i+0xd0>
 8001d8c:	232d      	movs	r3, #45	@ 0x2d
 8001d8e:	426d      	negs	r5, r5
 8001d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d94:	230a      	movs	r3, #10
 8001d96:	4859      	ldr	r0, [pc, #356]	@ (8001efc <_printf_i+0x238>)
 8001d98:	e011      	b.n	8001dbe <_printf_i+0xfa>
 8001d9a:	6821      	ldr	r1, [r4, #0]
 8001d9c:	6833      	ldr	r3, [r6, #0]
 8001d9e:	0608      	lsls	r0, r1, #24
 8001da0:	f853 5b04 	ldr.w	r5, [r3], #4
 8001da4:	d402      	bmi.n	8001dac <_printf_i+0xe8>
 8001da6:	0649      	lsls	r1, r1, #25
 8001da8:	bf48      	it	mi
 8001daa:	b2ad      	uxthmi	r5, r5
 8001dac:	2f6f      	cmp	r7, #111	@ 0x6f
 8001dae:	6033      	str	r3, [r6, #0]
 8001db0:	bf14      	ite	ne
 8001db2:	230a      	movne	r3, #10
 8001db4:	2308      	moveq	r3, #8
 8001db6:	4851      	ldr	r0, [pc, #324]	@ (8001efc <_printf_i+0x238>)
 8001db8:	2100      	movs	r1, #0
 8001dba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001dbe:	6866      	ldr	r6, [r4, #4]
 8001dc0:	2e00      	cmp	r6, #0
 8001dc2:	bfa8      	it	ge
 8001dc4:	6821      	ldrge	r1, [r4, #0]
 8001dc6:	60a6      	str	r6, [r4, #8]
 8001dc8:	bfa4      	itt	ge
 8001dca:	f021 0104 	bicge.w	r1, r1, #4
 8001dce:	6021      	strge	r1, [r4, #0]
 8001dd0:	b90d      	cbnz	r5, 8001dd6 <_printf_i+0x112>
 8001dd2:	2e00      	cmp	r6, #0
 8001dd4:	d04b      	beq.n	8001e6e <_printf_i+0x1aa>
 8001dd6:	4616      	mov	r6, r2
 8001dd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ddc:	fb03 5711 	mls	r7, r3, r1, r5
 8001de0:	5dc7      	ldrb	r7, [r0, r7]
 8001de2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001de6:	462f      	mov	r7, r5
 8001de8:	42bb      	cmp	r3, r7
 8001dea:	460d      	mov	r5, r1
 8001dec:	d9f4      	bls.n	8001dd8 <_printf_i+0x114>
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d10b      	bne.n	8001e0a <_printf_i+0x146>
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	07df      	lsls	r7, r3, #31
 8001df6:	d508      	bpl.n	8001e0a <_printf_i+0x146>
 8001df8:	6923      	ldr	r3, [r4, #16]
 8001dfa:	6861      	ldr	r1, [r4, #4]
 8001dfc:	4299      	cmp	r1, r3
 8001dfe:	bfde      	ittt	le
 8001e00:	2330      	movle	r3, #48	@ 0x30
 8001e02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e0a:	1b92      	subs	r2, r2, r6
 8001e0c:	6122      	str	r2, [r4, #16]
 8001e0e:	464b      	mov	r3, r9
 8001e10:	4621      	mov	r1, r4
 8001e12:	4640      	mov	r0, r8
 8001e14:	f8cd a000 	str.w	sl, [sp]
 8001e18:	aa03      	add	r2, sp, #12
 8001e1a:	f7ff fee1 	bl	8001be0 <_printf_common>
 8001e1e:	3001      	adds	r0, #1
 8001e20:	d14a      	bne.n	8001eb8 <_printf_i+0x1f4>
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	b004      	add	sp, #16
 8001e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	f043 0320 	orr.w	r3, r3, #32
 8001e32:	6023      	str	r3, [r4, #0]
 8001e34:	2778      	movs	r7, #120	@ 0x78
 8001e36:	4832      	ldr	r0, [pc, #200]	@ (8001f00 <_printf_i+0x23c>)
 8001e38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	6831      	ldr	r1, [r6, #0]
 8001e40:	061f      	lsls	r7, r3, #24
 8001e42:	f851 5b04 	ldr.w	r5, [r1], #4
 8001e46:	d402      	bmi.n	8001e4e <_printf_i+0x18a>
 8001e48:	065f      	lsls	r7, r3, #25
 8001e4a:	bf48      	it	mi
 8001e4c:	b2ad      	uxthmi	r5, r5
 8001e4e:	6031      	str	r1, [r6, #0]
 8001e50:	07d9      	lsls	r1, r3, #31
 8001e52:	bf44      	itt	mi
 8001e54:	f043 0320 	orrmi.w	r3, r3, #32
 8001e58:	6023      	strmi	r3, [r4, #0]
 8001e5a:	b11d      	cbz	r5, 8001e64 <_printf_i+0x1a0>
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	e7ab      	b.n	8001db8 <_printf_i+0xf4>
 8001e60:	4826      	ldr	r0, [pc, #152]	@ (8001efc <_printf_i+0x238>)
 8001e62:	e7e9      	b.n	8001e38 <_printf_i+0x174>
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	f023 0320 	bic.w	r3, r3, #32
 8001e6a:	6023      	str	r3, [r4, #0]
 8001e6c:	e7f6      	b.n	8001e5c <_printf_i+0x198>
 8001e6e:	4616      	mov	r6, r2
 8001e70:	e7bd      	b.n	8001dee <_printf_i+0x12a>
 8001e72:	6833      	ldr	r3, [r6, #0]
 8001e74:	6825      	ldr	r5, [r4, #0]
 8001e76:	1d18      	adds	r0, r3, #4
 8001e78:	6961      	ldr	r1, [r4, #20]
 8001e7a:	6030      	str	r0, [r6, #0]
 8001e7c:	062e      	lsls	r6, r5, #24
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	d501      	bpl.n	8001e86 <_printf_i+0x1c2>
 8001e82:	6019      	str	r1, [r3, #0]
 8001e84:	e002      	b.n	8001e8c <_printf_i+0x1c8>
 8001e86:	0668      	lsls	r0, r5, #25
 8001e88:	d5fb      	bpl.n	8001e82 <_printf_i+0x1be>
 8001e8a:	8019      	strh	r1, [r3, #0]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	4616      	mov	r6, r2
 8001e90:	6123      	str	r3, [r4, #16]
 8001e92:	e7bc      	b.n	8001e0e <_printf_i+0x14a>
 8001e94:	6833      	ldr	r3, [r6, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	1d1a      	adds	r2, r3, #4
 8001e9a:	6032      	str	r2, [r6, #0]
 8001e9c:	681e      	ldr	r6, [r3, #0]
 8001e9e:	6862      	ldr	r2, [r4, #4]
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f000 f859 	bl	8001f58 <memchr>
 8001ea6:	b108      	cbz	r0, 8001eac <_printf_i+0x1e8>
 8001ea8:	1b80      	subs	r0, r0, r6
 8001eaa:	6060      	str	r0, [r4, #4]
 8001eac:	6863      	ldr	r3, [r4, #4]
 8001eae:	6123      	str	r3, [r4, #16]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001eb6:	e7aa      	b.n	8001e0e <_printf_i+0x14a>
 8001eb8:	4632      	mov	r2, r6
 8001eba:	4649      	mov	r1, r9
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	6923      	ldr	r3, [r4, #16]
 8001ec0:	47d0      	blx	sl
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	d0ad      	beq.n	8001e22 <_printf_i+0x15e>
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	079b      	lsls	r3, r3, #30
 8001eca:	d413      	bmi.n	8001ef4 <_printf_i+0x230>
 8001ecc:	68e0      	ldr	r0, [r4, #12]
 8001ece:	9b03      	ldr	r3, [sp, #12]
 8001ed0:	4298      	cmp	r0, r3
 8001ed2:	bfb8      	it	lt
 8001ed4:	4618      	movlt	r0, r3
 8001ed6:	e7a6      	b.n	8001e26 <_printf_i+0x162>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	4632      	mov	r2, r6
 8001edc:	4649      	mov	r1, r9
 8001ede:	4640      	mov	r0, r8
 8001ee0:	47d0      	blx	sl
 8001ee2:	3001      	adds	r0, #1
 8001ee4:	d09d      	beq.n	8001e22 <_printf_i+0x15e>
 8001ee6:	3501      	adds	r5, #1
 8001ee8:	68e3      	ldr	r3, [r4, #12]
 8001eea:	9903      	ldr	r1, [sp, #12]
 8001eec:	1a5b      	subs	r3, r3, r1
 8001eee:	42ab      	cmp	r3, r5
 8001ef0:	dcf2      	bgt.n	8001ed8 <_printf_i+0x214>
 8001ef2:	e7eb      	b.n	8001ecc <_printf_i+0x208>
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	f104 0619 	add.w	r6, r4, #25
 8001efa:	e7f5      	b.n	8001ee8 <_printf_i+0x224>
 8001efc:	08002087 	.word	0x08002087
 8001f00:	08002098 	.word	0x08002098

08001f04 <memmove>:
 8001f04:	4288      	cmp	r0, r1
 8001f06:	b510      	push	{r4, lr}
 8001f08:	eb01 0402 	add.w	r4, r1, r2
 8001f0c:	d902      	bls.n	8001f14 <memmove+0x10>
 8001f0e:	4284      	cmp	r4, r0
 8001f10:	4623      	mov	r3, r4
 8001f12:	d807      	bhi.n	8001f24 <memmove+0x20>
 8001f14:	1e43      	subs	r3, r0, #1
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d008      	beq.n	8001f2c <memmove+0x28>
 8001f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f22:	e7f8      	b.n	8001f16 <memmove+0x12>
 8001f24:	4601      	mov	r1, r0
 8001f26:	4402      	add	r2, r0
 8001f28:	428a      	cmp	r2, r1
 8001f2a:	d100      	bne.n	8001f2e <memmove+0x2a>
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f36:	e7f7      	b.n	8001f28 <memmove+0x24>

08001f38 <_sbrk_r>:
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4d05      	ldr	r5, [pc, #20]	@ (8001f54 <_sbrk_r+0x1c>)
 8001f3e:	4604      	mov	r4, r0
 8001f40:	4608      	mov	r0, r1
 8001f42:	602b      	str	r3, [r5, #0]
 8001f44:	f7fe fb66 	bl	8000614 <_sbrk>
 8001f48:	1c43      	adds	r3, r0, #1
 8001f4a:	d102      	bne.n	8001f52 <_sbrk_r+0x1a>
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	b103      	cbz	r3, 8001f52 <_sbrk_r+0x1a>
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	20000330 	.word	0x20000330

08001f58 <memchr>:
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b510      	push	{r4, lr}
 8001f5c:	b2c9      	uxtb	r1, r1
 8001f5e:	4402      	add	r2, r0
 8001f60:	4293      	cmp	r3, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	d101      	bne.n	8001f6a <memchr+0x12>
 8001f66:	2000      	movs	r0, #0
 8001f68:	e003      	b.n	8001f72 <memchr+0x1a>
 8001f6a:	7804      	ldrb	r4, [r0, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	428c      	cmp	r4, r1
 8001f70:	d1f6      	bne.n	8001f60 <memchr+0x8>
 8001f72:	bd10      	pop	{r4, pc}

08001f74 <memcpy>:
 8001f74:	440a      	add	r2, r1
 8001f76:	4291      	cmp	r1, r2
 8001f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f7c:	d100      	bne.n	8001f80 <memcpy+0xc>
 8001f7e:	4770      	bx	lr
 8001f80:	b510      	push	{r4, lr}
 8001f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f86:	4291      	cmp	r1, r2
 8001f88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f8c:	d1f9      	bne.n	8001f82 <memcpy+0xe>
 8001f8e:	bd10      	pop	{r4, pc}

08001f90 <_realloc_r>:
 8001f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f94:	4680      	mov	r8, r0
 8001f96:	4615      	mov	r5, r2
 8001f98:	460c      	mov	r4, r1
 8001f9a:	b921      	cbnz	r1, 8001fa6 <_realloc_r+0x16>
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa2:	f7ff bc39 	b.w	8001818 <_malloc_r>
 8001fa6:	b92a      	cbnz	r2, 8001fb4 <_realloc_r+0x24>
 8001fa8:	f7ff fbcc 	bl	8001744 <_free_r>
 8001fac:	2400      	movs	r4, #0
 8001fae:	4620      	mov	r0, r4
 8001fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fb4:	f000 f81a 	bl	8001fec <_malloc_usable_size_r>
 8001fb8:	4285      	cmp	r5, r0
 8001fba:	4606      	mov	r6, r0
 8001fbc:	d802      	bhi.n	8001fc4 <_realloc_r+0x34>
 8001fbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001fc2:	d8f4      	bhi.n	8001fae <_realloc_r+0x1e>
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	f7ff fc26 	bl	8001818 <_malloc_r>
 8001fcc:	4607      	mov	r7, r0
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d0ec      	beq.n	8001fac <_realloc_r+0x1c>
 8001fd2:	42b5      	cmp	r5, r6
 8001fd4:	462a      	mov	r2, r5
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	bf28      	it	cs
 8001fda:	4632      	movcs	r2, r6
 8001fdc:	f7ff ffca 	bl	8001f74 <memcpy>
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	4640      	mov	r0, r8
 8001fe4:	f7ff fbae 	bl	8001744 <_free_r>
 8001fe8:	463c      	mov	r4, r7
 8001fea:	e7e0      	b.n	8001fae <_realloc_r+0x1e>

08001fec <_malloc_usable_size_r>:
 8001fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ff0:	1f18      	subs	r0, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bfbc      	itt	lt
 8001ff6:	580b      	ldrlt	r3, [r1, r0]
 8001ff8:	18c0      	addlt	r0, r0, r3
 8001ffa:	4770      	bx	lr

08001ffc <_init>:
 8001ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffe:	bf00      	nop
 8002000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002002:	bc08      	pop	{r3}
 8002004:	469e      	mov	lr, r3
 8002006:	4770      	bx	lr

08002008 <_fini>:
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200a:	bf00      	nop
 800200c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800200e:	bc08      	pop	{r3}
 8002010:	469e      	mov	lr, r3
 8002012:	4770      	bx	lr
