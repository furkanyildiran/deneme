
deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f70  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800207c  0800207c  0000307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002158  08002158  00004064  2**0
                  CONTENTS
  4 .ARM          00000000  08002158  08002158  00004064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002158  08002158  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002158  08002158  00003158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800215c  0800215c  0000315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08002160  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000064  080021c4  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080021c4  000042ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d67e  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c1  00000000  00000000  0001170b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000058de  00000000  00000000  000137cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  000190b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000990  00000000  00000000  00019918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001716c  00000000  00000000  0001a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011455  00000000  00000000  00031414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082674  00000000  00000000  00042869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c4edd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b90  00000000  00000000  000c4f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000c6ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002064 	.word	0x08002064

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002064 	.word	0x08002064

0800014c <item0_f>:
    int index;
    func f;
}item;
item iarr[4]={};

void item0_f(char *title, char line[15]){
 800014c:	4608      	mov	r0, r1
    sprintf(line,"%s %d","item1setted",0);
 800014e:	2300      	movs	r3, #0
 8000150:	4a01      	ldr	r2, [pc, #4]	@ (8000158 <item0_f+0xc>)
 8000152:	4902      	ldr	r1, [pc, #8]	@ (800015c <item0_f+0x10>)
 8000154:	f001 bad6 	b.w	8001704 <siprintf>
 8000158:	080020cc 	.word	0x080020cc
 800015c:	080020d8 	.word	0x080020d8

08000160 <item1_f>:
}
void item1_f(char *title, char line[15]){
 8000160:	4608      	mov	r0, r1
    sprintf(line,"%s %d","item2setted",1);
 8000162:	2301      	movs	r3, #1
 8000164:	4a01      	ldr	r2, [pc, #4]	@ (800016c <item1_f+0xc>)
 8000166:	4902      	ldr	r1, [pc, #8]	@ (8000170 <item1_f+0x10>)
 8000168:	f001 bacc 	b.w	8001704 <siprintf>
 800016c:	080020de 	.word	0x080020de
 8000170:	080020d8 	.word	0x080020d8

08000174 <item2_f>:
}
void item2_f(char *title, char line[15]){
 8000174:	4608      	mov	r0, r1
    sprintf(line,"%s %d","item3setted",2);
 8000176:	2302      	movs	r3, #2
 8000178:	4a01      	ldr	r2, [pc, #4]	@ (8000180 <item2_f+0xc>)
 800017a:	4902      	ldr	r1, [pc, #8]	@ (8000184 <item2_f+0x10>)
 800017c:	f001 bac2 	b.w	8001704 <siprintf>
 8000180:	080020ea 	.word	0x080020ea
 8000184:	080020d8 	.word	0x080020d8

08000188 <item3_f>:
}
void item3_f(char *title, char line[15]){
 8000188:	4608      	mov	r0, r1
    sprintf(line,"%s %d","item3setted",3);
 800018a:	2303      	movs	r3, #3
 800018c:	4a01      	ldr	r2, [pc, #4]	@ (8000194 <item3_f+0xc>)
 800018e:	4902      	ldr	r1, [pc, #8]	@ (8000198 <item3_f+0x10>)
 8000190:	f001 bab8 	b.w	8001704 <siprintf>
 8000194:	080020ea 	.word	0x080020ea
 8000198:	080020d8 	.word	0x080020d8

0800019c <display_refresh>:
}display_content;


display_content content;

void display_refresh(void){
 800019c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	iarr[content.line0_index].f(iarr[content.line0_index].title, content.line0);
 80001a0:	4e16      	ldr	r6, [pc, #88]	@ (80001fc <display_refresh+0x60>)
 80001a2:	f04f 0814 	mov.w	r8, #20
 80001a6:	4635      	mov	r5, r6
 80001a8:	4c15      	ldr	r4, [pc, #84]	@ (8000200 <display_refresh+0x64>)
 80001aa:	f815 0b03 	ldrb.w	r0, [r5], #3
	iarr[content.line1_index].f(iarr[content.line1_index].title, content.line1);
 80001ae:	f106 0712 	add.w	r7, r6, #18
	iarr[content.line0_index].f(iarr[content.line0_index].title, content.line0);
 80001b2:	fb08 4000 	mla	r0, r8, r0, r4
 80001b6:	4629      	mov	r1, r5
 80001b8:	6903      	ldr	r3, [r0, #16]
 80001ba:	4798      	blx	r3
	iarr[content.line1_index].f(iarr[content.line1_index].title, content.line1);
 80001bc:	7873      	ldrb	r3, [r6, #1]
 80001be:	4639      	mov	r1, r7
 80001c0:	fb08 4003 	mla	r0, r8, r3, r4
 80001c4:	6903      	ldr	r3, [r0, #16]
 80001c6:	4798      	blx	r3

	LCD_clear();
 80001c8:	f001 fa2c 	bl	8001624 <LCD_clear>

	LCD_set_cursor(content.sign_index, 15);
 80001cc:	210f      	movs	r1, #15
 80001ce:	78b0      	ldrb	r0, [r6, #2]
 80001d0:	f001 fa1e 	bl	8001610 <LCD_set_cursor>
	LCD_write_string("<");
 80001d4:	480b      	ldr	r0, [pc, #44]	@ (8000204 <display_refresh+0x68>)
 80001d6:	f001 fa12 	bl	80015fe <LCD_write_string>

	LCD_set_cursor(0, 0);
 80001da:	2100      	movs	r1, #0
 80001dc:	4608      	mov	r0, r1
 80001de:	f001 fa17 	bl	8001610 <LCD_set_cursor>
	LCD_write_string(content.line0);
 80001e2:	4628      	mov	r0, r5
 80001e4:	f001 fa0b 	bl	80015fe <LCD_write_string>

	LCD_set_cursor(1, 0);
 80001e8:	2001      	movs	r0, #1
 80001ea:	2100      	movs	r1, #0
 80001ec:	f001 fa10 	bl	8001610 <LCD_set_cursor>
	LCD_write_string(content.line1);
 80001f0:	4638      	mov	r0, r7
}
 80001f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LCD_write_string(content.line1);
 80001f6:	f001 ba02 	b.w	80015fe <LCD_write_string>
 80001fa:	bf00      	nop
 80001fc:	20000080 	.word	0x20000080
 8000200:	200000a4 	.word	0x200000a4
 8000204:	080020f6 	.word	0x080020f6

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b500      	push	{lr}
 800020a:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020c:	2224      	movs	r2, #36	@ 0x24
 800020e:	2100      	movs	r1, #0
 8000210:	a807      	add	r0, sp, #28
 8000212:	f001 fa97 	bl	8001744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000216:	2214      	movs	r2, #20
 8000218:	2100      	movs	r1, #0
 800021a:	a801      	add	r0, sp, #4
 800021c:	f001 fa92 	bl	8001744 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000226:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f000 fe81 	bl	8000f34 <HAL_RCC_OscConfig>
 8000232:	4601      	mov	r1, r0
 8000234:	b108      	cbz	r0, 800023a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000236:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000238:	e7fe      	b.n	8000238 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023c:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000240:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000246:	a801      	add	r0, sp, #4
 8000248:	f001 f836 	bl	80012b8 <HAL_RCC_ClockConfig>
 800024c:	b108      	cbz	r0, 8000252 <SystemClock_Config+0x4a>
 800024e:	b672      	cpsid	i
  while (1)
 8000250:	e7fe      	b.n	8000250 <SystemClock_Config+0x48>
}
 8000252:	b011      	add	sp, #68	@ 0x44
 8000254:	f85d fb04 	ldr.w	pc, [sp], #4

08000258 <main>:
{
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	b098      	sub	sp, #96	@ 0x60
  HAL_Init();
 800025e:	f000 fa69 	bl	8000734 <HAL_Init>
  SystemClock_Config();
 8000262:	f7ff ffd1 	bl	8000208 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	2210      	movs	r2, #16
 8000268:	2100      	movs	r1, #0
 800026a:	a813      	add	r0, sp, #76	@ 0x4c
 800026c:	f001 fa6a 	bl	8001744 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000270:	4b96      	ldr	r3, [pc, #600]	@ (80004cc <main+0x274>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000278:	4895      	ldr	r0, [pc, #596]	@ (80004d0 <main+0x278>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027a:	f042 0210 	orr.w	r2, r2, #16
 800027e:	619a      	str	r2, [r3, #24]
 8000280:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000282:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000284:	f002 0210 	and.w	r2, r2, #16
 8000288:	9201      	str	r2, [sp, #4]
 800028a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000290:	f042 0204 	orr.w	r2, r2, #4
 8000294:	619a      	str	r2, [r3, #24]
 8000296:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000298:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029c:	f002 0204 	and.w	r2, r2, #4
 80002a0:	9202      	str	r2, [sp, #8]
 80002a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a4:	699a      	ldr	r2, [r3, #24]
  huart2.Init.BaudRate = 115200;
 80002a6:	4f8b      	ldr	r7, [pc, #556]	@ (80004d4 <main+0x27c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a8:	f042 0208 	orr.w	r2, r2, #8
 80002ac:	619a      	str	r2, [r3, #24]
 80002ae:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b2:	f003 0308 	and.w	r3, r3, #8
 80002b6:	9303      	str	r3, [sp, #12]
 80002b8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002ba:	f000 fbad 	bl	8000a18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002c2:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c8:	4881      	ldr	r0, [pc, #516]	@ (80004d0 <main+0x278>)
 80002ca:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002cc:	e9cd 4315 	strd	r4, r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d0:	f000 faca 	bl	8000868 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_Pin|DATA_Pin;
 80002d4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d8:	487f      	ldr	r0, [pc, #508]	@ (80004d8 <main+0x280>)
 80002da:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002dc:	e9cd 3413 	strd	r3, r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e2:	f000 fac1 	bl	8000868 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80002e6:	4b7d      	ldr	r3, [pc, #500]	@ (80004dc <main+0x284>)
  HAL_GPIO_Init(CLOCK_GPIO_Port, &GPIO_InitStruct);
 80002e8:	487b      	ldr	r0, [pc, #492]	@ (80004d8 <main+0x280>)
 80002ea:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80002ec:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f0:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(CLOCK_GPIO_Port, &GPIO_InitStruct);
 80002f2:	f000 fab9 	bl	8000868 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002f6:	4622      	mov	r2, r4
 80002f8:	4621      	mov	r1, r4
 80002fa:	2028      	movs	r0, #40	@ 0x28
 80002fc:	f000 fa62 	bl	80007c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000300:	2028      	movs	r0, #40	@ 0x28
 8000302:	f000 fa8f 	bl	8000824 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 8000306:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 800030a:	4875      	ldr	r0, [pc, #468]	@ (80004e0 <main+0x288>)
  huart2.Init.BaudRate = 115200;
 800030c:	e9c0 7300 	strd	r7, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000310:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000312:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031a:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031e:	f001 f8c1 	bl	80014a4 <HAL_UART_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	b108      	cbz	r0, 800032a <main+0xd2>
 8000326:	b672      	cpsid	i
  while (1)
 8000328:	e7fe      	b.n	8000328 <main+0xd0>
  hi2c1.Instance = I2C1;
 800032a:	486e      	ldr	r0, [pc, #440]	@ (80004e4 <main+0x28c>)
  hi2c1.Init.ClockSpeed = 100000;
 800032c:	496e      	ldr	r1, [pc, #440]	@ (80004e8 <main+0x290>)
 800032e:	4a6f      	ldr	r2, [pc, #444]	@ (80004ec <main+0x294>)
  hi2c1.Init.OwnAddress1 = 0;
 8000330:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000334:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000338:	e9c0 5304 	strd	r5, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000340:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000342:	f000 fc75 	bl	8000c30 <HAL_I2C_Init>
 8000346:	4607      	mov	r7, r0
 8000348:	b108      	cbz	r0, 800034e <main+0xf6>
 800034a:	b672      	cpsid	i
  while (1)
 800034c:	e7fe      	b.n	800034c <main+0xf4>
  item item0={.title="item0", .index=0, .f = item0_f};
 800034e:	4c68      	ldr	r4, [pc, #416]	@ (80004f0 <main+0x298>)
  LCD_init();
 8000350:	f001 f927 	bl	80015a2 <LCD_init>
  item item0={.title="item0", .index=0, .f = item0_f};
 8000354:	ad04      	add	r5, sp, #16
  LCD_backlight(1); // Turn on backlight
 8000356:	4630      	mov	r0, r6
 8000358:	f001 f96e 	bl	8001638 <LCD_backlight>
  item item0={.title="item0", .index=0, .f = item0_f};
 800035c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800035e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000360:	4625      	mov	r5, r4
 8000362:	f855 9b04 	ldr.w	r9, [r5], #4
  item item1={.title="item1", .index=1, .f = item1_f};
 8000366:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 800036a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000370:	f8d5 8000 	ldr.w	r8, [r5]
  item item2={.title="item2", .index=2, .f = item2_f};
 8000374:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8000378:	f104 0518 	add.w	r5, r4, #24
 800037c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  item item3={.title="item3", .index=3, .f = item3_f};
 800037e:	342c      	adds	r4, #44	@ 0x2c
  item item2={.title="item2", .index=2, .f = item2_f};
 8000380:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  item item3={.title="item3", .index=3, .f = item3_f};
 8000384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  item item2={.title="item2", .index=2, .f = item2_f};
 8000386:	f8d5 c000 	ldr.w	ip, [r5]
  item item3={.title="item3", .index=3, .f = item3_f};
 800038a:	ad13      	add	r5, sp, #76	@ 0x4c
 800038c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800038e:	f8d4 e000 	ldr.w	lr, [r4]
  iarr[0] = item0;
 8000392:	f10d 0a10 	add.w	sl, sp, #16
  item item3={.title="item3", .index=3, .f = item3_f};
 8000396:	f8c5 e000 	str.w	lr, [r5]
  iarr[0] = item0;
 800039a:	4d56      	ldr	r5, [pc, #344]	@ (80004f4 <main+0x29c>)
 800039c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80003a0:	462c      	mov	r4, r5
 80003a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a4:	f8c4 9000 	str.w	r9, [r4]
  iarr[1] = item1;
 80003a8:	f105 0414 	add.w	r4, r5, #20
 80003ac:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 80003b0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80003b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b6:	f8c4 8000 	str.w	r8, [r4]
  iarr[2] = item2;
 80003ba:	f105 0428 	add.w	r4, r5, #40	@ 0x28
 80003be:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80003c2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80003c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c8:	f8c4 c000 	str.w	ip, [r4]
  iarr[3] = item3;
 80003cc:	f105 0c3c 	add.w	ip, r5, #60	@ 0x3c
 80003d0:	ac13      	add	r4, sp, #76	@ 0x4c
 80003d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  content.line0_index=0;
 80003d8:	4c47      	ldr	r4, [pc, #284]	@ (80004f8 <main+0x2a0>)
  iarr[content.line0_index].f(iarr[content.line0_index].title, content.line0);
 80003da:	4628      	mov	r0, r5
 80003dc:	1ce1      	adds	r1, r4, #3
  iarr[3] = item3;
 80003de:	f8cc e000 	str.w	lr, [ip]
  content.line0_index=0;
 80003e2:	7027      	strb	r7, [r4, #0]
  content.line1_index=1;
 80003e4:	7066      	strb	r6, [r4, #1]
  content.sign_index=0;
 80003e6:	70a7      	strb	r7, [r4, #2]
  iarr[content.line0_index].f(iarr[content.line0_index].title, content.line0);
 80003e8:	f7ff feb0 	bl	800014c <item0_f>
  iarr[content.line1_index].f(iarr[content.line1_index].title, content.line1);
 80003ec:	2214      	movs	r2, #20
 80003ee:	7863      	ldrb	r3, [r4, #1]
 80003f0:	f104 0112 	add.w	r1, r4, #18
 80003f4:	fb02 5003 	mla	r0, r2, r3, r5
 80003f8:	6903      	ldr	r3, [r0, #16]
 80003fa:	4798      	blx	r3
  SysTick_Config(SystemCoreClock/1000);
 80003fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000400:	4b3e      	ldr	r3, [pc, #248]	@ (80004fc <main+0x2a4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000408:	3b01      	subs	r3, #1
 800040a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800040e:	d209      	bcs.n	8000424 <main+0x1cc>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000410:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000414:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000416:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000418:	4b39      	ldr	r3, [pc, #228]	@ (8000500 <main+0x2a8>)
 800041a:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800041e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	6197      	str	r7, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000422:	6113      	str	r3, [r2, #16]
{
 8000424:	2500      	movs	r5, #0
		  if(current_counter > previous_counter){
 8000426:	4e37      	ldr	r6, [pc, #220]	@ (8000504 <main+0x2ac>)
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000428:	4f29      	ldr	r7, [pc, #164]	@ (80004d0 <main+0x278>)
	  current_counter = Switches_getCounter();
 800042a:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8000508 <main+0x2b0>
 800042e:	f001 f963 	bl	80016f8 <Switches_getCounter>
	  if(current_counter < 4 && current_counter>=0) {
 8000432:	2803      	cmp	r0, #3
	  current_counter = Switches_getCounter();
 8000434:	f888 0000 	strb.w	r0, [r8]
	  if(current_counter < 4 && current_counter>=0) {
 8000438:	d81c      	bhi.n	8000474 <main+0x21c>
		  if(current_counter > previous_counter){
 800043a:	7833      	ldrb	r3, [r6, #0]
 800043c:	4298      	cmp	r0, r3
 800043e:	d92a      	bls.n	8000496 <main+0x23e>
			  trigger++;
 8000440:	4b32      	ldr	r3, [pc, #200]	@ (800050c <main+0x2b4>)
			  if(trigger > head){
 8000442:	4933      	ldr	r1, [pc, #204]	@ (8000510 <main+0x2b8>)
			  trigger++;
 8000444:	781a      	ldrb	r2, [r3, #0]
			  previous_counter = current_counter;
 8000446:	7030      	strb	r0, [r6, #0]
			  trigger++;
 8000448:	3201      	adds	r2, #1
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	701a      	strb	r2, [r3, #0]
			  if(trigger > head){
 800044e:	780b      	ldrb	r3, [r1, #0]
 8000450:	429a      	cmp	r2, r3
 8000452:	d909      	bls.n	8000468 <main+0x210>
				  head++;
 8000454:	3301      	adds	r3, #1
 8000456:	b2db      	uxtb	r3, r3
 8000458:	700b      	strb	r3, [r1, #0]
				  tail++;
 800045a:	492e      	ldr	r1, [pc, #184]	@ (8000514 <main+0x2bc>)
 800045c:	780a      	ldrb	r2, [r1, #0]
 800045e:	3201      	adds	r2, #1
 8000460:	700a      	strb	r2, [r1, #0]
				  content.line0_index = content.line1_index;
 8000462:	7862      	ldrb	r2, [r4, #1]
				  content.line1_index = head;
 8000464:	7063      	strb	r3, [r4, #1]
				  content.line0_index = content.line1_index;
 8000466:	7022      	strb	r2, [r4, #0]
			  if(content.sign_index == 0)
 8000468:	78a3      	ldrb	r3, [r4, #2]
 800046a:	b90b      	cbnz	r3, 8000470 <main+0x218>
				  content.sign_index=1;
 800046c:	2301      	movs	r3, #1
 800046e:	70a3      	strb	r3, [r4, #2]
			  display_refresh();
 8000470:	f7ff fe94 	bl	800019c <display_refresh>
	  if((HAL_GetTick() - prev_time) > 2000){
 8000474:	f000 f97c 	bl	8000770 <HAL_GetTick>
 8000478:	1b40      	subs	r0, r0, r5
 800047a:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 800047e:	d9d6      	bls.n	800042e <main+0x1d6>
		  prev_time = HAL_GetTick();
 8000480:	f000 f976 	bl	8000770 <HAL_GetTick>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000484:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
		  prev_time = HAL_GetTick();
 8000488:	4605      	mov	r5, r0
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800048a:	4638      	mov	r0, r7
 800048c:	f000 fac9 	bl	8000a22 <HAL_GPIO_TogglePin>
		  display_refresh();
 8000490:	f7ff fe84 	bl	800019c <display_refresh>
 8000494:	e7c9      	b.n	800042a <main+0x1d2>
		  else if(current_counter < previous_counter){
 8000496:	d2ed      	bcs.n	8000474 <main+0x21c>
			  trigger--;
 8000498:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <main+0x2b4>)
			  if(trigger < tail){
 800049a:	491e      	ldr	r1, [pc, #120]	@ (8000514 <main+0x2bc>)
			  trigger--;
 800049c:	781a      	ldrb	r2, [r3, #0]
			  previous_counter = current_counter;
 800049e:	7030      	strb	r0, [r6, #0]
			  trigger--;
 80004a0:	3a01      	subs	r2, #1
 80004a2:	b2d2      	uxtb	r2, r2
 80004a4:	701a      	strb	r2, [r3, #0]
			  if(trigger < tail){
 80004a6:	780b      	ldrb	r3, [r1, #0]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d209      	bcs.n	80004c0 <main+0x268>
				  tail--;
 80004ac:	3b01      	subs	r3, #1
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	700b      	strb	r3, [r1, #0]
				  head--;
 80004b2:	4917      	ldr	r1, [pc, #92]	@ (8000510 <main+0x2b8>)
 80004b4:	780a      	ldrb	r2, [r1, #0]
 80004b6:	3a01      	subs	r2, #1
 80004b8:	700a      	strb	r2, [r1, #0]
				  content.line1_index = content.line0_index;
 80004ba:	7822      	ldrb	r2, [r4, #0]
				  content.line0_index = tail;
 80004bc:	7023      	strb	r3, [r4, #0]
				  content.line1_index = content.line0_index;
 80004be:	7062      	strb	r2, [r4, #1]
			  if(content.sign_index == 1)
 80004c0:	78a3      	ldrb	r3, [r4, #2]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d1d4      	bne.n	8000470 <main+0x218>
				  content.sign_index = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	e7d1      	b.n	800046e <main+0x216>
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40011000 	.word	0x40011000
 80004d4:	40004400 	.word	0x40004400
 80004d8:	40010c00 	.word	0x40010c00
 80004dc:	10310000 	.word	0x10310000
 80004e0:	200000f8 	.word	0x200000f8
 80004e4:	20000140 	.word	0x20000140
 80004e8:	40005400 	.word	0x40005400
 80004ec:	000186a0 	.word	0x000186a0
 80004f0:	0800207c 	.word	0x0800207c
 80004f4:	200000a4 	.word	0x200000a4
 80004f8:	20000080 	.word	0x20000080
 80004fc:	20000004 	.word	0x20000004
 8000500:	e000ed00 	.word	0xe000ed00
 8000504:	200000f6 	.word	0x200000f6
 8000508:	200000f7 	.word	0x200000f7
 800050c:	200000f4 	.word	0x200000f4
 8000510:	20000000 	.word	0x20000000
 8000514:	200000f5 	.word	0x200000f5

08000518 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000518:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <HAL_MspInit+0x3c>)
{
 800051a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800051c:	699a      	ldr	r2, [r3, #24]
 800051e:	f042 0201 	orr.w	r2, r2, #1
 8000522:	619a      	str	r2, [r3, #24]
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	f002 0201 	and.w	r2, r2, #1
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	69da      	ldr	r2, [r3, #28]
 8000530:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000534:	61da      	str	r2, [r3, #28]
 8000536:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000542:	6853      	ldr	r3, [r2, #4]
 8000544:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000548:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	b002      	add	sp, #8
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800055c:	b510      	push	{r4, lr}
 800055e:	4604      	mov	r4, r0
 8000560:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	2210      	movs	r2, #16
 8000564:	2100      	movs	r1, #0
 8000566:	a802      	add	r0, sp, #8
 8000568:	f001 f8ec 	bl	8001744 <memset>
  if(hi2c->Instance==I2C1)
 800056c:	6822      	ldr	r2, [r4, #0]
 800056e:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <HAL_I2C_MspInit+0x58>)
 8000570:	429a      	cmp	r2, r3
 8000572:	d11c      	bne.n	80005ae <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000574:	4c10      	ldr	r4, [pc, #64]	@ (80005b8 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000576:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	4810      	ldr	r0, [pc, #64]	@ (80005bc <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	61a3      	str	r3, [r4, #24]
 8000582:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800058e:	2312      	movs	r3, #18
 8000590:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	f000 f966 	bl	8000868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800059c:	69e3      	ldr	r3, [r4, #28]
 800059e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a2:	61e3      	str	r3, [r4, #28]
 80005a4:	69e3      	ldr	r3, [r4, #28]
 80005a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005ae:	b006      	add	sp, #24
 80005b0:	bd10      	pop	{r4, pc}
 80005b2:	bf00      	nop
 80005b4:	40005400 	.word	0x40005400
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010c00 	.word	0x40010c00

080005c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b510      	push	{r4, lr}
 80005c2:	4604      	mov	r4, r0
 80005c4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	2210      	movs	r2, #16
 80005c8:	2100      	movs	r1, #0
 80005ca:	a802      	add	r0, sp, #8
 80005cc:	f001 f8ba 	bl	8001744 <memset>
  if(huart->Instance==USART2)
 80005d0:	6822      	ldr	r2, [r4, #0]
 80005d2:	4b16      	ldr	r3, [pc, #88]	@ (800062c <HAL_UART_MspInit+0x6c>)
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d126      	bne.n	8000626 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d8:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 80005dc:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	4814      	ldr	r0, [pc, #80]	@ (8000630 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80005e4:	61da      	str	r2, [r3, #28]
 80005e6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ea:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	f042 0204 	orr.w	r2, r2, #4
 80005f8:	619a      	str	r2, [r3, #24]
 80005fa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f000 f92a 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2108      	movs	r1, #8
 8000616:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f000 f921 	bl	8000868 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000626:	b006      	add	sp, #24
 8000628:	bd10      	pop	{r4, pc}
 800062a:	bf00      	nop
 800062c:	40004400 	.word	0x40004400
 8000630:	40010800 	.word	0x40010800

08000634 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler>

08000636 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <HardFault_Handler>

08000638 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <MemManage_Handler>

0800063a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <BusFault_Handler>

0800063c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler>

0800063e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063e:	4770      	bx	lr

08000640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000640:	4770      	bx	lr

08000642 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000642:	4770      	bx	lr

08000644 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000644:	f000 b888 	b.w	8000758 <HAL_IncTick>

08000648 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLOCK_Pin);
 800064a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800064e:	f000 f9f3 	bl	8000a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  Switches_calcEncoder();
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Switches_calcEncoder();
 8000656:	f001 b807 	b.w	8001668 <Switches_calcEncoder>
	...

0800065c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4a0b      	ldr	r2, [pc, #44]	@ (800068c <_sbrk+0x30>)
{
 800065e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000660:	6811      	ldr	r1, [r2, #0]
{
 8000662:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000664:	b909      	cbnz	r1, 800066a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000666:	490a      	ldr	r1, [pc, #40]	@ (8000690 <_sbrk+0x34>)
 8000668:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	6810      	ldr	r0, [r2, #0]
 800066c:	4909      	ldr	r1, [pc, #36]	@ (8000694 <_sbrk+0x38>)
 800066e:	4c0a      	ldr	r4, [pc, #40]	@ (8000698 <_sbrk+0x3c>)
 8000670:	4403      	add	r3, r0
 8000672:	1b09      	subs	r1, r1, r4
 8000674:	428b      	cmp	r3, r1
 8000676:	d906      	bls.n	8000686 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000678:	f001 f86c 	bl	8001754 <__errno>
 800067c:	230c      	movs	r3, #12
 800067e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000680:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000684:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000686:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000688:	e7fc      	b.n	8000684 <_sbrk+0x28>
 800068a:	bf00      	nop
 800068c:	20000194 	.word	0x20000194
 8000690:	200002f0 	.word	0x200002f0
 8000694:	20002800 	.word	0x20002800
 8000698:	00000400 	.word	0x00000400

0800069c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	4770      	bx	lr
	...

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a0:	f7ff fffc 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006a6:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a09      	ldr	r2, [pc, #36]	@ (80006e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006bc:	4c09      	ldr	r4, [pc, #36]	@ (80006e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ca:	f001 f849 	bl	8001760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fdc3 	bl	8000258 <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006dc:	08002160 	.word	0x08002160
  ldr r2, =_sbss
 80006e0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006e4:	200002ec 	.word	0x200002ec

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_InitTick+0x3c>)
{
 80006f0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80006fc:	4a0b      	ldr	r2, [pc, #44]	@ (800072c <HAL_InitTick+0x40>)
 80006fe:	6810      	ldr	r0, [r2, #0]
 8000700:	fbb0 f0f3 	udiv	r0, r0, r3
 8000704:	f000 f89c 	bl	8000840 <HAL_SYSTICK_Config>
 8000708:	4604      	mov	r4, r0
 800070a:	b958      	cbnz	r0, 8000724 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070c:	2d0f      	cmp	r5, #15
 800070e:	d809      	bhi.n	8000724 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000710:	4602      	mov	r2, r0
 8000712:	4629      	mov	r1, r5
 8000714:	f04f 30ff 	mov.w	r0, #4294967295
 8000718:	f000 f854 	bl	80007c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800071c:	4620      	mov	r0, r4
 800071e:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <HAL_InitTick+0x44>)
 8000720:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000722:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000724:	2001      	movs	r0, #1
 8000726:	e7fc      	b.n	8000722 <HAL_InitTick+0x36>
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004
 8000730:	2000000c 	.word	0x2000000c

08000734 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <HAL_Init+0x20>)
{
 8000736:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000742:	f000 f82d 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000746:	200f      	movs	r0, #15
 8000748:	f7ff ffd0 	bl	80006ec <HAL_InitTick>
  HAL_MspInit();
 800074c:	f7ff fee4 	bl	8000518 <HAL_MspInit>
}
 8000750:	2000      	movs	r0, #0
 8000752:	bd08      	pop	{r3, pc}
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000758:	4a03      	ldr	r2, [pc, #12]	@ (8000768 <HAL_IncTick+0x10>)
 800075a:	4b04      	ldr	r3, [pc, #16]	@ (800076c <HAL_IncTick+0x14>)
 800075c:	6811      	ldr	r1, [r2, #0]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	440b      	add	r3, r1
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000198 	.word	0x20000198
 800076c:	20000008 	.word	0x20000008

08000770 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000770:	4b01      	ldr	r3, [pc, #4]	@ (8000778 <HAL_GetTick+0x8>)
 8000772:	6818      	ldr	r0, [r3, #0]
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000198 	.word	0x20000198

0800077c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800077c:	b538      	push	{r3, r4, r5, lr}
 800077e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000780:	f7ff fff6 	bl	8000770 <HAL_GetTick>
 8000784:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000786:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000788:	bf1e      	ittt	ne
 800078a:	4b04      	ldrne	r3, [pc, #16]	@ (800079c <HAL_Delay+0x20>)
 800078c:	781b      	ldrbne	r3, [r3, #0]
 800078e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000790:	f7ff ffee 	bl	8000770 <HAL_GetTick>
 8000794:	1b43      	subs	r3, r0, r5
 8000796:	42a3      	cmp	r3, r4
 8000798:	d3fa      	bcc.n	8000790 <HAL_Delay+0x14>
  {
  }
}
 800079a:	bd38      	pop	{r3, r4, r5, pc}
 800079c:	20000008 	.word	0x20000008

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	4907      	ldr	r1, [pc, #28]	@ (80007c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80007ae:	0412      	lsls	r2, r2, #16
 80007b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80007bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80007be:	4770      	bx	lr
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c6:	b530      	push	{r4, r5, lr}
 80007c8:	68dc      	ldr	r4, [r3, #12]
 80007ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	bf28      	it	cs
 80007d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007da:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e0:	bf94      	ite	ls
 80007e2:	2400      	movls	r4, #0
 80007e4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e6:	fa05 f303 	lsl.w	r3, r5, r3
 80007ea:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ee:	40a5      	lsls	r5, r4
 80007f0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80007f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	bfac      	ite	ge
 80007fe:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	4a07      	ldrlt	r2, [pc, #28]	@ (8000820 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000808:	b2db      	uxtb	r3, r3
 800080a:	bfab      	itete	ge
 800080c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800081a:	bd30      	pop	{r4, r5, pc}
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	e000ed14 	.word	0xe000ed14

08000824 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000824:	2800      	cmp	r0, #0
 8000826:	db07      	blt.n	8000838 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000828:	2301      	movs	r3, #1
 800082a:	0941      	lsrs	r1, r0, #5
 800082c:	4a03      	ldr	r2, [pc, #12]	@ (800083c <HAL_NVIC_EnableIRQ+0x18>)
 800082e:	f000 001f 	and.w	r0, r0, #31
 8000832:	4083      	lsls	r3, r0
 8000834:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100

08000840 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	3801      	subs	r0, #1
 8000842:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000846:	d20b      	bcs.n	8000860 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000848:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	21f0      	movs	r1, #240	@ 0xf0
 800084e:	4a05      	ldr	r2, [pc, #20]	@ (8000864 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000850:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000856:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000858:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000860:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800086e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000870:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 80009f0 <HAL_GPIO_Init+0x188>
 8000874:	4b5f      	ldr	r3, [pc, #380]	@ (80009f4 <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 8000876:	f8df e180 	ldr.w	lr, [pc, #384]	@ 80009f8 <HAL_GPIO_Init+0x190>
 800087a:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 80009fc <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087e:	680d      	ldr	r5, [r1, #0]
 8000880:	fa35 f406 	lsrs.w	r4, r5, r6
 8000884:	d102      	bne.n	800088c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8000886:	b003      	add	sp, #12
 8000888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800088c:	2701      	movs	r7, #1
 800088e:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000890:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 8000894:	ea37 0505 	bics.w	r5, r7, r5
 8000898:	d175      	bne.n	8000986 <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 800089a:	684d      	ldr	r5, [r1, #4]
 800089c:	2d03      	cmp	r5, #3
 800089e:	d806      	bhi.n	80008ae <HAL_GPIO_Init+0x46>
 80008a0:	3d01      	subs	r5, #1
 80008a2:	2d02      	cmp	r5, #2
 80008a4:	d87e      	bhi.n	80009a4 <HAL_GPIO_Init+0x13c>
 80008a6:	e8df f005 	tbb	[pc, r5]
 80008aa:	948f      	.short	0x948f
 80008ac:	9a          	.byte	0x9a
 80008ad:	00          	.byte	0x00
 80008ae:	2d12      	cmp	r5, #18
 80008b0:	f000 8092 	beq.w	80009d8 <HAL_GPIO_Init+0x170>
 80008b4:	d869      	bhi.n	800098a <HAL_GPIO_Init+0x122>
 80008b6:	2d11      	cmp	r5, #17
 80008b8:	f000 8088 	beq.w	80009cc <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008bc:	2cff      	cmp	r4, #255	@ 0xff
 80008be:	bf98      	it	ls
 80008c0:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008c2:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c6:	bf88      	it	hi
 80008c8:	f100 0904 	addhi.w	r9, r0, #4
 80008cc:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008d0:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d4:	bf88      	it	hi
 80008d6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008d8:	fa0b fa05 	lsl.w	sl, fp, r5
 80008dc:	ea27 070a 	bic.w	r7, r7, sl
 80008e0:	fa02 f505 	lsl.w	r5, r2, r5
 80008e4:	432f      	orrs	r7, r5
 80008e6:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ea:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80008ee:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80008f2:	d048      	beq.n	8000986 <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008f4:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80008f8:	f026 0703 	bic.w	r7, r6, #3
 80008fc:	f045 0501 	orr.w	r5, r5, #1
 8000900:	f8cc 5018 	str.w	r5, [ip, #24]
 8000904:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000908:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800090c:	f005 0501 	and.w	r5, r5, #1
 8000910:	9501      	str	r5, [sp, #4]
 8000912:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000916:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800091a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800091c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000920:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000922:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000926:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800092a:	4d35      	ldr	r5, [pc, #212]	@ (8000a00 <HAL_GPIO_Init+0x198>)
 800092c:	42a8      	cmp	r0, r5
 800092e:	d05a      	beq.n	80009e6 <HAL_GPIO_Init+0x17e>
 8000930:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8000934:	42a8      	cmp	r0, r5
 8000936:	d058      	beq.n	80009ea <HAL_GPIO_Init+0x182>
 8000938:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800093c:	42a8      	cmp	r0, r5
 800093e:	bf14      	ite	ne
 8000940:	2503      	movne	r5, #3
 8000942:	2502      	moveq	r5, #2
 8000944:	fa05 f50a 	lsl.w	r5, r5, sl
 8000948:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800094c:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800094e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000950:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000954:	bf14      	ite	ne
 8000956:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000958:	43a5      	biceq	r5, r4
 800095a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800095c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800095e:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000962:	bf14      	ite	ne
 8000964:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000966:	43a5      	biceq	r5, r4
 8000968:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800096a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800096c:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000970:	bf14      	ite	ne
 8000972:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000974:	43a5      	biceq	r5, r4
 8000976:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000978:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800097a:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800097e:	bf14      	ite	ne
 8000980:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000982:	43a5      	biceq	r5, r4
 8000984:	601d      	str	r5, [r3, #0]
	position++;
 8000986:	3601      	adds	r6, #1
 8000988:	e779      	b.n	800087e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800098a:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8000a04 <HAL_GPIO_Init+0x19c>
 800098e:	454d      	cmp	r5, r9
 8000990:	d008      	beq.n	80009a4 <HAL_GPIO_Init+0x13c>
 8000992:	d811      	bhi.n	80009b8 <HAL_GPIO_Init+0x150>
 8000994:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8000998:	454d      	cmp	r5, r9
 800099a:	d003      	beq.n	80009a4 <HAL_GPIO_Init+0x13c>
 800099c:	4575      	cmp	r5, lr
 800099e:	d001      	beq.n	80009a4 <HAL_GPIO_Init+0x13c>
 80009a0:	4545      	cmp	r5, r8
 80009a2:	d18b      	bne.n	80008bc <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a4:	688a      	ldr	r2, [r1, #8]
 80009a6:	b1e2      	cbz	r2, 80009e2 <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009a8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80009aa:	bf08      	it	eq
 80009ac:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ae:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80009b2:	bf18      	it	ne
 80009b4:	6147      	strne	r7, [r0, #20]
 80009b6:	e781      	b.n	80008bc <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80009b8:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8000a08 <HAL_GPIO_Init+0x1a0>
 80009bc:	454d      	cmp	r5, r9
 80009be:	d0f1      	beq.n	80009a4 <HAL_GPIO_Init+0x13c>
 80009c0:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80009c4:	454d      	cmp	r5, r9
 80009c6:	e7ec      	b.n	80009a2 <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c8:	68ca      	ldr	r2, [r1, #12]
          break;
 80009ca:	e777      	b.n	80008bc <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009cc:	68ca      	ldr	r2, [r1, #12]
 80009ce:	3204      	adds	r2, #4
          break;
 80009d0:	e774      	b.n	80008bc <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009d2:	68ca      	ldr	r2, [r1, #12]
 80009d4:	3208      	adds	r2, #8
          break;
 80009d6:	e771      	b.n	80008bc <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d8:	68ca      	ldr	r2, [r1, #12]
 80009da:	320c      	adds	r2, #12
          break;
 80009dc:	e76e      	b.n	80008bc <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80009de:	2200      	movs	r2, #0
 80009e0:	e76c      	b.n	80008bc <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e2:	2204      	movs	r2, #4
 80009e4:	e76a      	b.n	80008bc <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e6:	2500      	movs	r5, #0
 80009e8:	e7ac      	b.n	8000944 <HAL_GPIO_Init+0xdc>
 80009ea:	2501      	movs	r5, #1
 80009ec:	e7aa      	b.n	8000944 <HAL_GPIO_Init+0xdc>
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010400 	.word	0x40010400
 80009f8:	10210000 	.word	0x10210000
 80009fc:	10110000 	.word	0x10110000
 8000a00:	40010800 	.word	0x40010800
 8000a04:	10220000 	.word	0x10220000
 8000a08:	10310000 	.word	0x10310000

08000a0c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a0c:	6883      	ldr	r3, [r0, #8]
 8000a0e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000a10:	bf14      	ite	ne
 8000a12:	2001      	movne	r0, #1
 8000a14:	2000      	moveq	r0, #0
 8000a16:	4770      	bx	lr

08000a18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a18:	b10a      	cbz	r2, 8000a1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a1a:	6101      	str	r1, [r0, #16]
  }
}
 8000a1c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a1e:	0409      	lsls	r1, r1, #16
 8000a20:	e7fb      	b.n	8000a1a <HAL_GPIO_WritePin+0x2>

08000a22 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a22:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a24:	ea01 0203 	and.w	r2, r1, r3
 8000a28:	ea21 0103 	bic.w	r1, r1, r3
 8000a2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000a30:	6101      	str	r1, [r0, #16]
}
 8000a32:	4770      	bx	lr

08000a34 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000a3a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a3c:	6951      	ldr	r1, [r2, #20]
 8000a3e:	4201      	tst	r1, r0
 8000a40:	d002      	beq.n	8000a48 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a42:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a44:	f7ff fff6 	bl	8000a34 <HAL_GPIO_EXTI_Callback>
}
 8000a48:	bd08      	pop	{r3, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010400 	.word	0x40010400

08000a50 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a50:	6801      	ldr	r1, [r0, #0]
 8000a52:	2200      	movs	r2, #0
 8000a54:	694b      	ldr	r3, [r1, #20]
 8000a56:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8000a5a:	d010      	beq.n	8000a7e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a5c:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8000a60:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000a62:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000a64:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000a66:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a6a:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000a6e:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a70:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	4770      	bx	lr
  }
  return HAL_OK;
 8000a7e:	4618      	mov	r0, r3
}
 8000a80:	4770      	bx	lr

08000a82 <I2C_WaitOnFlagUntilTimeout>:
{
 8000a82:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8000a86:	4606      	mov	r6, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	4691      	mov	r9, r2
 8000a8c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8000a92:	6833      	ldr	r3, [r6, #0]
 8000a94:	f1ba 0f01 	cmp.w	sl, #1
 8000a98:	bf0c      	ite	eq
 8000a9a:	695c      	ldreq	r4, [r3, #20]
 8000a9c:	699c      	ldrne	r4, [r3, #24]
 8000a9e:	ea27 0404 	bic.w	r4, r7, r4
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fab4 f484 	clz	r4, r4
 8000aa8:	0964      	lsrs	r4, r4, #5
 8000aaa:	45a1      	cmp	r9, r4
 8000aac:	d001      	beq.n	8000ab2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8000aae:	2000      	movs	r0, #0
 8000ab0:	e025      	b.n	8000afe <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8000ab2:	1c6a      	adds	r2, r5, #1
 8000ab4:	d0ee      	beq.n	8000a94 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ab6:	f7ff fe5b 	bl	8000770 <HAL_GetTick>
 8000aba:	9b08      	ldr	r3, [sp, #32]
 8000abc:	1ac0      	subs	r0, r0, r3
 8000abe:	42a8      	cmp	r0, r5
 8000ac0:	d801      	bhi.n	8000ac6 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d1e5      	bne.n	8000a92 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000ac6:	6833      	ldr	r3, [r6, #0]
 8000ac8:	f1ba 0f01 	cmp.w	sl, #1
 8000acc:	bf0c      	ite	eq
 8000ace:	695b      	ldreq	r3, [r3, #20]
 8000ad0:	699b      	ldrne	r3, [r3, #24]
 8000ad2:	ea27 0303 	bic.w	r3, r7, r3
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	fab3 f383 	clz	r3, r3
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	4599      	cmp	r9, r3
 8000ae0:	d1d7      	bne.n	8000a92 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8000ae2:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8000ae4:	2220      	movs	r2, #32
          return HAL_ERROR;
 8000ae6:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8000ae8:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8000aea:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000aee:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000af2:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000af4:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000af8:	f042 0220 	orr.w	r2, r2, #32
 8000afc:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8000afe:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08000b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b06:	4604      	mov	r4, r0
 8000b08:	460f      	mov	r7, r1
 8000b0a:	4616      	mov	r6, r2
 8000b0c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000b0e:	6825      	ldr	r5, [r4, #0]
 8000b10:	6968      	ldr	r0, [r5, #20]
 8000b12:	ea27 0000 	bic.w	r0, r7, r0
 8000b16:	b280      	uxth	r0, r0
 8000b18:	b1c0      	cbz	r0, 8000b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b1a:	696b      	ldr	r3, [r5, #20]
 8000b1c:	055a      	lsls	r2, r3, #21
 8000b1e:	d517      	bpl.n	8000b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b20:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b22:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b28:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b2a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8000b2e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b34:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b38:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b42:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000b44:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000b46:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8000b48:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8000b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000b50:	1c73      	adds	r3, r6, #1
 8000b52:	d0dd      	beq.n	8000b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b54:	f7ff fe0c 	bl	8000770 <HAL_GetTick>
 8000b58:	eba0 0008 	sub.w	r0, r0, r8
 8000b5c:	42b0      	cmp	r0, r6
 8000b5e:	d801      	bhi.n	8000b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8000b60:	2e00      	cmp	r6, #0
 8000b62:	d1d4      	bne.n	8000b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	695a      	ldr	r2, [r3, #20]
 8000b68:	ea27 0202 	bic.w	r2, r7, r2
 8000b6c:	b292      	uxth	r2, r2
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d0cd      	beq.n	8000b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000b72:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b74:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000b76:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000b78:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b7c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b82:	4313      	orrs	r3, r2
 8000b84:	e7dd      	b.n	8000b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08000b86 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000b86:	b570      	push	{r4, r5, r6, lr}
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	061b      	lsls	r3, r3, #24
 8000b94:	d501      	bpl.n	8000b9a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000b96:	2000      	movs	r0, #0
 8000b98:	e01e      	b.n	8000bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f7ff ff58 	bl	8000a50 <I2C_IsAcknowledgeFailed>
 8000ba0:	b9c8      	cbnz	r0, 8000bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000ba2:	1c6a      	adds	r2, r5, #1
 8000ba4:	d0f3      	beq.n	8000b8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ba6:	f7ff fde3 	bl	8000770 <HAL_GetTick>
 8000baa:	1b80      	subs	r0, r0, r6
 8000bac:	42a8      	cmp	r0, r5
 8000bae:	d801      	bhi.n	8000bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d1ec      	bne.n	8000b8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8000bbc:	d1e7      	bne.n	8000b8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8000bbe:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000bc0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000bc2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000bc6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000bca:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000bcc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000bd0:	f042 0220 	orr.w	r2, r2, #32
 8000bd4:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8000bd6:	2001      	movs	r0, #1
}
 8000bd8:	bd70      	pop	{r4, r5, r6, pc}

08000bda <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000bda:	b570      	push	{r4, r5, r6, lr}
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460d      	mov	r5, r1
 8000be0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	075b      	lsls	r3, r3, #29
 8000be8:	d501      	bpl.n	8000bee <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000bea:	2000      	movs	r0, #0
 8000bec:	e01e      	b.n	8000c2c <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ff2e 	bl	8000a50 <I2C_IsAcknowledgeFailed>
 8000bf4:	b9c8      	cbnz	r0, 8000c2a <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000bf6:	1c6a      	adds	r2, r5, #1
 8000bf8:	d0f3      	beq.n	8000be2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bfa:	f7ff fdb9 	bl	8000770 <HAL_GetTick>
 8000bfe:	1b80      	subs	r0, r0, r6
 8000c00:	42a8      	cmp	r0, r5
 8000c02:	d801      	bhi.n	8000c08 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d1ec      	bne.n	8000be2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f013 0304 	ands.w	r3, r3, #4
 8000c10:	d1e7      	bne.n	8000be2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8000c12:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000c14:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000c16:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c1e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8000c20:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c24:	f042 0220 	orr.w	r2, r2, #32
 8000c28:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8000c2a:	2001      	movs	r0, #1
}
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c30 <HAL_I2C_Init>:
{
 8000c30:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000c32:	4604      	mov	r4, r0
 8000c34:	b908      	cbnz	r0, 8000c3a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
}
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c3a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000c3e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000c42:	b91b      	cbnz	r3, 8000c4c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000c44:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8000c48:	f7ff fc88 	bl	800055c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c4c:	2324      	movs	r3, #36	@ 0x24
 8000c4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c6a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c6c:	f000 fbc0 	bl	80013f0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c70:	4b3f      	ldr	r3, [pc, #252]	@ (8000d70 <HAL_I2C_Init+0x140>)
 8000c72:	6865      	ldr	r5, [r4, #4]
 8000c74:	429d      	cmp	r5, r3
 8000c76:	bf94      	ite	ls
 8000c78:	4b3e      	ldrls	r3, [pc, #248]	@ (8000d74 <HAL_I2C_Init+0x144>)
 8000c7a:	4b3f      	ldrhi	r3, [pc, #252]	@ (8000d78 <HAL_I2C_Init+0x148>)
 8000c7c:	4298      	cmp	r0, r3
 8000c7e:	bf8c      	ite	hi
 8000c80:	2300      	movhi	r3, #0
 8000c82:	2301      	movls	r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1d6      	bne.n	8000c36 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c88:	4e39      	ldr	r6, [pc, #228]	@ (8000d70 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d7c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c8c:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8000c8e:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c92:	bf88      	it	hi
 8000c94:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c98:	6822      	ldr	r2, [r4, #0]
 8000c9a:	6851      	ldr	r1, [r2, #4]
 8000c9c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000ca0:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ca4:	bf82      	ittt	hi
 8000ca6:	4373      	mulhi	r3, r6
 8000ca8:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8000cac:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cb0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cb2:	6a11      	ldr	r1, [r2, #32]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cbe:	69d1      	ldr	r1, [r2, #28]
 8000cc0:	1e43      	subs	r3, r0, #1
 8000cc2:	482b      	ldr	r0, [pc, #172]	@ (8000d70 <HAL_I2C_Init+0x140>)
 8000cc4:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8000cc8:	4285      	cmp	r5, r0
 8000cca:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000cce:	d832      	bhi.n	8000d36 <HAL_I2C_Init+0x106>
 8000cd0:	006d      	lsls	r5, r5, #1
 8000cd2:	fbb3 f3f5 	udiv	r3, r3, r5
 8000cd6:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4203      	tst	r3, r0
 8000cde:	d042      	beq.n	8000d66 <HAL_I2C_Init+0x136>
 8000ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ce4:	4319      	orrs	r1, r3
 8000ce6:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ce8:	6811      	ldr	r1, [r2, #0]
 8000cea:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8000cee:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cf8:	6891      	ldr	r1, [r2, #8]
 8000cfa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8000cfe:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8000d02:	4303      	orrs	r3, r0
 8000d04:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d0c:	68d1      	ldr	r1, [r2, #12]
 8000d0e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8000d12:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8000d16:	4303      	orrs	r3, r0
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000d1c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d1e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000d26:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d28:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d2e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d30:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8000d34:	e780      	b.n	8000c38 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d36:	68a0      	ldr	r0, [r4, #8]
 8000d38:	b950      	cbnz	r0, 8000d50 <HAL_I2C_Init+0x120>
 8000d3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d3e:	fbb3 f3f5 	udiv	r3, r3, r5
 8000d42:	3301      	adds	r3, #1
 8000d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d48:	b17b      	cbz	r3, 8000d6a <HAL_I2C_Init+0x13a>
 8000d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d4e:	e7c9      	b.n	8000ce4 <HAL_I2C_Init+0xb4>
 8000d50:	2019      	movs	r0, #25
 8000d52:	4368      	muls	r0, r5
 8000d54:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d58:	3301      	adds	r3, #1
 8000d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d5e:	b123      	cbz	r3, 8000d6a <HAL_I2C_Init+0x13a>
 8000d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d64:	e7be      	b.n	8000ce4 <HAL_I2C_Init+0xb4>
 8000d66:	2304      	movs	r3, #4
 8000d68:	e7bc      	b.n	8000ce4 <HAL_I2C_Init+0xb4>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e7ba      	b.n	8000ce4 <HAL_I2C_Init+0xb4>
 8000d6e:	bf00      	nop
 8000d70:	000186a0 	.word	0x000186a0
 8000d74:	001e847f 	.word	0x001e847f
 8000d78:	003d08ff 	.word	0x003d08ff
 8000d7c:	000f4240 	.word	0x000f4240

08000d80 <HAL_I2C_Master_Transmit>:
{
 8000d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d84:	4604      	mov	r4, r0
 8000d86:	b085      	sub	sp, #20
 8000d88:	4698      	mov	r8, r3
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4691      	mov	r9, r2
 8000d8e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fcee 	bl	8000770 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d94:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8000d98:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d9a:	2b20      	cmp	r3, #32
 8000d9c:	d004      	beq.n	8000da8 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8000d9e:	2502      	movs	r5, #2
}
 8000da0:	4628      	mov	r0, r5
 8000da2:	b005      	add	sp, #20
 8000da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000da8:	9000      	str	r0, [sp, #0]
 8000daa:	2319      	movs	r3, #25
 8000dac:	2201      	movs	r2, #1
 8000dae:	4620      	mov	r0, r4
 8000db0:	495c      	ldr	r1, [pc, #368]	@ (8000f24 <HAL_I2C_Master_Transmit+0x1a4>)
 8000db2:	f7ff fe66 	bl	8000a82 <I2C_WaitOnFlagUntilTimeout>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d1f1      	bne.n	8000d9e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8000dba:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d0ed      	beq.n	8000d9e <HAL_I2C_Master_Transmit+0x1e>
 8000dc2:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dc4:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8000dc6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dca:	680b      	ldr	r3, [r1, #0]
 8000dcc:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8000dce:	bf5e      	ittt	pl
 8000dd0:	680b      	ldrpl	r3, [r1, #0]
 8000dd2:	f043 0301 	orrpl.w	r3, r3, #1
 8000dd6:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000dd8:	680b      	ldr	r3, [r1, #0]
 8000dda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000dde:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000de0:	2321      	movs	r3, #33	@ 0x21
 8000de2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000de6:	2310      	movs	r3, #16
 8000de8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8000df0:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000df4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8000df6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000dfa:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8000f28 <HAL_I2C_Master_Transmit+0x1a8>)
 8000dfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000e00:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000e02:	2b08      	cmp	r3, #8
 8000e04:	d004      	beq.n	8000e10 <HAL_I2C_Master_Transmit+0x90>
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d002      	beq.n	8000e10 <HAL_I2C_Master_Transmit+0x90>
 8000e0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8000e0e:	d104      	bne.n	8000e1a <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e10:	680b      	ldr	r3, [r1, #0]
 8000e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e16:	600b      	str	r3, [r1, #0]
 8000e18:	e002      	b.n	8000e20 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000e1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e1c:	2b12      	cmp	r3, #18
 8000e1e:	d0f7      	beq.n	8000e10 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e20:	2200      	movs	r2, #0
 8000e22:	463b      	mov	r3, r7
 8000e24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000e28:	4620      	mov	r0, r4
 8000e2a:	9600      	str	r6, [sp, #0]
 8000e2c:	f7ff fe29 	bl	8000a82 <I2C_WaitOnFlagUntilTimeout>
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	b140      	cbz	r0, 8000e46 <HAL_I2C_Master_Transmit+0xc6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000e34:	6813      	ldr	r3, [r2, #0]
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	d401      	bmi.n	8000e3e <HAL_I2C_Master_Transmit+0xbe>
      return HAL_ERROR;
 8000e3a:	2501      	movs	r5, #1
 8000e3c:	e7b0      	b.n	8000da0 <HAL_I2C_Master_Transmit+0x20>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000e3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e42:	6423      	str	r3, [r4, #64]	@ 0x40
 8000e44:	e7f9      	b.n	8000e3a <HAL_I2C_Master_Transmit+0xba>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e46:	6923      	ldr	r3, [r4, #16]
 8000e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e4c:	d121      	bne.n	8000e92 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000e4e:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8000e52:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e54:	4633      	mov	r3, r6
 8000e56:	463a      	mov	r2, r7
 8000e58:	4620      	mov	r0, r4
 8000e5a:	4934      	ldr	r1, [pc, #208]	@ (8000f2c <HAL_I2C_Master_Transmit+0x1ac>)
 8000e5c:	f7ff fe51 	bl	8000b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e60:	4605      	mov	r5, r0
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d1e9      	bne.n	8000e3a <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	9003      	str	r0, [sp, #12]
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	9203      	str	r2, [sp, #12]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000e74:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8000e76:	b9f3      	cbnz	r3, 8000eb6 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e78:	6821      	ldr	r1, [r4, #0]
 8000e7a:	680a      	ldr	r2, [r1, #0]
 8000e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e80:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e82:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000e84:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000e88:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e8c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8000e90:	e786      	b.n	8000da0 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000e92:	11eb      	asrs	r3, r5, #7
 8000e94:	f003 0306 	and.w	r3, r3, #6
 8000e98:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000e9c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	4633      	mov	r3, r6
 8000ea2:	463a      	mov	r2, r7
 8000ea4:	4922      	ldr	r1, [pc, #136]	@ (8000f30 <HAL_I2C_Master_Transmit+0x1b0>)
 8000ea6:	f7ff fe2c 	bl	8000b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d1c5      	bne.n	8000e3a <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	b2ed      	uxtb	r5, r5
 8000eb2:	611d      	str	r5, [r3, #16]
 8000eb4:	e7ce      	b.n	8000e54 <HAL_I2C_Master_Transmit+0xd4>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eb6:	4632      	mov	r2, r6
 8000eb8:	4639      	mov	r1, r7
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f7ff fe63 	bl	8000b86 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ec0:	b140      	cbz	r0, 8000ed4 <HAL_I2C_Master_Transmit+0x154>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ec2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d1b8      	bne.n	8000e3a <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ec8:	6822      	ldr	r2, [r4, #0]
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e7b2      	b.n	8000e3a <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ed4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000ed6:	6820      	ldr	r0, [r4, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000ede:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000ee0:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8000ee2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8000eea:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000eec:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8000ef0:	1e51      	subs	r1, r2, #1
 8000ef2:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ef4:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8000ef8:	8521      	strh	r1, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000efa:	d00a      	beq.n	8000f12 <HAL_I2C_Master_Transmit+0x192>
 8000efc:	b149      	cbz	r1, 8000f12 <HAL_I2C_Master_Transmit+0x192>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000efe:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8000f00:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f02:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000f04:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8000f06:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8000f08:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8000f10:	8522      	strh	r2, [r4, #40]	@ 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f12:	4632      	mov	r2, r6
 8000f14:	4639      	mov	r1, r7
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fe5f 	bl	8000bda <I2C_WaitOnBTFFlagUntilTimeout>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d0a9      	beq.n	8000e74 <HAL_I2C_Master_Transmit+0xf4>
 8000f20:	e7cf      	b.n	8000ec2 <HAL_I2C_Master_Transmit+0x142>
 8000f22:	bf00      	nop
 8000f24:	00100002 	.word	0x00100002
 8000f28:	ffff0000 	.word	0xffff0000
 8000f2c:	00010002 	.word	0x00010002
 8000f30:	00010008 	.word	0x00010008

08000f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f38:	4605      	mov	r5, r0
 8000f3a:	b338      	cbz	r0, 8000f8c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3c:	6803      	ldr	r3, [r0, #0]
 8000f3e:	07db      	lsls	r3, r3, #31
 8000f40:	d410      	bmi.n	8000f64 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f42:	682b      	ldr	r3, [r5, #0]
 8000f44:	079f      	lsls	r7, r3, #30
 8000f46:	d45e      	bmi.n	8001006 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	0719      	lsls	r1, r3, #28
 8000f4c:	f100 8095 	bmi.w	800107a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	075a      	lsls	r2, r3, #29
 8000f54:	f100 80c1 	bmi.w	80010da <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f58:	69eb      	ldr	r3, [r5, #28]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 812c 	bne.w	80011b8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000f60:	2000      	movs	r0, #0
 8000f62:	e029      	b.n	8000fb8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f64:	4c90      	ldr	r4, [pc, #576]	@ (80011a8 <HAL_RCC_OscConfig+0x274>)
 8000f66:	6863      	ldr	r3, [r4, #4]
 8000f68:	f003 030c 	and.w	r3, r3, #12
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d007      	beq.n	8000f80 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f70:	6863      	ldr	r3, [r4, #4]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d10a      	bne.n	8000f90 <HAL_RCC_OscConfig+0x5c>
 8000f7a:	6863      	ldr	r3, [r4, #4]
 8000f7c:	03de      	lsls	r6, r3, #15
 8000f7e:	d507      	bpl.n	8000f90 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	039c      	lsls	r4, r3, #14
 8000f84:	d5dd      	bpl.n	8000f42 <HAL_RCC_OscConfig+0xe>
 8000f86:	686b      	ldr	r3, [r5, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1da      	bne.n	8000f42 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e013      	b.n	8000fb8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f90:	686b      	ldr	r3, [r5, #4]
 8000f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f96:	d112      	bne.n	8000fbe <HAL_RCC_OscConfig+0x8a>
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fbe6 	bl	8000770 <HAL_GetTick>
 8000fa4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	0398      	lsls	r0, r3, #14
 8000faa:	d4ca      	bmi.n	8000f42 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fbe0 	bl	8000770 <HAL_GetTick>
 8000fb0:	1b80      	subs	r0, r0, r6
 8000fb2:	2864      	cmp	r0, #100	@ 0x64
 8000fb4:	d9f7      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000fb6:	2003      	movs	r0, #3
}
 8000fb8:	b002      	add	sp, #8
 8000fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbe:	b99b      	cbnz	r3, 8000fe8 <HAL_RCC_OscConfig+0xb4>
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fc6:	6023      	str	r3, [r4, #0]
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fbce 	bl	8000770 <HAL_GetTick>
 8000fd4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	0399      	lsls	r1, r3, #14
 8000fda:	d5b2      	bpl.n	8000f42 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fbc8 	bl	8000770 <HAL_GetTick>
 8000fe0:	1b80      	subs	r0, r0, r6
 8000fe2:	2864      	cmp	r0, #100	@ 0x64
 8000fe4:	d9f7      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xa2>
 8000fe6:	e7e6      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	d103      	bne.n	8000ff8 <HAL_RCC_OscConfig+0xc4>
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff4:	6023      	str	r3, [r4, #0]
 8000ff6:	e7cf      	b.n	8000f98 <HAL_RCC_OscConfig+0x64>
 8000ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001004:	e7cb      	b.n	8000f9e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001006:	4c68      	ldr	r4, [pc, #416]	@ (80011a8 <HAL_RCC_OscConfig+0x274>)
 8001008:	6863      	ldr	r3, [r4, #4]
 800100a:	f013 0f0c 	tst.w	r3, #12
 800100e:	d007      	beq.n	8001020 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001010:	6863      	ldr	r3, [r4, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d110      	bne.n	800103c <HAL_RCC_OscConfig+0x108>
 800101a:	6863      	ldr	r3, [r4, #4]
 800101c:	03da      	lsls	r2, r3, #15
 800101e:	d40d      	bmi.n	800103c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	079b      	lsls	r3, r3, #30
 8001024:	d502      	bpl.n	800102c <HAL_RCC_OscConfig+0xf8>
 8001026:	692b      	ldr	r3, [r5, #16]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1af      	bne.n	8000f8c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	696a      	ldr	r2, [r5, #20]
 8001030:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001034:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	e785      	b.n	8000f48 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103c:	692a      	ldr	r2, [r5, #16]
 800103e:	4b5b      	ldr	r3, [pc, #364]	@ (80011ac <HAL_RCC_OscConfig+0x278>)
 8001040:	b16a      	cbz	r2, 800105e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001046:	f7ff fb93 	bl	8000770 <HAL_GetTick>
 800104a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	079f      	lsls	r7, r3, #30
 8001050:	d4ec      	bmi.n	800102c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff fb8d 	bl	8000770 <HAL_GetTick>
 8001056:	1b80      	subs	r0, r0, r6
 8001058:	2802      	cmp	r0, #2
 800105a:	d9f7      	bls.n	800104c <HAL_RCC_OscConfig+0x118>
 800105c:	e7ab      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800105e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001060:	f7ff fb86 	bl	8000770 <HAL_GetTick>
 8001064:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	0798      	lsls	r0, r3, #30
 800106a:	f57f af6d 	bpl.w	8000f48 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fb7f 	bl	8000770 <HAL_GetTick>
 8001072:	1b80      	subs	r0, r0, r6
 8001074:	2802      	cmp	r0, #2
 8001076:	d9f6      	bls.n	8001066 <HAL_RCC_OscConfig+0x132>
 8001078:	e79d      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800107a:	69aa      	ldr	r2, [r5, #24]
 800107c:	4e4a      	ldr	r6, [pc, #296]	@ (80011a8 <HAL_RCC_OscConfig+0x274>)
 800107e:	4b4b      	ldr	r3, [pc, #300]	@ (80011ac <HAL_RCC_OscConfig+0x278>)
 8001080:	b1e2      	cbz	r2, 80010bc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001082:	2201      	movs	r2, #1
 8001084:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001088:	f7ff fb72 	bl	8000770 <HAL_GetTick>
 800108c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001090:	079b      	lsls	r3, r3, #30
 8001092:	d50d      	bpl.n	80010b0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001094:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001098:	4b45      	ldr	r3, [pc, #276]	@ (80011b0 <HAL_RCC_OscConfig+0x27c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	fbb3 f3f2 	udiv	r3, r3, r2
 80010a0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80010a2:	bf00      	nop
  }
  while (Delay --);
 80010a4:	9b01      	ldr	r3, [sp, #4]
 80010a6:	1e5a      	subs	r2, r3, #1
 80010a8:	9201      	str	r2, [sp, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f9      	bne.n	80010a2 <HAL_RCC_OscConfig+0x16e>
 80010ae:	e74f      	b.n	8000f50 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fb5e 	bl	8000770 <HAL_GetTick>
 80010b4:	1b00      	subs	r0, r0, r4
 80010b6:	2802      	cmp	r0, #2
 80010b8:	d9e9      	bls.n	800108e <HAL_RCC_OscConfig+0x15a>
 80010ba:	e77c      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80010bc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80010c0:	f7ff fb56 	bl	8000770 <HAL_GetTick>
 80010c4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80010c8:	079f      	lsls	r7, r3, #30
 80010ca:	f57f af41 	bpl.w	8000f50 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ce:	f7ff fb4f 	bl	8000770 <HAL_GetTick>
 80010d2:	1b00      	subs	r0, r0, r4
 80010d4:	2802      	cmp	r0, #2
 80010d6:	d9f6      	bls.n	80010c6 <HAL_RCC_OscConfig+0x192>
 80010d8:	e76d      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010da:	4c33      	ldr	r4, [pc, #204]	@ (80011a8 <HAL_RCC_OscConfig+0x274>)
 80010dc:	69e3      	ldr	r3, [r4, #28]
 80010de:	00d8      	lsls	r0, r3, #3
 80010e0:	d424      	bmi.n	800112c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80010e2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	69e3      	ldr	r3, [r4, #28]
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	61e3      	str	r3, [r4, #28]
 80010ec:	69e3      	ldr	r3, [r4, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f6:	4e2f      	ldr	r6, [pc, #188]	@ (80011b4 <HAL_RCC_OscConfig+0x280>)
 80010f8:	6833      	ldr	r3, [r6, #0]
 80010fa:	05d9      	lsls	r1, r3, #23
 80010fc:	d518      	bpl.n	8001130 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fe:	68eb      	ldr	r3, [r5, #12]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d126      	bne.n	8001152 <HAL_RCC_OscConfig+0x21e>
 8001104:	6a23      	ldr	r3, [r4, #32]
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800110c:	f7ff fb30 	bl	8000770 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001114:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001116:	6a23      	ldr	r3, [r4, #32]
 8001118:	079b      	lsls	r3, r3, #30
 800111a:	d53f      	bpl.n	800119c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800111c:	2f00      	cmp	r7, #0
 800111e:	f43f af1b 	beq.w	8000f58 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	69e3      	ldr	r3, [r4, #28]
 8001124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001128:	61e3      	str	r3, [r4, #28]
 800112a:	e715      	b.n	8000f58 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800112c:	2700      	movs	r7, #0
 800112e:	e7e2      	b.n	80010f6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001130:	6833      	ldr	r3, [r6, #0]
 8001132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001136:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001138:	f7ff fb1a 	bl	8000770 <HAL_GetTick>
 800113c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113e:	6833      	ldr	r3, [r6, #0]
 8001140:	05da      	lsls	r2, r3, #23
 8001142:	d4dc      	bmi.n	80010fe <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001144:	f7ff fb14 	bl	8000770 <HAL_GetTick>
 8001148:	eba0 0008 	sub.w	r0, r0, r8
 800114c:	2864      	cmp	r0, #100	@ 0x64
 800114e:	d9f6      	bls.n	800113e <HAL_RCC_OscConfig+0x20a>
 8001150:	e731      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001152:	b9ab      	cbnz	r3, 8001180 <HAL_RCC_OscConfig+0x24c>
 8001154:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115a:	f023 0301 	bic.w	r3, r3, #1
 800115e:	6223      	str	r3, [r4, #32]
 8001160:	6a23      	ldr	r3, [r4, #32]
 8001162:	f023 0304 	bic.w	r3, r3, #4
 8001166:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001168:	f7ff fb02 	bl	8000770 <HAL_GetTick>
 800116c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116e:	6a23      	ldr	r3, [r4, #32]
 8001170:	0798      	lsls	r0, r3, #30
 8001172:	d5d3      	bpl.n	800111c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001174:	f7ff fafc 	bl	8000770 <HAL_GetTick>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	4540      	cmp	r0, r8
 800117c:	d9f7      	bls.n	800116e <HAL_RCC_OscConfig+0x23a>
 800117e:	e71a      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001180:	2b05      	cmp	r3, #5
 8001182:	6a23      	ldr	r3, [r4, #32]
 8001184:	d103      	bne.n	800118e <HAL_RCC_OscConfig+0x25a>
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6223      	str	r3, [r4, #32]
 800118c:	e7ba      	b.n	8001104 <HAL_RCC_OscConfig+0x1d0>
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6223      	str	r3, [r4, #32]
 8001194:	6a23      	ldr	r3, [r4, #32]
 8001196:	f023 0304 	bic.w	r3, r3, #4
 800119a:	e7b6      	b.n	800110a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff fae8 	bl	8000770 <HAL_GetTick>
 80011a0:	1b80      	subs	r0, r0, r6
 80011a2:	4540      	cmp	r0, r8
 80011a4:	d9b7      	bls.n	8001116 <HAL_RCC_OscConfig+0x1e2>
 80011a6:	e706      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
 80011a8:	40021000 	.word	0x40021000
 80011ac:	42420000 	.word	0x42420000
 80011b0:	20000004 	.word	0x20000004
 80011b4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b8:	4c2a      	ldr	r4, [pc, #168]	@ (8001264 <HAL_RCC_OscConfig+0x330>)
 80011ba:	6862      	ldr	r2, [r4, #4]
 80011bc:	f002 020c 	and.w	r2, r2, #12
 80011c0:	2a08      	cmp	r2, #8
 80011c2:	d03e      	beq.n	8001242 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c4:	2200      	movs	r2, #0
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80011ca:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011cc:	d12c      	bne.n	8001228 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80011ce:	f7ff facf 	bl	8000770 <HAL_GetTick>
 80011d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	0199      	lsls	r1, r3, #6
 80011d8:	d420      	bmi.n	800121c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011da:	6a2b      	ldr	r3, [r5, #32]
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e0:	d105      	bne.n	80011ee <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011e2:	6862      	ldr	r2, [r4, #4]
 80011e4:	68a9      	ldr	r1, [r5, #8]
 80011e6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80011ea:	430a      	orrs	r2, r1
 80011ec:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ee:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80011f0:	6862      	ldr	r2, [r4, #4]
 80011f2:	430b      	orrs	r3, r1
 80011f4:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80011f8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80011fa:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <HAL_RCC_OscConfig+0x334>)
 8001200:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001202:	f7ff fab5 	bl	8000770 <HAL_GetTick>
 8001206:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	019a      	lsls	r2, r3, #6
 800120c:	f53f aea8 	bmi.w	8000f60 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001210:	f7ff faae 	bl	8000770 <HAL_GetTick>
 8001214:	1b40      	subs	r0, r0, r5
 8001216:	2802      	cmp	r0, #2
 8001218:	d9f6      	bls.n	8001208 <HAL_RCC_OscConfig+0x2d4>
 800121a:	e6cc      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff faa8 	bl	8000770 <HAL_GetTick>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	2802      	cmp	r0, #2
 8001224:	d9d6      	bls.n	80011d4 <HAL_RCC_OscConfig+0x2a0>
 8001226:	e6c6      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001228:	f7ff faa2 	bl	8000770 <HAL_GetTick>
 800122c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	019b      	lsls	r3, r3, #6
 8001232:	f57f ae95 	bpl.w	8000f60 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001236:	f7ff fa9b 	bl	8000770 <HAL_GetTick>
 800123a:	1b40      	subs	r0, r0, r5
 800123c:	2802      	cmp	r0, #2
 800123e:	d9f6      	bls.n	800122e <HAL_RCC_OscConfig+0x2fa>
 8001240:	e6b9      	b.n	8000fb6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001242:	2b01      	cmp	r3, #1
 8001244:	f43f aea2 	beq.w	8000f8c <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001248:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124a:	6a2b      	ldr	r3, [r5, #32]
 800124c:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001250:	429a      	cmp	r2, r3
 8001252:	f47f ae9b 	bne.w	8000f8c <HAL_RCC_OscConfig+0x58>
 8001256:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001258:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800125c:	1ac0      	subs	r0, r0, r3
 800125e:	bf18      	it	ne
 8001260:	2001      	movne	r0, #1
 8001262:	e6a9      	b.n	8000fb8 <HAL_RCC_OscConfig+0x84>
 8001264:	40021000 	.word	0x40021000
 8001268:	42420000 	.word	0x42420000

0800126c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <HAL_RCC_GetSysClockFreq+0x38>)
 800126e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001270:	f003 010c 	and.w	r1, r3, #12
 8001274:	2908      	cmp	r1, #8
 8001276:	d112      	bne.n	800129e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001278:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800127a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800127e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001280:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001282:	d509      	bpl.n	8001298 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001284:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001288:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800128c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x44>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001292:	fbb0 f0f3 	udiv	r0, r0, r3
 8001296:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x48>)
 800129a:	4358      	muls	r0, r3
 800129c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800129e:	4803      	ldr	r0, [pc, #12]	@ (80012ac <HAL_RCC_GetSysClockFreq+0x40>)
}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	08002112 	.word	0x08002112
 80012ac:	007a1200 	.word	0x007a1200
 80012b0:	08002110 	.word	0x08002110
 80012b4:	003d0900 	.word	0x003d0900

080012b8 <HAL_RCC_ClockConfig>:
{
 80012b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012bc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80012be:	4604      	mov	r4, r0
 80012c0:	b910      	cbnz	r0, 80012c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80012c2:	2001      	movs	r0, #1
}
 80012c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012c8:	4a44      	ldr	r2, [pc, #272]	@ (80013dc <HAL_RCC_ClockConfig+0x124>)
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d328      	bcc.n	8001326 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d4:	6821      	ldr	r1, [r4, #0]
 80012d6:	078e      	lsls	r6, r1, #30
 80012d8:	d430      	bmi.n	800133c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012da:	07ca      	lsls	r2, r1, #31
 80012dc:	d443      	bmi.n	8001366 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012de:	4a3f      	ldr	r2, [pc, #252]	@ (80013dc <HAL_RCC_ClockConfig+0x124>)
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	42ab      	cmp	r3, r5
 80012e8:	d865      	bhi.n	80013b6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ea:	6822      	ldr	r2, [r4, #0]
 80012ec:	4d3c      	ldr	r5, [pc, #240]	@ (80013e0 <HAL_RCC_ClockConfig+0x128>)
 80012ee:	f012 0f04 	tst.w	r2, #4
 80012f2:	d16c      	bne.n	80013ce <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f4:	0713      	lsls	r3, r2, #28
 80012f6:	d506      	bpl.n	8001306 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012f8:	686b      	ldr	r3, [r5, #4]
 80012fa:	6922      	ldr	r2, [r4, #16]
 80012fc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001300:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001304:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001306:	f7ff ffb1 	bl	800126c <HAL_RCC_GetSysClockFreq>
 800130a:	686b      	ldr	r3, [r5, #4]
 800130c:	4a35      	ldr	r2, [pc, #212]	@ (80013e4 <HAL_RCC_ClockConfig+0x12c>)
 800130e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	40d8      	lsrs	r0, r3
 8001316:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <HAL_RCC_ClockConfig+0x130>)
 8001318:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <HAL_RCC_ClockConfig+0x134>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	f7ff f9e5 	bl	80006ec <HAL_InitTick>
  return HAL_OK;
 8001322:	2000      	movs	r0, #0
 8001324:	e7ce      	b.n	80012c4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f023 0307 	bic.w	r3, r3, #7
 800132c:	430b      	orrs	r3, r1
 800132e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001330:	6813      	ldr	r3, [r2, #0]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	428b      	cmp	r3, r1
 8001338:	d1c3      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xa>
 800133a:	e7cb      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <HAL_RCC_ClockConfig+0x128>)
 800133e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001342:	bf1e      	ittt	ne
 8001344:	685a      	ldrne	r2, [r3, #4]
 8001346:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 800134a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800134e:	bf42      	ittt	mi
 8001350:	685a      	ldrmi	r2, [r3, #4]
 8001352:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001356:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	68a0      	ldr	r0, [r4, #8]
 800135c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001360:	4302      	orrs	r2, r0
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	e7b9      	b.n	80012da <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001366:	6862      	ldr	r2, [r4, #4]
 8001368:	4e1d      	ldr	r6, [pc, #116]	@ (80013e0 <HAL_RCC_ClockConfig+0x128>)
 800136a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136e:	d11a      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001370:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	d0a5      	beq.n	80012c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001378:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137c:	f023 0303 	bic.w	r3, r3, #3
 8001380:	4313      	orrs	r3, r2
 8001382:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001384:	f7ff f9f4 	bl	8000770 <HAL_GetTick>
 8001388:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	6873      	ldr	r3, [r6, #4]
 800138c:	6862      	ldr	r2, [r4, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001396:	d0a2      	beq.n	80012de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001398:	f7ff f9ea 	bl	8000770 <HAL_GetTick>
 800139c:	1bc0      	subs	r0, r0, r7
 800139e:	4540      	cmp	r0, r8
 80013a0:	d9f3      	bls.n	800138a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80013a2:	2003      	movs	r0, #3
 80013a4:	e78e      	b.n	80012c4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a6:	2a02      	cmp	r2, #2
 80013a8:	d102      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80013ae:	e7e1      	b.n	8001374 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	f013 0f02 	tst.w	r3, #2
 80013b4:	e7de      	b.n	8001374 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	f023 0307 	bic.w	r3, r3, #7
 80013bc:	432b      	orrs	r3, r5
 80013be:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	42ab      	cmp	r3, r5
 80013c8:	f47f af7b 	bne.w	80012c2 <HAL_RCC_ClockConfig+0xa>
 80013cc:	e78d      	b.n	80012ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ce:	686b      	ldr	r3, [r5, #4]
 80013d0:	68e1      	ldr	r1, [r4, #12]
 80013d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013d6:	430b      	orrs	r3, r1
 80013d8:	606b      	str	r3, [r5, #4]
 80013da:	e78b      	b.n	80012f4 <HAL_RCC_ClockConfig+0x3c>
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	08002100 	.word	0x08002100
 80013e8:	20000004 	.word	0x20000004
 80013ec:	2000000c 	.word	0x2000000c

080013f0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <HAL_RCC_GetPCLK1Freq+0x14>)
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	4a03      	ldr	r2, [pc, #12]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013fe:	6810      	ldr	r0, [r2, #0]
}
 8001400:	40d8      	lsrs	r0, r3
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	080020f8 	.word	0x080020f8
 800140c:	20000004 	.word	0x20000004

08001410 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	4a03      	ldr	r2, [pc, #12]	@ (800142c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800141e:	6810      	ldr	r0, [r2, #0]
}
 8001420:	40d8      	lsrs	r0, r3
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	080020f8 	.word	0x080020f8
 800142c:	20000004 	.word	0x20000004

08001430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001430:	b510      	push	{r4, lr}
 8001432:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001434:	6803      	ldr	r3, [r0, #0]
 8001436:	68c1      	ldr	r1, [r0, #12]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800143e:	430a      	orrs	r2, r1
 8001440:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001442:	6882      	ldr	r2, [r0, #8]
 8001444:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001446:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001448:	4302      	orrs	r2, r0
 800144a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800144c:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8001450:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001454:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001456:	430a      	orrs	r2, r1
 8001458:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	69a1      	ldr	r1, [r4, #24]
 800145e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001462:	430a      	orrs	r2, r1
 8001464:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <UART_SetConfig+0x70>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d115      	bne.n	8001498 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800146c:	f7ff ffd0 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001470:	2319      	movs	r3, #25
 8001472:	4343      	muls	r3, r0
 8001474:	6862      	ldr	r2, [r4, #4]
 8001476:	6820      	ldr	r0, [r4, #0]
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	fbb3 f3f2 	udiv	r3, r3, r2
 800147e:	2264      	movs	r2, #100	@ 0x64
 8001480:	fbb3 f1f2 	udiv	r1, r3, r2
 8001484:	fb02 3311 	mls	r3, r2, r1, r3
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	3332      	adds	r3, #50	@ 0x32
 800148c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001490:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001494:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8001496:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001498:	f7ff ffaa 	bl	80013f0 <HAL_RCC_GetPCLK1Freq>
 800149c:	e7e8      	b.n	8001470 <UART_SetConfig+0x40>
 800149e:	bf00      	nop
 80014a0:	40013800 	.word	0x40013800

080014a4 <HAL_UART_Init>:
{
 80014a4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80014a6:	4604      	mov	r4, r0
 80014a8:	b348      	cbz	r0, 80014fe <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80014aa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80014ae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80014b2:	b91b      	cbnz	r3, 80014bc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80014b4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80014b8:	f7ff f882 	bl	80005c0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80014bc:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80014be:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014c0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80014c4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80014c6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80014c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80014cc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80014ce:	f7ff ffaf 	bl	8001430 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014d2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014e4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014ec:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80014ee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014f0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014fa:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80014fc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
 8001500:	e7fc      	b.n	80014fc <HAL_UART_Init+0x58>
	...

08001504 <LCD_write_nibble>:
uint8_t backlight_state = 1;

/* Private variables */
extern I2C_HandleTypeDef hi2c1;

void LCD_write_nibble(uint8_t nibble, uint8_t rs) {
 8001504:	b530      	push	{r4, r5, lr}
  uint8_t data = nibble << D4_BIT;
  data |= rs << RS_BIT;
  data |= backlight_state << BL_BIT; // Include backlight state in data
  data |= 1 << EN_BIT;
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001506:	2564      	movs	r5, #100	@ 0x64
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <LCD_write_nibble+0x54>)
  data |= rs << RS_BIT;
 800150a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800150e:	781b      	ldrb	r3, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001510:	4c12      	ldr	r4, [pc, #72]	@ (800155c <LCD_write_nibble+0x58>)
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001512:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
void LCD_write_nibble(uint8_t nibble, uint8_t rs) {
 8001516:	b085      	sub	sp, #20
  data |= 1 << EN_BIT;
 8001518:	f041 0104 	orr.w	r1, r1, #4
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800151c:	f10d 020f 	add.w	r2, sp, #15
 8001520:	2301      	movs	r3, #1
  data |= 1 << EN_BIT;
 8001522:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001526:	4620      	mov	r0, r4
 8001528:	214e      	movs	r1, #78	@ 0x4e
 800152a:	9500      	str	r5, [sp, #0]
 800152c:	f7ff fc28 	bl	8000d80 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff f923 	bl	800077c <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8001536:	f89d 300f 	ldrb.w	r3, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800153a:	214e      	movs	r1, #78	@ 0x4e
  data &= ~(1 << EN_BIT);
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001544:	4620      	mov	r0, r4
 8001546:	2301      	movs	r3, #1
 8001548:	9500      	str	r5, [sp, #0]
 800154a:	f10d 020f 	add.w	r2, sp, #15
 800154e:	f7ff fc17 	bl	8000d80 <HAL_I2C_Master_Transmit>
}
 8001552:	b005      	add	sp, #20
 8001554:	bd30      	pop	{r4, r5, pc}
 8001556:	bf00      	nop
 8001558:	20000010 	.word	0x20000010
 800155c:	20000140 	.word	0x20000140

08001560 <LCD_send_cmd>:

void LCD_send_cmd(uint8_t cmd) {
 8001560:	b510      	push	{r4, lr}
 8001562:	4604      	mov	r4, r0
  uint8_t upper_nibble = cmd >> 4;
  uint8_t lower_nibble = cmd & 0x0F;
  LCD_write_nibble(upper_nibble, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	0900      	lsrs	r0, r0, #4
 8001568:	f7ff ffcc 	bl	8001504 <LCD_write_nibble>
  LCD_write_nibble(lower_nibble, 0);
 800156c:	f004 000f 	and.w	r0, r4, #15
 8001570:	2100      	movs	r1, #0
  if (cmd == 0x01 || cmd == 0x02) {
 8001572:	3c01      	subs	r4, #1
  LCD_write_nibble(lower_nibble, 0);
 8001574:	f7ff ffc6 	bl	8001504 <LCD_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8001578:	2c01      	cmp	r4, #1
 800157a:	d804      	bhi.n	8001586 <LCD_send_cmd+0x26>
    HAL_Delay(2);
  }
}
 800157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(2);
 8001580:	2002      	movs	r0, #2
 8001582:	f7ff b8fb 	b.w	800077c <HAL_Delay>
}
 8001586:	bd10      	pop	{r4, pc}

08001588 <LCD_send_data>:

void LCD_send_data(uint8_t data) {
 8001588:	b510      	push	{r4, lr}
 800158a:	4604      	mov	r4, r0
  uint8_t upper_nibble = data >> 4;
  uint8_t lower_nibble = data & 0x0F;
  LCD_write_nibble(upper_nibble, 1);
 800158c:	2101      	movs	r1, #1
 800158e:	0900      	lsrs	r0, r0, #4
 8001590:	f7ff ffb8 	bl	8001504 <LCD_write_nibble>
  LCD_write_nibble(lower_nibble, 1);
 8001594:	f004 000f 	and.w	r0, r4, #15
 8001598:	2101      	movs	r1, #1
}
 800159a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_write_nibble(lower_nibble, 1);
 800159e:	f7ff bfb1 	b.w	8001504 <LCD_write_nibble>

080015a2 <LCD_init>:

void LCD_init() {
 80015a2:	b508      	push	{r3, lr}
  HAL_Delay(50);
 80015a4:	2032      	movs	r0, #50	@ 0x32
 80015a6:	f7ff f8e9 	bl	800077c <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 80015aa:	2100      	movs	r1, #0
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff ffa9 	bl	8001504 <LCD_write_nibble>
  HAL_Delay(5);
 80015b2:	2005      	movs	r0, #5
 80015b4:	f7ff f8e2 	bl	800077c <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2003      	movs	r0, #3
 80015bc:	f7ff ffa2 	bl	8001504 <LCD_write_nibble>
  HAL_Delay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff f8db 	bl	800077c <HAL_Delay>
  LCD_write_nibble(0x03, 0);
 80015c6:	2100      	movs	r1, #0
 80015c8:	2003      	movs	r0, #3
 80015ca:	f7ff ff9b 	bl	8001504 <LCD_write_nibble>
  HAL_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff f8d4 	bl	800077c <HAL_Delay>
  LCD_write_nibble(0x02, 0);
 80015d4:	2100      	movs	r1, #0
 80015d6:	2002      	movs	r0, #2
 80015d8:	f7ff ff94 	bl	8001504 <LCD_write_nibble>
  LCD_send_cmd(0x28);
 80015dc:	2028      	movs	r0, #40	@ 0x28
 80015de:	f7ff ffbf 	bl	8001560 <LCD_send_cmd>
  LCD_send_cmd(0x0C);
 80015e2:	200c      	movs	r0, #12
 80015e4:	f7ff ffbc 	bl	8001560 <LCD_send_cmd>
  LCD_send_cmd(0x06);
 80015e8:	2006      	movs	r0, #6
 80015ea:	f7ff ffb9 	bl	8001560 <LCD_send_cmd>
  LCD_send_cmd(0x01);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff ffb6 	bl	8001560 <LCD_send_cmd>
  HAL_Delay(2);
}
 80015f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(2);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f7ff b8bf 	b.w	800077c <HAL_Delay>

080015fe <LCD_write_string>:

void LCD_write_string(char *str) {
 80015fe:	b510      	push	{r4, lr}
 8001600:	1e44      	subs	r4, r0, #1
  while (*str) {
 8001602:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001606:	b900      	cbnz	r0, 800160a <LCD_write_string+0xc>
	  LCD_send_data(*str++);
  }
}
 8001608:	bd10      	pop	{r4, pc}
	  LCD_send_data(*str++);
 800160a:	f7ff ffbd 	bl	8001588 <LCD_send_data>
 800160e:	e7f8      	b.n	8001602 <LCD_write_string+0x4>

08001610 <LCD_set_cursor>:

void LCD_set_cursor(uint8_t row, uint8_t column) {
    uint8_t address;
    switch (row) {
 8001610:	1e43      	subs	r3, r0, #1
 8001612:	4258      	negs	r0, r3
 8001614:	4158      	adcs	r0, r3
            address = 0x40;
            break;
        default:
            address = 0x00;
    }
    address += column;
 8001616:	eb01 1180 	add.w	r1, r1, r0, lsl #6
    LCD_send_cmd(0x80 | address);
 800161a:	f061 007f 	orn	r0, r1, #127	@ 0x7f
 800161e:	b2c0      	uxtb	r0, r0
 8001620:	f7ff bf9e 	b.w	8001560 <LCD_send_cmd>

08001624 <LCD_clear>:
}

void LCD_clear(void) {
 8001624:	b508      	push	{r3, lr}
	LCD_send_cmd(0x01);
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff ff9a 	bl	8001560 <LCD_send_cmd>
    HAL_Delay(2);
}
 800162c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(2);
 8001630:	2002      	movs	r0, #2
 8001632:	f7ff b8a3 	b.w	800077c <HAL_Delay>
	...

08001638 <LCD_backlight>:

void LCD_backlight(uint8_t state) {
  if (state) {
 8001638:	3800      	subs	r0, #0
 800163a:	bf18      	it	ne
 800163c:	2001      	movne	r0, #1
 800163e:	4b01      	ldr	r3, [pc, #4]	@ (8001644 <LCD_backlight+0xc>)
 8001640:	7018      	strb	r0, [r3, #0]
    backlight_state = 1;
  } else {
    backlight_state = 0;
  }
}
 8001642:	4770      	bx	lr
 8001644:	20000010 	.word	0x20000010

08001648 <read_clock_pin>:
	order = 0;
	counter = 0;
}

Switch_State_t read_clock_pin(void){
	return (Switch_State_t)HAL_GPIO_ReadPin(CLOCK_PORT, CLOCK_PIN);
 8001648:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800164c:	4801      	ldr	r0, [pc, #4]	@ (8001654 <read_clock_pin+0xc>)
 800164e:	f7ff b9dd 	b.w	8000a0c <HAL_GPIO_ReadPin>
 8001652:	bf00      	nop
 8001654:	40010c00 	.word	0x40010c00

08001658 <read_data_pin>:
}

Switch_State_t read_data_pin(void){
	return (Switch_State_t)HAL_GPIO_ReadPin(DATA_PORT, DATA_PIN);
 8001658:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800165c:	4801      	ldr	r0, [pc, #4]	@ (8001664 <read_data_pin+0xc>)
 800165e:	f7ff b9d5 	b.w	8000a0c <HAL_GPIO_ReadPin>
 8001662:	bf00      	nop
 8001664:	40010c00 	.word	0x40010c00

08001668 <Switches_calcEncoder>:

Switch_State_t Switches_getButton(void){
	return read_button_pin();
}

void Switches_calcEncoder(void){
 8001668:	b538      	push	{r3, r4, r5, lr}
	if (read_clock_pin() && (order == 0)) {
 800166a:	f7ff ffed 	bl	8001648 <read_clock_pin>
 800166e:	4c1e      	ldr	r4, [pc, #120]	@ (80016e8 <Switches_calcEncoder+0x80>)
 8001670:	b150      	cbz	r0, 8001688 <Switches_calcEncoder+0x20>
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <Switches_calcEncoder+0x84>)
 8001674:	781d      	ldrb	r5, [r3, #0]
 8001676:	b93d      	cbnz	r5, 8001688 <Switches_calcEncoder+0x20>
		arr[order++] = (uint8_t)read_data_pin();
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	f7ff ffec 	bl	8001658 <read_data_pin>
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <Switches_calcEncoder+0x88>)
		complate_flag = 0;
 8001682:	7025      	strb	r5, [r4, #0]
		arr[order++] = (uint8_t)read_data_pin();
 8001684:	7018      	strb	r0, [r3, #0]
		}
		else if ((arr[0] == 0) && (arr[1] == 1)) {
			counter--;
		}
	}
}
 8001686:	bd38      	pop	{r3, r4, r5, pc}
	else if (!read_clock_pin() && order) {
 8001688:	f7ff ffde 	bl	8001648 <read_clock_pin>
 800168c:	b9f0      	cbnz	r0, 80016cc <Switches_calcEncoder+0x64>
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <Switches_calcEncoder+0x84>)
 8001690:	781d      	ldrb	r5, [r3, #0]
 8001692:	b1dd      	cbz	r5, 80016cc <Switches_calcEncoder+0x64>
		arr[order++] = (uint8_t)read_data_pin();
 8001694:	1c6a      	adds	r2, r5, #1
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	f7ff ffde 	bl	8001658 <read_data_pin>
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <Switches_calcEncoder+0x88>)
 800169e:	5558      	strb	r0, [r3, r5]
		complate_flag = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	7023      	strb	r3, [r4, #0]
	if (complate_flag && (order == 2)) {
 80016a4:	4a11      	ldr	r2, [pc, #68]	@ (80016ec <Switches_calcEncoder+0x84>)
 80016a6:	7813      	ldrb	r3, [r2, #0]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d1ec      	bne.n	8001686 <Switches_calcEncoder+0x1e>
		order = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	7013      	strb	r3, [r2, #0]
		complate_flag = 0;
 80016b0:	7023      	strb	r3, [r4, #0]
		if ((arr[0] == 1) && (arr[1] == 0)) {
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <Switches_calcEncoder+0x88>)
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	2a01      	cmp	r2, #1
 80016b8:	d10c      	bne.n	80016d4 <Switches_calcEncoder+0x6c>
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e2      	bne.n	8001686 <Switches_calcEncoder+0x1e>
			counter ++;
 80016c0:	4a0c      	ldr	r2, [pc, #48]	@ (80016f4 <Switches_calcEncoder+0x8c>)
 80016c2:	7813      	ldrb	r3, [r2, #0]
 80016c4:	3301      	adds	r3, #1
			counter--;
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	7013      	strb	r3, [r2, #0]
}
 80016ca:	e7dc      	b.n	8001686 <Switches_calcEncoder+0x1e>
	if (complate_flag && (order == 2)) {
 80016cc:	7823      	ldrb	r3, [r4, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e8      	bne.n	80016a4 <Switches_calcEncoder+0x3c>
 80016d2:	e7d8      	b.n	8001686 <Switches_calcEncoder+0x1e>
		else if ((arr[0] == 0) && (arr[1] == 1)) {
 80016d4:	2a00      	cmp	r2, #0
 80016d6:	d1d6      	bne.n	8001686 <Switches_calcEncoder+0x1e>
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d1d3      	bne.n	8001686 <Switches_calcEncoder+0x1e>
			counter--;
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <Switches_calcEncoder+0x8c>)
 80016e0:	7813      	ldrb	r3, [r2, #0]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	e7ef      	b.n	80016c6 <Switches_calcEncoder+0x5e>
 80016e6:	bf00      	nop
 80016e8:	2000019e 	.word	0x2000019e
 80016ec:	2000019d 	.word	0x2000019d
 80016f0:	2000019f 	.word	0x2000019f
 80016f4:	2000019c 	.word	0x2000019c

080016f8 <Switches_getCounter>:

uint8_t Switches_getCounter(void){
	return (uint8_t)counter;
 80016f8:	4b01      	ldr	r3, [pc, #4]	@ (8001700 <Switches_getCounter+0x8>)
 80016fa:	7818      	ldrb	r0, [r3, #0]
}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000019c 	.word	0x2000019c

08001704 <siprintf>:
 8001704:	b40e      	push	{r1, r2, r3}
 8001706:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800170a:	b500      	push	{lr}
 800170c:	b09c      	sub	sp, #112	@ 0x70
 800170e:	ab1d      	add	r3, sp, #116	@ 0x74
 8001710:	9002      	str	r0, [sp, #8]
 8001712:	9006      	str	r0, [sp, #24]
 8001714:	9107      	str	r1, [sp, #28]
 8001716:	9104      	str	r1, [sp, #16]
 8001718:	4808      	ldr	r0, [pc, #32]	@ (800173c <siprintf+0x38>)
 800171a:	4909      	ldr	r1, [pc, #36]	@ (8001740 <siprintf+0x3c>)
 800171c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001720:	9105      	str	r1, [sp, #20]
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	a902      	add	r1, sp, #8
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	f000 f992 	bl	8001a50 <_svfiprintf_r>
 800172c:	2200      	movs	r2, #0
 800172e:	9b02      	ldr	r3, [sp, #8]
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	b01c      	add	sp, #112	@ 0x70
 8001734:	f85d eb04 	ldr.w	lr, [sp], #4
 8001738:	b003      	add	sp, #12
 800173a:	4770      	bx	lr
 800173c:	20000014 	.word	0x20000014
 8001740:	ffff0208 	.word	0xffff0208

08001744 <memset>:
 8001744:	4603      	mov	r3, r0
 8001746:	4402      	add	r2, r0
 8001748:	4293      	cmp	r3, r2
 800174a:	d100      	bne.n	800174e <memset+0xa>
 800174c:	4770      	bx	lr
 800174e:	f803 1b01 	strb.w	r1, [r3], #1
 8001752:	e7f9      	b.n	8001748 <memset+0x4>

08001754 <__errno>:
 8001754:	4b01      	ldr	r3, [pc, #4]	@ (800175c <__errno+0x8>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000014 	.word	0x20000014

08001760 <__libc_init_array>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	2600      	movs	r6, #0
 8001764:	4d0c      	ldr	r5, [pc, #48]	@ (8001798 <__libc_init_array+0x38>)
 8001766:	4c0d      	ldr	r4, [pc, #52]	@ (800179c <__libc_init_array+0x3c>)
 8001768:	1b64      	subs	r4, r4, r5
 800176a:	10a4      	asrs	r4, r4, #2
 800176c:	42a6      	cmp	r6, r4
 800176e:	d109      	bne.n	8001784 <__libc_init_array+0x24>
 8001770:	f000 fc78 	bl	8002064 <_init>
 8001774:	2600      	movs	r6, #0
 8001776:	4d0a      	ldr	r5, [pc, #40]	@ (80017a0 <__libc_init_array+0x40>)
 8001778:	4c0a      	ldr	r4, [pc, #40]	@ (80017a4 <__libc_init_array+0x44>)
 800177a:	1b64      	subs	r4, r4, r5
 800177c:	10a4      	asrs	r4, r4, #2
 800177e:	42a6      	cmp	r6, r4
 8001780:	d105      	bne.n	800178e <__libc_init_array+0x2e>
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	f855 3b04 	ldr.w	r3, [r5], #4
 8001788:	4798      	blx	r3
 800178a:	3601      	adds	r6, #1
 800178c:	e7ee      	b.n	800176c <__libc_init_array+0xc>
 800178e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001792:	4798      	blx	r3
 8001794:	3601      	adds	r6, #1
 8001796:	e7f2      	b.n	800177e <__libc_init_array+0x1e>
 8001798:	08002158 	.word	0x08002158
 800179c:	08002158 	.word	0x08002158
 80017a0:	08002158 	.word	0x08002158
 80017a4:	0800215c 	.word	0x0800215c

080017a8 <__retarget_lock_acquire_recursive>:
 80017a8:	4770      	bx	lr

080017aa <__retarget_lock_release_recursive>:
 80017aa:	4770      	bx	lr

080017ac <_free_r>:
 80017ac:	b538      	push	{r3, r4, r5, lr}
 80017ae:	4605      	mov	r5, r0
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d040      	beq.n	8001836 <_free_r+0x8a>
 80017b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017b8:	1f0c      	subs	r4, r1, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bfb8      	it	lt
 80017be:	18e4      	addlt	r4, r4, r3
 80017c0:	f000 f8de 	bl	8001980 <__malloc_lock>
 80017c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <_free_r+0x8c>)
 80017c6:	6813      	ldr	r3, [r2, #0]
 80017c8:	b933      	cbnz	r3, 80017d8 <_free_r+0x2c>
 80017ca:	6063      	str	r3, [r4, #4]
 80017cc:	6014      	str	r4, [r2, #0]
 80017ce:	4628      	mov	r0, r5
 80017d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017d4:	f000 b8da 	b.w	800198c <__malloc_unlock>
 80017d8:	42a3      	cmp	r3, r4
 80017da:	d908      	bls.n	80017ee <_free_r+0x42>
 80017dc:	6820      	ldr	r0, [r4, #0]
 80017de:	1821      	adds	r1, r4, r0
 80017e0:	428b      	cmp	r3, r1
 80017e2:	bf01      	itttt	eq
 80017e4:	6819      	ldreq	r1, [r3, #0]
 80017e6:	685b      	ldreq	r3, [r3, #4]
 80017e8:	1809      	addeq	r1, r1, r0
 80017ea:	6021      	streq	r1, [r4, #0]
 80017ec:	e7ed      	b.n	80017ca <_free_r+0x1e>
 80017ee:	461a      	mov	r2, r3
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	b10b      	cbz	r3, 80017f8 <_free_r+0x4c>
 80017f4:	42a3      	cmp	r3, r4
 80017f6:	d9fa      	bls.n	80017ee <_free_r+0x42>
 80017f8:	6811      	ldr	r1, [r2, #0]
 80017fa:	1850      	adds	r0, r2, r1
 80017fc:	42a0      	cmp	r0, r4
 80017fe:	d10b      	bne.n	8001818 <_free_r+0x6c>
 8001800:	6820      	ldr	r0, [r4, #0]
 8001802:	4401      	add	r1, r0
 8001804:	1850      	adds	r0, r2, r1
 8001806:	4283      	cmp	r3, r0
 8001808:	6011      	str	r1, [r2, #0]
 800180a:	d1e0      	bne.n	80017ce <_free_r+0x22>
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4408      	add	r0, r1
 8001812:	6010      	str	r0, [r2, #0]
 8001814:	6053      	str	r3, [r2, #4]
 8001816:	e7da      	b.n	80017ce <_free_r+0x22>
 8001818:	d902      	bls.n	8001820 <_free_r+0x74>
 800181a:	230c      	movs	r3, #12
 800181c:	602b      	str	r3, [r5, #0]
 800181e:	e7d6      	b.n	80017ce <_free_r+0x22>
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	1821      	adds	r1, r4, r0
 8001824:	428b      	cmp	r3, r1
 8001826:	bf01      	itttt	eq
 8001828:	6819      	ldreq	r1, [r3, #0]
 800182a:	685b      	ldreq	r3, [r3, #4]
 800182c:	1809      	addeq	r1, r1, r0
 800182e:	6021      	streq	r1, [r4, #0]
 8001830:	6063      	str	r3, [r4, #4]
 8001832:	6054      	str	r4, [r2, #4]
 8001834:	e7cb      	b.n	80017ce <_free_r+0x22>
 8001836:	bd38      	pop	{r3, r4, r5, pc}
 8001838:	200002e8 	.word	0x200002e8

0800183c <sbrk_aligned>:
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	4e0f      	ldr	r6, [pc, #60]	@ (800187c <sbrk_aligned+0x40>)
 8001840:	460c      	mov	r4, r1
 8001842:	6831      	ldr	r1, [r6, #0]
 8001844:	4605      	mov	r5, r0
 8001846:	b911      	cbnz	r1, 800184e <sbrk_aligned+0x12>
 8001848:	f000 fbaa 	bl	8001fa0 <_sbrk_r>
 800184c:	6030      	str	r0, [r6, #0]
 800184e:	4621      	mov	r1, r4
 8001850:	4628      	mov	r0, r5
 8001852:	f000 fba5 	bl	8001fa0 <_sbrk_r>
 8001856:	1c43      	adds	r3, r0, #1
 8001858:	d103      	bne.n	8001862 <sbrk_aligned+0x26>
 800185a:	f04f 34ff 	mov.w	r4, #4294967295
 800185e:	4620      	mov	r0, r4
 8001860:	bd70      	pop	{r4, r5, r6, pc}
 8001862:	1cc4      	adds	r4, r0, #3
 8001864:	f024 0403 	bic.w	r4, r4, #3
 8001868:	42a0      	cmp	r0, r4
 800186a:	d0f8      	beq.n	800185e <sbrk_aligned+0x22>
 800186c:	1a21      	subs	r1, r4, r0
 800186e:	4628      	mov	r0, r5
 8001870:	f000 fb96 	bl	8001fa0 <_sbrk_r>
 8001874:	3001      	adds	r0, #1
 8001876:	d1f2      	bne.n	800185e <sbrk_aligned+0x22>
 8001878:	e7ef      	b.n	800185a <sbrk_aligned+0x1e>
 800187a:	bf00      	nop
 800187c:	200002e4 	.word	0x200002e4

08001880 <_malloc_r>:
 8001880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001884:	1ccd      	adds	r5, r1, #3
 8001886:	f025 0503 	bic.w	r5, r5, #3
 800188a:	3508      	adds	r5, #8
 800188c:	2d0c      	cmp	r5, #12
 800188e:	bf38      	it	cc
 8001890:	250c      	movcc	r5, #12
 8001892:	2d00      	cmp	r5, #0
 8001894:	4606      	mov	r6, r0
 8001896:	db01      	blt.n	800189c <_malloc_r+0x1c>
 8001898:	42a9      	cmp	r1, r5
 800189a:	d904      	bls.n	80018a6 <_malloc_r+0x26>
 800189c:	230c      	movs	r3, #12
 800189e:	6033      	str	r3, [r6, #0]
 80018a0:	2000      	movs	r0, #0
 80018a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800197c <_malloc_r+0xfc>
 80018aa:	f000 f869 	bl	8001980 <__malloc_lock>
 80018ae:	f8d8 3000 	ldr.w	r3, [r8]
 80018b2:	461c      	mov	r4, r3
 80018b4:	bb44      	cbnz	r4, 8001908 <_malloc_r+0x88>
 80018b6:	4629      	mov	r1, r5
 80018b8:	4630      	mov	r0, r6
 80018ba:	f7ff ffbf 	bl	800183c <sbrk_aligned>
 80018be:	1c43      	adds	r3, r0, #1
 80018c0:	4604      	mov	r4, r0
 80018c2:	d158      	bne.n	8001976 <_malloc_r+0xf6>
 80018c4:	f8d8 4000 	ldr.w	r4, [r8]
 80018c8:	4627      	mov	r7, r4
 80018ca:	2f00      	cmp	r7, #0
 80018cc:	d143      	bne.n	8001956 <_malloc_r+0xd6>
 80018ce:	2c00      	cmp	r4, #0
 80018d0:	d04b      	beq.n	800196a <_malloc_r+0xea>
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	4639      	mov	r1, r7
 80018d6:	4630      	mov	r0, r6
 80018d8:	eb04 0903 	add.w	r9, r4, r3
 80018dc:	f000 fb60 	bl	8001fa0 <_sbrk_r>
 80018e0:	4581      	cmp	r9, r0
 80018e2:	d142      	bne.n	800196a <_malloc_r+0xea>
 80018e4:	6821      	ldr	r1, [r4, #0]
 80018e6:	4630      	mov	r0, r6
 80018e8:	1a6d      	subs	r5, r5, r1
 80018ea:	4629      	mov	r1, r5
 80018ec:	f7ff ffa6 	bl	800183c <sbrk_aligned>
 80018f0:	3001      	adds	r0, #1
 80018f2:	d03a      	beq.n	800196a <_malloc_r+0xea>
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	442b      	add	r3, r5
 80018f8:	6023      	str	r3, [r4, #0]
 80018fa:	f8d8 3000 	ldr.w	r3, [r8]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	bb62      	cbnz	r2, 800195c <_malloc_r+0xdc>
 8001902:	f8c8 7000 	str.w	r7, [r8]
 8001906:	e00f      	b.n	8001928 <_malloc_r+0xa8>
 8001908:	6822      	ldr	r2, [r4, #0]
 800190a:	1b52      	subs	r2, r2, r5
 800190c:	d420      	bmi.n	8001950 <_malloc_r+0xd0>
 800190e:	2a0b      	cmp	r2, #11
 8001910:	d917      	bls.n	8001942 <_malloc_r+0xc2>
 8001912:	1961      	adds	r1, r4, r5
 8001914:	42a3      	cmp	r3, r4
 8001916:	6025      	str	r5, [r4, #0]
 8001918:	bf18      	it	ne
 800191a:	6059      	strne	r1, [r3, #4]
 800191c:	6863      	ldr	r3, [r4, #4]
 800191e:	bf08      	it	eq
 8001920:	f8c8 1000 	streq.w	r1, [r8]
 8001924:	5162      	str	r2, [r4, r5]
 8001926:	604b      	str	r3, [r1, #4]
 8001928:	4630      	mov	r0, r6
 800192a:	f000 f82f 	bl	800198c <__malloc_unlock>
 800192e:	f104 000b 	add.w	r0, r4, #11
 8001932:	1d23      	adds	r3, r4, #4
 8001934:	f020 0007 	bic.w	r0, r0, #7
 8001938:	1ac2      	subs	r2, r0, r3
 800193a:	bf1c      	itt	ne
 800193c:	1a1b      	subne	r3, r3, r0
 800193e:	50a3      	strne	r3, [r4, r2]
 8001940:	e7af      	b.n	80018a2 <_malloc_r+0x22>
 8001942:	6862      	ldr	r2, [r4, #4]
 8001944:	42a3      	cmp	r3, r4
 8001946:	bf0c      	ite	eq
 8001948:	f8c8 2000 	streq.w	r2, [r8]
 800194c:	605a      	strne	r2, [r3, #4]
 800194e:	e7eb      	b.n	8001928 <_malloc_r+0xa8>
 8001950:	4623      	mov	r3, r4
 8001952:	6864      	ldr	r4, [r4, #4]
 8001954:	e7ae      	b.n	80018b4 <_malloc_r+0x34>
 8001956:	463c      	mov	r4, r7
 8001958:	687f      	ldr	r7, [r7, #4]
 800195a:	e7b6      	b.n	80018ca <_malloc_r+0x4a>
 800195c:	461a      	mov	r2, r3
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	42a3      	cmp	r3, r4
 8001962:	d1fb      	bne.n	800195c <_malloc_r+0xdc>
 8001964:	2300      	movs	r3, #0
 8001966:	6053      	str	r3, [r2, #4]
 8001968:	e7de      	b.n	8001928 <_malloc_r+0xa8>
 800196a:	230c      	movs	r3, #12
 800196c:	4630      	mov	r0, r6
 800196e:	6033      	str	r3, [r6, #0]
 8001970:	f000 f80c 	bl	800198c <__malloc_unlock>
 8001974:	e794      	b.n	80018a0 <_malloc_r+0x20>
 8001976:	6005      	str	r5, [r0, #0]
 8001978:	e7d6      	b.n	8001928 <_malloc_r+0xa8>
 800197a:	bf00      	nop
 800197c:	200002e8 	.word	0x200002e8

08001980 <__malloc_lock>:
 8001980:	4801      	ldr	r0, [pc, #4]	@ (8001988 <__malloc_lock+0x8>)
 8001982:	f7ff bf11 	b.w	80017a8 <__retarget_lock_acquire_recursive>
 8001986:	bf00      	nop
 8001988:	200002e0 	.word	0x200002e0

0800198c <__malloc_unlock>:
 800198c:	4801      	ldr	r0, [pc, #4]	@ (8001994 <__malloc_unlock+0x8>)
 800198e:	f7ff bf0c 	b.w	80017aa <__retarget_lock_release_recursive>
 8001992:	bf00      	nop
 8001994:	200002e0 	.word	0x200002e0

08001998 <__ssputs_r>:
 8001998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800199c:	461f      	mov	r7, r3
 800199e:	688e      	ldr	r6, [r1, #8]
 80019a0:	4682      	mov	sl, r0
 80019a2:	42be      	cmp	r6, r7
 80019a4:	460c      	mov	r4, r1
 80019a6:	4690      	mov	r8, r2
 80019a8:	680b      	ldr	r3, [r1, #0]
 80019aa:	d82d      	bhi.n	8001a08 <__ssputs_r+0x70>
 80019ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80019b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80019b4:	d026      	beq.n	8001a04 <__ssputs_r+0x6c>
 80019b6:	6965      	ldr	r5, [r4, #20]
 80019b8:	6909      	ldr	r1, [r1, #16]
 80019ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019be:	eba3 0901 	sub.w	r9, r3, r1
 80019c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80019c6:	1c7b      	adds	r3, r7, #1
 80019c8:	444b      	add	r3, r9
 80019ca:	106d      	asrs	r5, r5, #1
 80019cc:	429d      	cmp	r5, r3
 80019ce:	bf38      	it	cc
 80019d0:	461d      	movcc	r5, r3
 80019d2:	0553      	lsls	r3, r2, #21
 80019d4:	d527      	bpl.n	8001a26 <__ssputs_r+0x8e>
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7ff ff52 	bl	8001880 <_malloc_r>
 80019dc:	4606      	mov	r6, r0
 80019de:	b360      	cbz	r0, 8001a3a <__ssputs_r+0xa2>
 80019e0:	464a      	mov	r2, r9
 80019e2:	6921      	ldr	r1, [r4, #16]
 80019e4:	f000 fafa 	bl	8001fdc <memcpy>
 80019e8:	89a3      	ldrh	r3, [r4, #12]
 80019ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80019ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f2:	81a3      	strh	r3, [r4, #12]
 80019f4:	6126      	str	r6, [r4, #16]
 80019f6:	444e      	add	r6, r9
 80019f8:	6026      	str	r6, [r4, #0]
 80019fa:	463e      	mov	r6, r7
 80019fc:	6165      	str	r5, [r4, #20]
 80019fe:	eba5 0509 	sub.w	r5, r5, r9
 8001a02:	60a5      	str	r5, [r4, #8]
 8001a04:	42be      	cmp	r6, r7
 8001a06:	d900      	bls.n	8001a0a <__ssputs_r+0x72>
 8001a08:	463e      	mov	r6, r7
 8001a0a:	4632      	mov	r2, r6
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	6820      	ldr	r0, [r4, #0]
 8001a10:	f000 faac 	bl	8001f6c <memmove>
 8001a14:	2000      	movs	r0, #0
 8001a16:	68a3      	ldr	r3, [r4, #8]
 8001a18:	1b9b      	subs	r3, r3, r6
 8001a1a:	60a3      	str	r3, [r4, #8]
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	4433      	add	r3, r6
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a26:	462a      	mov	r2, r5
 8001a28:	f000 fae6 	bl	8001ff8 <_realloc_r>
 8001a2c:	4606      	mov	r6, r0
 8001a2e:	2800      	cmp	r0, #0
 8001a30:	d1e0      	bne.n	80019f4 <__ssputs_r+0x5c>
 8001a32:	4650      	mov	r0, sl
 8001a34:	6921      	ldr	r1, [r4, #16]
 8001a36:	f7ff feb9 	bl	80017ac <_free_r>
 8001a3a:	230c      	movs	r3, #12
 8001a3c:	f8ca 3000 	str.w	r3, [sl]
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	f04f 30ff 	mov.w	r0, #4294967295
 8001a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a4a:	81a3      	strh	r3, [r4, #12]
 8001a4c:	e7e9      	b.n	8001a22 <__ssputs_r+0x8a>
	...

08001a50 <_svfiprintf_r>:
 8001a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a54:	4698      	mov	r8, r3
 8001a56:	898b      	ldrh	r3, [r1, #12]
 8001a58:	4607      	mov	r7, r0
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	4614      	mov	r4, r2
 8001a60:	b09d      	sub	sp, #116	@ 0x74
 8001a62:	d510      	bpl.n	8001a86 <_svfiprintf_r+0x36>
 8001a64:	690b      	ldr	r3, [r1, #16]
 8001a66:	b973      	cbnz	r3, 8001a86 <_svfiprintf_r+0x36>
 8001a68:	2140      	movs	r1, #64	@ 0x40
 8001a6a:	f7ff ff09 	bl	8001880 <_malloc_r>
 8001a6e:	6028      	str	r0, [r5, #0]
 8001a70:	6128      	str	r0, [r5, #16]
 8001a72:	b930      	cbnz	r0, 8001a82 <_svfiprintf_r+0x32>
 8001a74:	230c      	movs	r3, #12
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	b01d      	add	sp, #116	@ 0x74
 8001a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a82:	2340      	movs	r3, #64	@ 0x40
 8001a84:	616b      	str	r3, [r5, #20]
 8001a86:	2300      	movs	r3, #0
 8001a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001a90:	2330      	movs	r3, #48	@ 0x30
 8001a92:	f04f 0901 	mov.w	r9, #1
 8001a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001c34 <_svfiprintf_r+0x1e4>
 8001a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	469a      	mov	sl, r3
 8001aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001aaa:	b10a      	cbz	r2, 8001ab0 <_svfiprintf_r+0x60>
 8001aac:	2a25      	cmp	r2, #37	@ 0x25
 8001aae:	d1f9      	bne.n	8001aa4 <_svfiprintf_r+0x54>
 8001ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8001ab4:	d00b      	beq.n	8001ace <_svfiprintf_r+0x7e>
 8001ab6:	465b      	mov	r3, fp
 8001ab8:	4622      	mov	r2, r4
 8001aba:	4629      	mov	r1, r5
 8001abc:	4638      	mov	r0, r7
 8001abe:	f7ff ff6b 	bl	8001998 <__ssputs_r>
 8001ac2:	3001      	adds	r0, #1
 8001ac4:	f000 80a7 	beq.w	8001c16 <_svfiprintf_r+0x1c6>
 8001ac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001aca:	445a      	add	r2, fp
 8001acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ace:	f89a 3000 	ldrb.w	r3, [sl]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 809f 	beq.w	8001c16 <_svfiprintf_r+0x1c6>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f04f 32ff 	mov.w	r2, #4294967295
 8001ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ae2:	f10a 0a01 	add.w	sl, sl, #1
 8001ae6:	9304      	str	r3, [sp, #16]
 8001ae8:	9307      	str	r3, [sp, #28]
 8001aea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001aee:	931a      	str	r3, [sp, #104]	@ 0x68
 8001af0:	4654      	mov	r4, sl
 8001af2:	2205      	movs	r2, #5
 8001af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001af8:	484e      	ldr	r0, [pc, #312]	@ (8001c34 <_svfiprintf_r+0x1e4>)
 8001afa:	f000 fa61 	bl	8001fc0 <memchr>
 8001afe:	9a04      	ldr	r2, [sp, #16]
 8001b00:	b9d8      	cbnz	r0, 8001b3a <_svfiprintf_r+0xea>
 8001b02:	06d0      	lsls	r0, r2, #27
 8001b04:	bf44      	itt	mi
 8001b06:	2320      	movmi	r3, #32
 8001b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b0c:	0711      	lsls	r1, r2, #28
 8001b0e:	bf44      	itt	mi
 8001b10:	232b      	movmi	r3, #43	@ 0x2b
 8001b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b16:	f89a 3000 	ldrb.w	r3, [sl]
 8001b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b1c:	d015      	beq.n	8001b4a <_svfiprintf_r+0xfa>
 8001b1e:	4654      	mov	r4, sl
 8001b20:	2000      	movs	r0, #0
 8001b22:	f04f 0c0a 	mov.w	ip, #10
 8001b26:	9a07      	ldr	r2, [sp, #28]
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b2e:	3b30      	subs	r3, #48	@ 0x30
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d94b      	bls.n	8001bcc <_svfiprintf_r+0x17c>
 8001b34:	b1b0      	cbz	r0, 8001b64 <_svfiprintf_r+0x114>
 8001b36:	9207      	str	r2, [sp, #28]
 8001b38:	e014      	b.n	8001b64 <_svfiprintf_r+0x114>
 8001b3a:	eba0 0308 	sub.w	r3, r0, r8
 8001b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	46a2      	mov	sl, r4
 8001b46:	9304      	str	r3, [sp, #16]
 8001b48:	e7d2      	b.n	8001af0 <_svfiprintf_r+0xa0>
 8001b4a:	9b03      	ldr	r3, [sp, #12]
 8001b4c:	1d19      	adds	r1, r3, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	9103      	str	r1, [sp, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bfbb      	ittet	lt
 8001b56:	425b      	neglt	r3, r3
 8001b58:	f042 0202 	orrlt.w	r2, r2, #2
 8001b5c:	9307      	strge	r3, [sp, #28]
 8001b5e:	9307      	strlt	r3, [sp, #28]
 8001b60:	bfb8      	it	lt
 8001b62:	9204      	strlt	r2, [sp, #16]
 8001b64:	7823      	ldrb	r3, [r4, #0]
 8001b66:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b68:	d10a      	bne.n	8001b80 <_svfiprintf_r+0x130>
 8001b6a:	7863      	ldrb	r3, [r4, #1]
 8001b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b6e:	d132      	bne.n	8001bd6 <_svfiprintf_r+0x186>
 8001b70:	9b03      	ldr	r3, [sp, #12]
 8001b72:	3402      	adds	r4, #2
 8001b74:	1d1a      	adds	r2, r3, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	9203      	str	r2, [sp, #12]
 8001b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001b7e:	9305      	str	r3, [sp, #20]
 8001b80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001c38 <_svfiprintf_r+0x1e8>
 8001b84:	2203      	movs	r2, #3
 8001b86:	4650      	mov	r0, sl
 8001b88:	7821      	ldrb	r1, [r4, #0]
 8001b8a:	f000 fa19 	bl	8001fc0 <memchr>
 8001b8e:	b138      	cbz	r0, 8001ba0 <_svfiprintf_r+0x150>
 8001b90:	2240      	movs	r2, #64	@ 0x40
 8001b92:	9b04      	ldr	r3, [sp, #16]
 8001b94:	eba0 000a 	sub.w	r0, r0, sl
 8001b98:	4082      	lsls	r2, r0
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	3401      	adds	r4, #1
 8001b9e:	9304      	str	r3, [sp, #16]
 8001ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ba4:	2206      	movs	r2, #6
 8001ba6:	4825      	ldr	r0, [pc, #148]	@ (8001c3c <_svfiprintf_r+0x1ec>)
 8001ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001bac:	f000 fa08 	bl	8001fc0 <memchr>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d036      	beq.n	8001c22 <_svfiprintf_r+0x1d2>
 8001bb4:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <_svfiprintf_r+0x1f0>)
 8001bb6:	bb1b      	cbnz	r3, 8001c00 <_svfiprintf_r+0x1b0>
 8001bb8:	9b03      	ldr	r3, [sp, #12]
 8001bba:	3307      	adds	r3, #7
 8001bbc:	f023 0307 	bic.w	r3, r3, #7
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	9303      	str	r3, [sp, #12]
 8001bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bc6:	4433      	add	r3, r6
 8001bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bca:	e76a      	b.n	8001aa2 <_svfiprintf_r+0x52>
 8001bcc:	460c      	mov	r4, r1
 8001bce:	2001      	movs	r0, #1
 8001bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bd4:	e7a8      	b.n	8001b28 <_svfiprintf_r+0xd8>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f04f 0c0a 	mov.w	ip, #10
 8001bdc:	4619      	mov	r1, r3
 8001bde:	3401      	adds	r4, #1
 8001be0:	9305      	str	r3, [sp, #20]
 8001be2:	4620      	mov	r0, r4
 8001be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001be8:	3a30      	subs	r2, #48	@ 0x30
 8001bea:	2a09      	cmp	r2, #9
 8001bec:	d903      	bls.n	8001bf6 <_svfiprintf_r+0x1a6>
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0c6      	beq.n	8001b80 <_svfiprintf_r+0x130>
 8001bf2:	9105      	str	r1, [sp, #20]
 8001bf4:	e7c4      	b.n	8001b80 <_svfiprintf_r+0x130>
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bfe:	e7f0      	b.n	8001be2 <_svfiprintf_r+0x192>
 8001c00:	ab03      	add	r3, sp, #12
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	462a      	mov	r2, r5
 8001c06:	4638      	mov	r0, r7
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <_svfiprintf_r+0x1f4>)
 8001c0a:	a904      	add	r1, sp, #16
 8001c0c:	f3af 8000 	nop.w
 8001c10:	1c42      	adds	r2, r0, #1
 8001c12:	4606      	mov	r6, r0
 8001c14:	d1d6      	bne.n	8001bc4 <_svfiprintf_r+0x174>
 8001c16:	89ab      	ldrh	r3, [r5, #12]
 8001c18:	065b      	lsls	r3, r3, #25
 8001c1a:	f53f af2d 	bmi.w	8001a78 <_svfiprintf_r+0x28>
 8001c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c20:	e72c      	b.n	8001a7c <_svfiprintf_r+0x2c>
 8001c22:	ab03      	add	r3, sp, #12
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	462a      	mov	r2, r5
 8001c28:	4638      	mov	r0, r7
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <_svfiprintf_r+0x1f4>)
 8001c2c:	a904      	add	r1, sp, #16
 8001c2e:	f000 f87d 	bl	8001d2c <_printf_i>
 8001c32:	e7ed      	b.n	8001c10 <_svfiprintf_r+0x1c0>
 8001c34:	08002122 	.word	0x08002122
 8001c38:	08002128 	.word	0x08002128
 8001c3c:	0800212c 	.word	0x0800212c
 8001c40:	00000000 	.word	0x00000000
 8001c44:	08001999 	.word	0x08001999

08001c48 <_printf_common>:
 8001c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c4c:	4616      	mov	r6, r2
 8001c4e:	4698      	mov	r8, r3
 8001c50:	688a      	ldr	r2, [r1, #8]
 8001c52:	690b      	ldr	r3, [r1, #16]
 8001c54:	4607      	mov	r7, r0
 8001c56:	4293      	cmp	r3, r2
 8001c58:	bfb8      	it	lt
 8001c5a:	4613      	movlt	r3, r2
 8001c5c:	6033      	str	r3, [r6, #0]
 8001c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001c62:	460c      	mov	r4, r1
 8001c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001c68:	b10a      	cbz	r2, 8001c6e <_printf_common+0x26>
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	6033      	str	r3, [r6, #0]
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	0699      	lsls	r1, r3, #26
 8001c72:	bf42      	ittt	mi
 8001c74:	6833      	ldrmi	r3, [r6, #0]
 8001c76:	3302      	addmi	r3, #2
 8001c78:	6033      	strmi	r3, [r6, #0]
 8001c7a:	6825      	ldr	r5, [r4, #0]
 8001c7c:	f015 0506 	ands.w	r5, r5, #6
 8001c80:	d106      	bne.n	8001c90 <_printf_common+0x48>
 8001c82:	f104 0a19 	add.w	sl, r4, #25
 8001c86:	68e3      	ldr	r3, [r4, #12]
 8001c88:	6832      	ldr	r2, [r6, #0]
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	42ab      	cmp	r3, r5
 8001c8e:	dc2b      	bgt.n	8001ce8 <_printf_common+0xa0>
 8001c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c94:	6822      	ldr	r2, [r4, #0]
 8001c96:	3b00      	subs	r3, #0
 8001c98:	bf18      	it	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	0692      	lsls	r2, r2, #26
 8001c9e:	d430      	bmi.n	8001d02 <_printf_common+0xba>
 8001ca0:	4641      	mov	r1, r8
 8001ca2:	4638      	mov	r0, r7
 8001ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ca8:	47c8      	blx	r9
 8001caa:	3001      	adds	r0, #1
 8001cac:	d023      	beq.n	8001cf6 <_printf_common+0xae>
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	6922      	ldr	r2, [r4, #16]
 8001cb2:	f003 0306 	and.w	r3, r3, #6
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf14      	ite	ne
 8001cba:	2500      	movne	r5, #0
 8001cbc:	6833      	ldreq	r3, [r6, #0]
 8001cbe:	f04f 0600 	mov.w	r6, #0
 8001cc2:	bf08      	it	eq
 8001cc4:	68e5      	ldreq	r5, [r4, #12]
 8001cc6:	f104 041a 	add.w	r4, r4, #26
 8001cca:	bf08      	it	eq
 8001ccc:	1aed      	subeq	r5, r5, r3
 8001cce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001cd2:	bf08      	it	eq
 8001cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	bfc4      	itt	gt
 8001cdc:	1a9b      	subgt	r3, r3, r2
 8001cde:	18ed      	addgt	r5, r5, r3
 8001ce0:	42b5      	cmp	r5, r6
 8001ce2:	d11a      	bne.n	8001d1a <_printf_common+0xd2>
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	e008      	b.n	8001cfa <_printf_common+0xb2>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	4652      	mov	r2, sl
 8001cec:	4641      	mov	r1, r8
 8001cee:	4638      	mov	r0, r7
 8001cf0:	47c8      	blx	r9
 8001cf2:	3001      	adds	r0, #1
 8001cf4:	d103      	bne.n	8001cfe <_printf_common+0xb6>
 8001cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cfe:	3501      	adds	r5, #1
 8001d00:	e7c1      	b.n	8001c86 <_printf_common+0x3e>
 8001d02:	2030      	movs	r0, #48	@ 0x30
 8001d04:	18e1      	adds	r1, r4, r3
 8001d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d10:	4422      	add	r2, r4
 8001d12:	3302      	adds	r3, #2
 8001d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d18:	e7c2      	b.n	8001ca0 <_printf_common+0x58>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	4641      	mov	r1, r8
 8001d20:	4638      	mov	r0, r7
 8001d22:	47c8      	blx	r9
 8001d24:	3001      	adds	r0, #1
 8001d26:	d0e6      	beq.n	8001cf6 <_printf_common+0xae>
 8001d28:	3601      	adds	r6, #1
 8001d2a:	e7d9      	b.n	8001ce0 <_printf_common+0x98>

08001d2c <_printf_i>:
 8001d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d30:	7e0f      	ldrb	r7, [r1, #24]
 8001d32:	4691      	mov	r9, r2
 8001d34:	2f78      	cmp	r7, #120	@ 0x78
 8001d36:	4680      	mov	r8, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d42:	d807      	bhi.n	8001d54 <_printf_i+0x28>
 8001d44:	2f62      	cmp	r7, #98	@ 0x62
 8001d46:	d80a      	bhi.n	8001d5e <_printf_i+0x32>
 8001d48:	2f00      	cmp	r7, #0
 8001d4a:	f000 80d3 	beq.w	8001ef4 <_printf_i+0x1c8>
 8001d4e:	2f58      	cmp	r7, #88	@ 0x58
 8001d50:	f000 80ba 	beq.w	8001ec8 <_printf_i+0x19c>
 8001d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001d5c:	e03a      	b.n	8001dd4 <_printf_i+0xa8>
 8001d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001d62:	2b15      	cmp	r3, #21
 8001d64:	d8f6      	bhi.n	8001d54 <_printf_i+0x28>
 8001d66:	a101      	add	r1, pc, #4	@ (adr r1, 8001d6c <_printf_i+0x40>)
 8001d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d6c:	08001dc5 	.word	0x08001dc5
 8001d70:	08001dd9 	.word	0x08001dd9
 8001d74:	08001d55 	.word	0x08001d55
 8001d78:	08001d55 	.word	0x08001d55
 8001d7c:	08001d55 	.word	0x08001d55
 8001d80:	08001d55 	.word	0x08001d55
 8001d84:	08001dd9 	.word	0x08001dd9
 8001d88:	08001d55 	.word	0x08001d55
 8001d8c:	08001d55 	.word	0x08001d55
 8001d90:	08001d55 	.word	0x08001d55
 8001d94:	08001d55 	.word	0x08001d55
 8001d98:	08001edb 	.word	0x08001edb
 8001d9c:	08001e03 	.word	0x08001e03
 8001da0:	08001e95 	.word	0x08001e95
 8001da4:	08001d55 	.word	0x08001d55
 8001da8:	08001d55 	.word	0x08001d55
 8001dac:	08001efd 	.word	0x08001efd
 8001db0:	08001d55 	.word	0x08001d55
 8001db4:	08001e03 	.word	0x08001e03
 8001db8:	08001d55 	.word	0x08001d55
 8001dbc:	08001d55 	.word	0x08001d55
 8001dc0:	08001e9d 	.word	0x08001e9d
 8001dc4:	6833      	ldr	r3, [r6, #0]
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6032      	str	r2, [r6, #0]
 8001dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e09e      	b.n	8001f16 <_printf_i+0x1ea>
 8001dd8:	6833      	ldr	r3, [r6, #0]
 8001dda:	6820      	ldr	r0, [r4, #0]
 8001ddc:	1d19      	adds	r1, r3, #4
 8001dde:	6031      	str	r1, [r6, #0]
 8001de0:	0606      	lsls	r6, r0, #24
 8001de2:	d501      	bpl.n	8001de8 <_printf_i+0xbc>
 8001de4:	681d      	ldr	r5, [r3, #0]
 8001de6:	e003      	b.n	8001df0 <_printf_i+0xc4>
 8001de8:	0645      	lsls	r5, r0, #25
 8001dea:	d5fb      	bpl.n	8001de4 <_printf_i+0xb8>
 8001dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001df0:	2d00      	cmp	r5, #0
 8001df2:	da03      	bge.n	8001dfc <_printf_i+0xd0>
 8001df4:	232d      	movs	r3, #45	@ 0x2d
 8001df6:	426d      	negs	r5, r5
 8001df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	4859      	ldr	r0, [pc, #356]	@ (8001f64 <_printf_i+0x238>)
 8001e00:	e011      	b.n	8001e26 <_printf_i+0xfa>
 8001e02:	6821      	ldr	r1, [r4, #0]
 8001e04:	6833      	ldr	r3, [r6, #0]
 8001e06:	0608      	lsls	r0, r1, #24
 8001e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e0c:	d402      	bmi.n	8001e14 <_printf_i+0xe8>
 8001e0e:	0649      	lsls	r1, r1, #25
 8001e10:	bf48      	it	mi
 8001e12:	b2ad      	uxthmi	r5, r5
 8001e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e16:	6033      	str	r3, [r6, #0]
 8001e18:	bf14      	ite	ne
 8001e1a:	230a      	movne	r3, #10
 8001e1c:	2308      	moveq	r3, #8
 8001e1e:	4851      	ldr	r0, [pc, #324]	@ (8001f64 <_printf_i+0x238>)
 8001e20:	2100      	movs	r1, #0
 8001e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e26:	6866      	ldr	r6, [r4, #4]
 8001e28:	2e00      	cmp	r6, #0
 8001e2a:	bfa8      	it	ge
 8001e2c:	6821      	ldrge	r1, [r4, #0]
 8001e2e:	60a6      	str	r6, [r4, #8]
 8001e30:	bfa4      	itt	ge
 8001e32:	f021 0104 	bicge.w	r1, r1, #4
 8001e36:	6021      	strge	r1, [r4, #0]
 8001e38:	b90d      	cbnz	r5, 8001e3e <_printf_i+0x112>
 8001e3a:	2e00      	cmp	r6, #0
 8001e3c:	d04b      	beq.n	8001ed6 <_printf_i+0x1aa>
 8001e3e:	4616      	mov	r6, r2
 8001e40:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e44:	fb03 5711 	mls	r7, r3, r1, r5
 8001e48:	5dc7      	ldrb	r7, [r0, r7]
 8001e4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e4e:	462f      	mov	r7, r5
 8001e50:	42bb      	cmp	r3, r7
 8001e52:	460d      	mov	r5, r1
 8001e54:	d9f4      	bls.n	8001e40 <_printf_i+0x114>
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d10b      	bne.n	8001e72 <_printf_i+0x146>
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	07df      	lsls	r7, r3, #31
 8001e5e:	d508      	bpl.n	8001e72 <_printf_i+0x146>
 8001e60:	6923      	ldr	r3, [r4, #16]
 8001e62:	6861      	ldr	r1, [r4, #4]
 8001e64:	4299      	cmp	r1, r3
 8001e66:	bfde      	ittt	le
 8001e68:	2330      	movle	r3, #48	@ 0x30
 8001e6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e72:	1b92      	subs	r2, r2, r6
 8001e74:	6122      	str	r2, [r4, #16]
 8001e76:	464b      	mov	r3, r9
 8001e78:	4621      	mov	r1, r4
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	f8cd a000 	str.w	sl, [sp]
 8001e80:	aa03      	add	r2, sp, #12
 8001e82:	f7ff fee1 	bl	8001c48 <_printf_common>
 8001e86:	3001      	adds	r0, #1
 8001e88:	d14a      	bne.n	8001f20 <_printf_i+0x1f4>
 8001e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8e:	b004      	add	sp, #16
 8001e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	f043 0320 	orr.w	r3, r3, #32
 8001e9a:	6023      	str	r3, [r4, #0]
 8001e9c:	2778      	movs	r7, #120	@ 0x78
 8001e9e:	4832      	ldr	r0, [pc, #200]	@ (8001f68 <_printf_i+0x23c>)
 8001ea0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	6831      	ldr	r1, [r6, #0]
 8001ea8:	061f      	lsls	r7, r3, #24
 8001eaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8001eae:	d402      	bmi.n	8001eb6 <_printf_i+0x18a>
 8001eb0:	065f      	lsls	r7, r3, #25
 8001eb2:	bf48      	it	mi
 8001eb4:	b2ad      	uxthmi	r5, r5
 8001eb6:	6031      	str	r1, [r6, #0]
 8001eb8:	07d9      	lsls	r1, r3, #31
 8001eba:	bf44      	itt	mi
 8001ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8001ec0:	6023      	strmi	r3, [r4, #0]
 8001ec2:	b11d      	cbz	r5, 8001ecc <_printf_i+0x1a0>
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	e7ab      	b.n	8001e20 <_printf_i+0xf4>
 8001ec8:	4826      	ldr	r0, [pc, #152]	@ (8001f64 <_printf_i+0x238>)
 8001eca:	e7e9      	b.n	8001ea0 <_printf_i+0x174>
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	f023 0320 	bic.w	r3, r3, #32
 8001ed2:	6023      	str	r3, [r4, #0]
 8001ed4:	e7f6      	b.n	8001ec4 <_printf_i+0x198>
 8001ed6:	4616      	mov	r6, r2
 8001ed8:	e7bd      	b.n	8001e56 <_printf_i+0x12a>
 8001eda:	6833      	ldr	r3, [r6, #0]
 8001edc:	6825      	ldr	r5, [r4, #0]
 8001ede:	1d18      	adds	r0, r3, #4
 8001ee0:	6961      	ldr	r1, [r4, #20]
 8001ee2:	6030      	str	r0, [r6, #0]
 8001ee4:	062e      	lsls	r6, r5, #24
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	d501      	bpl.n	8001eee <_printf_i+0x1c2>
 8001eea:	6019      	str	r1, [r3, #0]
 8001eec:	e002      	b.n	8001ef4 <_printf_i+0x1c8>
 8001eee:	0668      	lsls	r0, r5, #25
 8001ef0:	d5fb      	bpl.n	8001eea <_printf_i+0x1be>
 8001ef2:	8019      	strh	r1, [r3, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	4616      	mov	r6, r2
 8001ef8:	6123      	str	r3, [r4, #16]
 8001efa:	e7bc      	b.n	8001e76 <_printf_i+0x14a>
 8001efc:	6833      	ldr	r3, [r6, #0]
 8001efe:	2100      	movs	r1, #0
 8001f00:	1d1a      	adds	r2, r3, #4
 8001f02:	6032      	str	r2, [r6, #0]
 8001f04:	681e      	ldr	r6, [r3, #0]
 8001f06:	6862      	ldr	r2, [r4, #4]
 8001f08:	4630      	mov	r0, r6
 8001f0a:	f000 f859 	bl	8001fc0 <memchr>
 8001f0e:	b108      	cbz	r0, 8001f14 <_printf_i+0x1e8>
 8001f10:	1b80      	subs	r0, r0, r6
 8001f12:	6060      	str	r0, [r4, #4]
 8001f14:	6863      	ldr	r3, [r4, #4]
 8001f16:	6123      	str	r3, [r4, #16]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f1e:	e7aa      	b.n	8001e76 <_printf_i+0x14a>
 8001f20:	4632      	mov	r2, r6
 8001f22:	4649      	mov	r1, r9
 8001f24:	4640      	mov	r0, r8
 8001f26:	6923      	ldr	r3, [r4, #16]
 8001f28:	47d0      	blx	sl
 8001f2a:	3001      	adds	r0, #1
 8001f2c:	d0ad      	beq.n	8001e8a <_printf_i+0x15e>
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	079b      	lsls	r3, r3, #30
 8001f32:	d413      	bmi.n	8001f5c <_printf_i+0x230>
 8001f34:	68e0      	ldr	r0, [r4, #12]
 8001f36:	9b03      	ldr	r3, [sp, #12]
 8001f38:	4298      	cmp	r0, r3
 8001f3a:	bfb8      	it	lt
 8001f3c:	4618      	movlt	r0, r3
 8001f3e:	e7a6      	b.n	8001e8e <_printf_i+0x162>
 8001f40:	2301      	movs	r3, #1
 8001f42:	4632      	mov	r2, r6
 8001f44:	4649      	mov	r1, r9
 8001f46:	4640      	mov	r0, r8
 8001f48:	47d0      	blx	sl
 8001f4a:	3001      	adds	r0, #1
 8001f4c:	d09d      	beq.n	8001e8a <_printf_i+0x15e>
 8001f4e:	3501      	adds	r5, #1
 8001f50:	68e3      	ldr	r3, [r4, #12]
 8001f52:	9903      	ldr	r1, [sp, #12]
 8001f54:	1a5b      	subs	r3, r3, r1
 8001f56:	42ab      	cmp	r3, r5
 8001f58:	dcf2      	bgt.n	8001f40 <_printf_i+0x214>
 8001f5a:	e7eb      	b.n	8001f34 <_printf_i+0x208>
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	f104 0619 	add.w	r6, r4, #25
 8001f62:	e7f5      	b.n	8001f50 <_printf_i+0x224>
 8001f64:	08002133 	.word	0x08002133
 8001f68:	08002144 	.word	0x08002144

08001f6c <memmove>:
 8001f6c:	4288      	cmp	r0, r1
 8001f6e:	b510      	push	{r4, lr}
 8001f70:	eb01 0402 	add.w	r4, r1, r2
 8001f74:	d902      	bls.n	8001f7c <memmove+0x10>
 8001f76:	4284      	cmp	r4, r0
 8001f78:	4623      	mov	r3, r4
 8001f7a:	d807      	bhi.n	8001f8c <memmove+0x20>
 8001f7c:	1e43      	subs	r3, r0, #1
 8001f7e:	42a1      	cmp	r1, r4
 8001f80:	d008      	beq.n	8001f94 <memmove+0x28>
 8001f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f8a:	e7f8      	b.n	8001f7e <memmove+0x12>
 8001f8c:	4601      	mov	r1, r0
 8001f8e:	4402      	add	r2, r0
 8001f90:	428a      	cmp	r2, r1
 8001f92:	d100      	bne.n	8001f96 <memmove+0x2a>
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f9e:	e7f7      	b.n	8001f90 <memmove+0x24>

08001fa0 <_sbrk_r>:
 8001fa0:	b538      	push	{r3, r4, r5, lr}
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	4d05      	ldr	r5, [pc, #20]	@ (8001fbc <_sbrk_r+0x1c>)
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	4608      	mov	r0, r1
 8001faa:	602b      	str	r3, [r5, #0]
 8001fac:	f7fe fb56 	bl	800065c <_sbrk>
 8001fb0:	1c43      	adds	r3, r0, #1
 8001fb2:	d102      	bne.n	8001fba <_sbrk_r+0x1a>
 8001fb4:	682b      	ldr	r3, [r5, #0]
 8001fb6:	b103      	cbz	r3, 8001fba <_sbrk_r+0x1a>
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	bd38      	pop	{r3, r4, r5, pc}
 8001fbc:	200002dc 	.word	0x200002dc

08001fc0 <memchr>:
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	b510      	push	{r4, lr}
 8001fc4:	b2c9      	uxtb	r1, r1
 8001fc6:	4402      	add	r2, r0
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	d101      	bne.n	8001fd2 <memchr+0x12>
 8001fce:	2000      	movs	r0, #0
 8001fd0:	e003      	b.n	8001fda <memchr+0x1a>
 8001fd2:	7804      	ldrb	r4, [r0, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	428c      	cmp	r4, r1
 8001fd8:	d1f6      	bne.n	8001fc8 <memchr+0x8>
 8001fda:	bd10      	pop	{r4, pc}

08001fdc <memcpy>:
 8001fdc:	440a      	add	r2, r1
 8001fde:	4291      	cmp	r1, r2
 8001fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001fe4:	d100      	bne.n	8001fe8 <memcpy+0xc>
 8001fe6:	4770      	bx	lr
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fee:	4291      	cmp	r1, r2
 8001ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ff4:	d1f9      	bne.n	8001fea <memcpy+0xe>
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <_realloc_r>:
 8001ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffc:	4680      	mov	r8, r0
 8001ffe:	4615      	mov	r5, r2
 8002000:	460c      	mov	r4, r1
 8002002:	b921      	cbnz	r1, 800200e <_realloc_r+0x16>
 8002004:	4611      	mov	r1, r2
 8002006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800200a:	f7ff bc39 	b.w	8001880 <_malloc_r>
 800200e:	b92a      	cbnz	r2, 800201c <_realloc_r+0x24>
 8002010:	f7ff fbcc 	bl	80017ac <_free_r>
 8002014:	2400      	movs	r4, #0
 8002016:	4620      	mov	r0, r4
 8002018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800201c:	f000 f81a 	bl	8002054 <_malloc_usable_size_r>
 8002020:	4285      	cmp	r5, r0
 8002022:	4606      	mov	r6, r0
 8002024:	d802      	bhi.n	800202c <_realloc_r+0x34>
 8002026:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800202a:	d8f4      	bhi.n	8002016 <_realloc_r+0x1e>
 800202c:	4629      	mov	r1, r5
 800202e:	4640      	mov	r0, r8
 8002030:	f7ff fc26 	bl	8001880 <_malloc_r>
 8002034:	4607      	mov	r7, r0
 8002036:	2800      	cmp	r0, #0
 8002038:	d0ec      	beq.n	8002014 <_realloc_r+0x1c>
 800203a:	42b5      	cmp	r5, r6
 800203c:	462a      	mov	r2, r5
 800203e:	4621      	mov	r1, r4
 8002040:	bf28      	it	cs
 8002042:	4632      	movcs	r2, r6
 8002044:	f7ff ffca 	bl	8001fdc <memcpy>
 8002048:	4621      	mov	r1, r4
 800204a:	4640      	mov	r0, r8
 800204c:	f7ff fbae 	bl	80017ac <_free_r>
 8002050:	463c      	mov	r4, r7
 8002052:	e7e0      	b.n	8002016 <_realloc_r+0x1e>

08002054 <_malloc_usable_size_r>:
 8002054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002058:	1f18      	subs	r0, r3, #4
 800205a:	2b00      	cmp	r3, #0
 800205c:	bfbc      	itt	lt
 800205e:	580b      	ldrlt	r3, [r1, r0]
 8002060:	18c0      	addlt	r0, r0, r3
 8002062:	4770      	bx	lr

08002064 <_init>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	bf00      	nop
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr

08002070 <_fini>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	bf00      	nop
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr
